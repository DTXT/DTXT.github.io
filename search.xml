<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库</title>
      <link href="/2022/02/18/mysql/"/>
      <url>/2022/02/18/mysql/</url>
      
        <content type="html"><![CDATA[<h2><span id="1-初始mysql">1、初始mysql</span></h2><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 <span class="token comment" spellcheck="true">-- 连接数据库</span><span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> Host <span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 修改用户密码</span><span class="token keyword">show</span> <span class="token keyword">databases</span> <span class="token comment" spellcheck="true">-- 查看所有数据库</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>bookms3<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 切换数据库</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token comment" spellcheck="true">-- 查看数据库中所有的表</span><span class="token keyword">DESC</span> admin_info <span class="token comment" spellcheck="true">-- 查看表中的列标题</span><span class="token keyword">exit</span> <span class="token comment" spellcheck="true">-- 退出连接</span><span class="token comment" spellcheck="true">-- 注释</span><span class="token comment" spellcheck="true">/*多行注释*/</span></code></pre><h3><span id="11-数据库语言">1.1、数据库语言</span></h3><p>DDL 定义</p><p>DML 操作</p><p>DQL 查询</p><p>DCL 控制</p><h2><span id="2-数据库操作">2、数据库操作(*)</span></h2><p>1创建数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> bookms3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- IF NOT EXISTS 可选</span></code></pre><p>2 删除数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> hello  <span class="token comment" spellcheck="true">-- IF EXISTS 如果存在</span></code></pre><p>3使用数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> <span class="token punctuation">`</span>bookms3<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 建议加``</span></code></pre><p>4查看所有的数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span> </code></pre><h3><span id="21-数据库数据类型">2.1、数据库数据类型</span></h3><blockquote><p>数值</p></blockquote><ul><li>tinyint       十分小的数据            1个字节</li><li>smallint     较小的数据               2个字节</li><li>meiumint  中等大小的数据       3个字节</li><li><strong>int               标准的整数              4个字节</strong></li><li>bigint           较大的数据             8个字节</li><li>float              浮点数                    4个字节</li><li><strong>double         浮点数                    8个字节</strong></li><li>decimal        字符串形式的浮点数</li></ul><blockquote><p>字符串</p></blockquote><ul><li>char      字符串固定大小   0~255</li><li><strong>varchar 可变字符串          0~65535</strong></li><li>tingtext   微型文本             2^8-1</li><li>text          文本串                  2^16-1   保存大文本</li></ul><blockquote><p>时间日期</p></blockquote><ul><li>date  YYYY-MM-DD 日期</li><li>time  HH:mm:ss 时间格式</li><li><strong>datetime  YYYY-MM-DD HH:mm:ss</strong> </li><li><strong>timestamp 时间戳</strong></li><li>year    年份</li></ul><blockquote><p>null</p></blockquote><ul><li>没有值 未知</li><li>注意不要使用null进行运算</li></ul><h3><span id="22-字段属性">2.2、字段属性</span></h3><p>Unsigned      无符号的整数</p><p>zerofill           0填充</p><p>自增                </p><p>非空</p><p>默认</p><p>拓展</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*每一个表 都必须存在以下五个字段 表示一个记录存在的意义id 主键version   乐观锁is_delete 伪删除gmt_create创建时间gmt_updateg*/</span></code></pre><h3><span id="23-创建表">2.3、创建表(*)</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'学号'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'匿名'</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pwd<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span><span class="token string">'123456'</span> <span class="token keyword">COMMENT</span><span class="token string">'密码'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'女'</span> <span class="token keyword">COMMENT</span><span class="token string">'性别'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'生日'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'住址'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'邮箱'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><p>格式</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span><span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>字段名<span class="token punctuation">`</span>列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>字段名<span class="token punctuation">`</span>列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">`</span>字段名<span class="token punctuation">`</span>列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>表类型<span class="token punctuation">]</span><span class="token punctuation">[</span>字符集设置<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span></code></pre><h3><span id="24-常用命令">2.4、常用命令</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> school <span class="token comment" spellcheck="true">-- 查看创建数据库的语句</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token comment" spellcheck="true">-- 查看创建student的语句</span><span class="token keyword">desc</span> student <span class="token comment" spellcheck="true">-- 查看表</span></code></pre><h3><span id="25-数据表的类型">2.5、数据表的类型</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 关于数据库引擎</span><span class="token comment" spellcheck="true">/*INNODB 默认MYISAM 早些年使用*/</span></code></pre><table><thead><tr><th align="center"></th><th align="center">MYISAM</th><th align="center">INNODB</th></tr></thead><tbody><tr><td align="center">事务支持</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">数据行锁定</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">外键约束</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">全文索引</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">表空间的大小</td><td align="center">较小</td><td align="center">较大~MYISAM2倍</td></tr></tbody></table><ul><li><p>MYISAM  节约空间 速度快</p></li><li><p>INNODB  安全性高 事务处理 多表操作多用户操作</p></li></ul><blockquote><p><strong>在物理空间存在的位置</strong></p></blockquote><p>所有的数据文件都存在data目录下 一个文件夹对应一个数据库</p><p>本质还是文件的存储</p><p>MySQL 引擎在物理文件上的区别</p><ul><li><p>innodb 在数据库表中只有一个 *.frm文件以及上级目录下的ibdata1文件</p></li><li><p>myisam对应的文件</p><ul><li><p>   *.frm 表结构的定义文件</p></li><li><p>   *.MYD 数据文件</p></li><li><p> *.MYI  索引文件</p></li></ul></li></ul><blockquote><p><strong>设置数据库的字符集编码</strong></p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><p>不设置 会是mysql的默认字符集编码(不支持中文)</p><p>在my.ini中配置默认编码</p><pre class=" language-ini"><code class="language-ini"><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span></code></pre><h3><span id="26-表操作">2.6、表操作(*)</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改表名</span><span class="token comment" spellcheck="true">-- ALTER TABLE 旧表名 rename as 新表明</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">RENAME</span> <span class="token keyword">AS</span> student1<span class="token comment" spellcheck="true">-- 增加字段</span><span class="token comment" spellcheck="true">-- ALTER TABLE 表明 ADD 字段名 约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student1 <span class="token keyword">ADD</span> age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 修改字段 修改约束(int 改 varchar)</span><span class="token comment" spellcheck="true">-- ALTER TABLE 表明 MODIFY 字段名 新约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student1 <span class="token keyword">MODIFY</span> age <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- ALTER TABLE 表明 change 旧字段名 新字段名 约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student1 CHANGE age age1 <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 修改字段名 + 约束</span><span class="token comment" spellcheck="true">-- 删除表字段</span><span class="token comment" spellcheck="true">-- ALTER TABLE 表明 DROP 字段名</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student1 <span class="token keyword">DROP</span> age1<span class="token comment" spellcheck="true">-- 删除表</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 表名</code></pre><p>所有的操作建议加上判断 <strong><u>if exists  /  if not exitsts</u></strong> 以防报错</p><h3><span id="27-注意点">2.7、注意点</span></h3><ul><li> 字段名 用``</li><li>注释 – /**/</li><li>建议小写</li><li>所有符号用英文</li></ul><h2><span id="3-mysql数据管理">3、MySQL数据管理</span></h2><h3><span id="31-外键了解">3.1、外键(了解)</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span>  <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">(</span>  <span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'年级id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>gradename<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'年级名称'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><blockquote><p>方式1 在创建的时候 增加约束 (麻烦复杂)</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 学生表的gradeid 字段 要去引用 年级表的 gradeid</span><span class="token comment" spellcheck="true">-- 定义外键 key</span><span class="token comment" spellcheck="true">-- 给这个外建加约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'学号'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'匿名'</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pwd<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span><span class="token string">'123456'</span> <span class="token keyword">COMMENT</span><span class="token string">'密码'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'女'</span> <span class="token keyword">COMMENT</span><span class="token string">'性别'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'生日'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年级'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'住址'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'邮箱'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>FK_gradeid<span class="token punctuation">`</span>  <span class="token punctuation">(</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">CONSTRAINT</span>  <span class="token punctuation">`</span>FK_gradeid<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><blockquote><p>方式2</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 正常创建表之后再加</span><span class="token comment" spellcheck="true">-- alter table 表名 ADD CONSTRAINT 约束名  FOREIGN KEY(作为外键的字段名) REFERENCES 外键表(外键表的字段)</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>FK_gradeid<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">)</span></code></pre><p>以上都是物理外键、数据库级别的外键，不建议使用</p><p><strong>最佳实践</strong></p><ul><li>数据库就是单纯的表，只用来存数据，只有行和列</li><li>想使用多张表，使用外键(用程序实现)</li></ul><h3><span id="32-dml语言全记">3.2、DML语言(全记)</span></h3><p>数据库意义:数据存储,数据管理</p><p>DML语言:<strong>数据操作语言</strong></p><ul><li>insert</li><li>update</li><li>delete</li></ul><h3><span id="33-添加">3.3、添加</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 插入语句</span><span class="token comment" spellcheck="true">-- insert into 表明([字段名])values(值) 【字段要和值一一对应】</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>gradename<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'大四'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 插入多个</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>gradename<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'大三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'大二'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'大一'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 不写相当与全字段都有</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'@123'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pwd<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>sex<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>birthday<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>email<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'@123'</span><span class="token punctuation">)</span></code></pre><h3><span id="34-修改">3.4、修改</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改  不写条件修改全部</span><span class="token comment" spellcheck="true">-- UPDATE 表名 set 字段名 where 条件</span><span class="token keyword">UPDATE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'狂神'</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">-- 修改多个</span><span class="token keyword">UPDATE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'狂神'</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">"女"</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">4</span></code></pre><blockquote><p>条件</p></blockquote><p>between 1 and 2 范围[]</p><p>AND       并且</p><p>OR          或者</p><h3><span id="35-删除">3.5、删除</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- delete from 表名 where 条件</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">-- 清空数据库表中的数据 表的结构和索引约束不会变</span><span class="token keyword">TRUNCATE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span></code></pre><blockquote><p>TRUNCATE和DELETE区别</p></blockquote><ul><li>相同点 :都能删除数据</li><li>不同: </li></ul><p>​     TRUNCATE  自增列重置</p><p>​     TRUNCATE  不会影响事务</p><p><strong>了解</strong>  delete删除的问题  重启数据库现象</p><p>innodb  自增列会从1开始*(存在内存中 断点即失)*</p><p>myisam 继续从上一个子增量开始*(存在文件中 不会丢失)*</p><h2><span id="4-dql查询数据最重点">4、DQL查询数据(最重点)</span></h2><p>DQL: Data Query Language(数据查询语言)</p><ul><li><p>所有的查询操作都用它</p></li><li><p>简单的 复杂的又可以</p></li><li><p>数据库中最核心的语言</p></li><li><p>使用频率最高的语句 </p><blockquote><p>用到的表</p></blockquote></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 学校数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 学生表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学号'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>loginpwd<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生姓名'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别，0或1'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年级编号'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'联系电话，允许为空'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'地址，允许为空'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>borndate<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'出生时间'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱账号允许为空'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>identitycard<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'身份证号'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>identitycard<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>identitycard<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>email<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 年纪表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'年级编号'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>gradename<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年级名称'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 科目表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程编号'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程名称'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>classhour<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学时'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年级编号'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">19</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 成绩表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学号'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程编号'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>examdate<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'考试日期'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'考试成绩'</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span></code></pre><blockquote><p>表中数据</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 插入学生数据 其余自行添加 这里只添加了2行</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>loginpwd<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>sex<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>phone<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>borndate<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>email<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>identitycard<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'张伟'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'13800001234'</span><span class="token punctuation">,</span><span class="token string">'北京朝阳'</span><span class="token punctuation">,</span><span class="token string">'1980-1-1'</span><span class="token punctuation">,</span><span class="token string">'text123@qq.com'</span><span class="token punctuation">,</span><span class="token string">'123456198001011234'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'赵强'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'13800002222'</span><span class="token punctuation">,</span><span class="token string">'广东深圳'</span><span class="token punctuation">,</span><span class="token string">'1990-1-1'</span><span class="token punctuation">,</span><span class="token string">'text111@qq.com'</span><span class="token punctuation">,</span><span class="token string">'123456199001011233'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 插入成绩数据  这里仅插入了一组，其余自行添加</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>examdate<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2013-11-11 16:00:00'</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2013-11-12 16:00:00'</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'2013-11-11 09:00:00'</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'2013-11-13 16:00:00'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'2013-11-14 16:00:00'</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 插入年级数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gradename<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'大一'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'大二'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'大三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'大四'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'预科班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 插入科目数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>classhour<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'高等数学-1'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'高等数学-2'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'高等数学-3'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'高等数学-4'</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'C语言-1'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'C语言-2'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'C语言-3'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'C语言-4'</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'Java程序设计-1'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'Java程序设计-2'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'Java程序设计-3'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'Java程序设计-4'</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'数据库结构-1'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">'数据库结构-2'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'数据库结构-3'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">'数据库结构-4'</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span>'C<span class="token comment" spellcheck="true">#基础',130,1);</span></code></pre><h3><span id="41-指定查询字段">4.1、指定查询字段</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询全部学生</span><span class="token comment" spellcheck="true">-- SELECT 字段 from 表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token comment" spellcheck="true">-- 查询指定字段</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span class="token comment" spellcheck="true">-- 别名，给结果起一个名字 as 可以给字段或者表 (不写as也可以)</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">AS</span> 学生姓名 <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> s<span class="token comment" spellcheck="true">-- 查询sql系统版本</span><span class="token keyword">SELECT</span> VERSION<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 计算</span><span class="token keyword">SELECT</span> <span class="token number">100</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">AS</span> 计算结果<span class="token comment" spellcheck="true">-- 查询自增步长</span><span class="token keyword">SELECT</span> @<span class="token variable">@auto_increment_increment</span><span class="token comment" spellcheck="true">-- 修改查询的结果</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> 学号<span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token operator">+</span><span class="token number">100</span> <span class="token punctuation">`</span>成绩<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span></code></pre><h4><span id="411-拼接字符串">4.1.1、拼接字符串</span></h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 函数  concat (a,b)拼接字符串</span><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">'姓名:'</span><span class="token punctuation">,</span>studentname<span class="token punctuation">)</span> <span class="token keyword">AS</span> 姓名 <span class="token keyword">FROM</span> student</code></pre><h4><span id="412-去重">4.1.2、去重</span></h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询参加过考试的学生的学号   DISTINCT去除重复的数据</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">FROM</span><span class="token punctuation">`</span>result<span class="token punctuation">`</span></code></pre><p>数据库中的表达式: 文本值、 列 、Null 、函数、 计算表达式、 系统变量</p><p><em>select <strong>表达式</strong> from 表</em></p><h3><span id="42-where-条件字句">4.2、where 条件字句</span></h3><p>作用： 检索数据中<strong>符合条件</strong>的值</p><p>条件可以是一个或多个表达式组成 结果是 布尔值</p><blockquote><p>逻辑运算符</p></blockquote><table><thead><tr><th align="left">运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td align="left">and   &amp;&amp;</td><td>a and b  a&amp;&amp;b</td><td>与   两个真 则真</td></tr><tr><td align="left">or     ||</td><td>a or b     a||b</td><td>或   一个真 就真</td></tr><tr><td align="left">Not    !</td><td>not a        ！a</td><td>非   真就假  假就真</td></tr></tbody></table><p><strong>尽量使用英文</strong></p><pre class=" language-SQL"><code class="language-SQL">-- 模糊查询(区间)SELECT `Studentno`,`studentresult` FROM`result` WHERE `studentresult` BETWEEN 95 AND 100-- 除了1000号学生之外的同学的成绩SELECT `Studentno`,`studentresult` FROM`result` WHERE NOT`studentno`=1000</code></pre><blockquote><p>模糊查询:比较运算符</p></blockquote><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>IS NULL</td><td>a is null</td><td>如果a为null则返回true</td></tr><tr><td>IS NOT NULL</td><td>a is not null</td><td>如果a不为null则返回true</td></tr><tr><td>BETWEEN</td><td>a between b and c</td><td>若a在b到c之间则返回true</td></tr><tr><td>Like</td><td>a like b</td><td>如果a 能匹配到 b 则返回真</td></tr><tr><td><strong>IN</strong></td><td>a in (a1,a2,a3…)</td><td>如果a在 a1 a2 a3 之中 则返回真</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ============ Like =============</span><span class="token comment" spellcheck="true">-- 查询姓张的同学</span><span class="token comment" spellcheck="true">-- like结合 %(代表0到任意个字符) _(一个字符)</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'张%'</span><span class="token comment" spellcheck="true">-- 查询姓张的同学 名字后面只有一个字</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'张_'</span><span class="token comment" spellcheck="true">-- 查询名字中间诺字的同学的信息</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%诺%'</span><span class="token comment" spellcheck="true">-- ============ in =============</span><span class="token comment" spellcheck="true">-- 查询1001 1002 号学员</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">IN</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询在北京的学生</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token string">'深圳'</span><span class="token punctuation">,</span><span class="token string">'北京朝阳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ======= is NULL   is NOT NULL =======</span><span class="token comment" spellcheck="true">-- 查询地址为空的学生</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> address<span class="token operator">=</span><span class="token string">''</span><span class="token comment" spellcheck="true">-- 查询又出生日期的学生</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>borndate<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span></code></pre><h3><span id="43-联表查询">4.3、联表查询</span></h3><blockquote><p>join 对比</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ======= 联表查询 ========</span><span class="token comment" spellcheck="true">-- 查询参加了考试的同学</span><span class="token comment" spellcheck="true">/* 思路1 分析需求 分析查询的字段来自哪些表2 确定使用哪些连接查询 确定交叉点(有哪些相同的字段) 判断的条件: 学生表的 `studentno` 和 成绩表中的 `studentno`*/</span><span class="token comment" spellcheck="true">-- INNER j集</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">WHERE</span> S<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token comment" spellcheck="true">-- right JOIN</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> s<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token comment" spellcheck="true">-- left JOIN</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> s<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></code></pre><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>Inner join</td><td>如果表中至少有一个匹配 就返回行</td></tr><tr><td>left jion</td><td>从左表返回所有值，即使右表没有</td></tr><tr><td>right jion</td><td>从右表返回所有值，即使左表没有</td></tr></tbody></table><p>表   [left/right/inner]join   表    on    连接查询 (on 是相当与左右连起来的连接条件)</p><p>where      等值查询(对结果筛选)</p><pre class=" language-SQL"><code class="language-SQL">-- 查询参加考试的同学的信息-- 学号 姓名 考试科目 成绩-- 三个表SELECT s.`studentno`,`studentname`,`subjectname`,`studentresult`FROM student sRIGHT JOIN `result` rON s.`studentno`=r.`studentno`INNER JOIN `subject` subON sub.`subjectno`=r.`subjectno`</code></pre><blockquote><p>自连接（了解）</p></blockquote><p>自连接：(自己的表和自己的表连接, 核心:一张表拆分为两张一样表)</p><p>需要的表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>category<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>pid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'父id 没有父则为1'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'种类名字'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_general_ci<span class="token punctuation">;</span>   <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'信息技术'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>CATEGOrY<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'软件开发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>PId<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'美术设计'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>School<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>categorynamE<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'数据库'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>CATEgoryid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'办公信息'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>CAtegoryname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'web开发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>SCHool<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'ps技术'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询父子信息</span><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span><span class="token keyword">AS</span> <span class="token string">'父栏目'</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span> <span class="token keyword">AS</span><span class="token string">'子栏目'</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token number">b</span><span class="token keyword">WHERE</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></code></pre><blockquote><p>连表查询练习</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询学生的年级信息</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gradename<span class="token punctuation">`</span><span class="token keyword">FROM</span> student s<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span> g<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token operator">=</span>g<span class="token punctuation">.</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token comment" spellcheck="true">-- 查询科目所属的年级</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gradename<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span> g<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token operator">=</span>g<span class="token punctuation">.</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token comment" spellcheck="true">-- 查询了参加考试的同学的信息</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> sub<span class="token keyword">ON</span> sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></code></pre><h3><span id="44-分页和排序">4.4、分页和排序</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ====分页 limit和排序 order by====</span><span class="token comment" spellcheck="true">-- 排序: 升序 asc 降序 desc</span><span class="token comment" spellcheck="true">-- order by</span><span class="token comment" spellcheck="true">-- 根据结果成绩排序</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> sub<span class="token keyword">ON</span> sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">ASC</span><span class="token comment" spellcheck="true">-- 分页  每页只显示5条数据</span><span class="token comment" spellcheck="true">-- 语法 limit  起始行,页面大小</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> sub<span class="token keyword">ON</span> sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">ASC</span><span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span></code></pre><h3><span id="45-子查询">4.5、子查询</span></h3><p>WHERE (值是计算出来的)</p><p>本质：在where语句中嵌套一个子查询语句</p><p>where (select *from)</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询 高等数学-2 的所有考试结果（学号 科目号 成绩）</span><span class="token comment" spellcheck="true">-- 方式一: 连表查询</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> r<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> sub<span class="token keyword">ON</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token operator">=</span>sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token keyword">WHERE</span> sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'高等数学-2'</span><span class="token comment" spellcheck="true">-- 方式二: 子查询</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> subjectno<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> subjectno <span class="token keyword">FROM</span><span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'高等数学-2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 查询分数不小于60分的学生的学号和姓名</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token keyword">FROM</span> student s<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 查询分数不小于60分的学生的学号和姓名</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token keyword">FROM</span> student s<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">)</span></code></pre><h2><span id="5-函数">5、函数</span></h2><h4><span id="51-常用函数">5.1、常用函数</span></h4><pre class=" language-SQL"><code class="language-SQL">-- 数学运算SELECT ABS(-8) -- 绝对值SELECT CEILING(9.4) -- 向上取整SELECT FLOOR(9.4) -- 向下取整SELECT RAND() -- 返回0-1之间的随机数SELECT SIGN(-10) -- 判断数的符号 0 - 0 负数返回-1 正数返回1-- 字符串函数SELECT CHAR_LENGTH('从不翻车') -- 字符串长度SELECT CONCAT('我','爱你们')  -- 拼接SELECT INSERT('我爱编程',2,0,'超级')  -- 从第二个开始 替换0个 为 超级SELECT LOWER('KuangShen') -- 小写SELECT UPPER('KuangShen') -- 大写SELECT INSTR('KuangShen','K') -- K第一次出现的位置SELECT REPLACE('ABC','A','D') -- 替换SELECT SUBSTR('ABCDE',1,3) -- 截取 从1 截3个 不写截完SELECT REVERSE('ABCD') -- 反转-- 查询姓赵的同学 名字换成燥SELECT REPLACE(studentname,'赵','燥') FROM studentWHERE studentname LIKE '赵%'-- 时间和日期函数SELECT CURRENT_DATE() -- 获取当前日期SELECT CURDATE() -- 获取当前日期SELECT NOW() -- 获取当前日期使时间SELECT LOCALTIME() -- 获取本地时间SELECT SYSDATE()   -- 获取系统时间-- 年月日 时分秒SELECT YEAR(NOW())SELECT MONTH(NOW())SELECT DAY(NOW())SELECT HOUR(NOW())SELECT MINUTE(NOW())SELECT SECOND(NOW())-- 系统SELECT SYSTEM_USER()SELECT USER()SELECT VERSION()</code></pre><h4><span id="52-聚合函数">5.2、聚合函数</span></h4><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>count()</td><td>计数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>min()</td><td>最小值</td></tr></tbody></table><h5><span id="521-分组和过滤">5.2.1、分组和过滤</span></h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ==== 聚合函数 ====</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>studentname<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token comment" spellcheck="true">-- 字段 ,忽略null</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token comment" spellcheck="true">-- 全部 计算所有行</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token comment" spellcheck="true">-- 全部 变成1(行全部变成一个字段 快) 计算所有行</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span><span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 分数综合</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span><span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 平均分</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span><span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 最高分</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span><span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 最低分</span><span class="token comment" spellcheck="true">-- 查询 科目名 平均分 最高分 最低分</span><span class="token comment" spellcheck="true">-- 核心：根据不同的科目分组</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> 平均分<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> r<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> sub<span class="token keyword">ON</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token operator">=</span>sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 通过科目名分组(不能用where用having)</span><span class="token keyword">HAVING</span> 平均分<span class="token operator">></span><span class="token number">70</span></code></pre><h3><span id="53-拓展数据库级别的md5加密">5.3、拓展(数据库级别的MD5加密)</span></h3><p>什么是md5?</p><p>信息摘要算法</p><p>主要增强算法复杂度和不可逆性</p><p>不可逆 具体的值的md5是一样的</p><pre class=" language-SQL"><code class="language-SQL">-- == 测试md5 加密==CREATE TABLE `testmd5`(  `id` INT(4) NOT NULL,  `name` VARCHAR(20) NOT NULL,  `pwd` VARCHAR(50) NOT NULL,  PRIMARY KEY(`id`))ENGINE=INNODB DEFAULT CHARSET=utf8-- 明文密码INSERT INTO testmd5 VALUES(1,'张三','123'),(2,'李四','123456'),(3,'王五','135')-- 密码UPDATE testmd5 SET pwd=MD5(pwd) -- 插入的时候加密INSERT INTO testmd5 VALUES(4,'小明',MD5('1234567'))-- 校验-- 将用户传来的密码md5加密 然后比对md5密码SELECT * FROM testmd5 WHERE NAME='小明' AND pwd=MD5('1234567') </code></pre><h3><span id="54-select小结">5.4、SELECT小结</span></h3><p><img src="/2022/02/18/mysql/MySQL%5Cselect%E5%B0%8F%E7%BB%93.png"></p><h2><span id="6-事务">6、事务(*)</span></h2><p>博客连接：<a href="https://blog.csdn.net/dengjili/article/details/82468576">https://blog.csdn.net/dengjili/article/details/82468576</a></p><blockquote><p>什么是事务？</p></blockquote><p>要么都成功，要么都失败</p><hr><blockquote><p>事务原则</p></blockquote><p><strong>ACID:</strong></p><p> 原子性(Atomicity):针对同一个事务 要么都成功 要么都失败</p><p>一致性(Consistency): 针对一个事务操作前操作后一致(两个账户转账操作前,两个账户一共钱一致)(操作后还是一样)</p><p> 隔离性(Isolation):多个sql同时操作一条数据互不影响</p><p>持久性(Durability):事务没有提交就恢复原状，提交了就持久化(一旦提交不可逆)</p><h3><span id="61-隔离级别隔离产生的问题">6.1、隔离级别(隔离产生的问题)</span></h3><p><strong>脏读</strong>:</p><p>​    指一个事务读取了另一个事务没有提交的数据</p><p><strong>不可重复读</strong>:</p><p>​    指是个事务内读取表中的某一行，多次读取结果不同(读过之后被其他事务修改了)</p><p><strong>幻读</strong>(虚读):</p><p>​    指在一个事务内读取到了别的事务插入的数据，导致前后不一致</p><h3><span id="62-执行事务">6.2、执行事务</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ==================== 事务 ===============</span><span class="token comment" spellcheck="true">-- mysql 是默认开启事务自动提交的</span><span class="token comment" spellcheck="true">/*set autocommit=0 -- 关闭SET autocommit=1 -- 开启 默认*/</span><span class="token comment" spellcheck="true">-- 手动处理事务</span><span class="token keyword">SET</span> autocommit<span class="token operator">=</span><span class="token number">0</span> <span class="token comment" spellcheck="true">-- 关闭自动提交</span><span class="token comment" spellcheck="true">-- 事务开启</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token comment" spellcheck="true">-- 标记一个事务的开启,从这个之后的sql都在同一个事务内</span><span class="token keyword">INSERT</span> xxx<span class="token keyword">INSERT</span> xxx<span class="token comment" spellcheck="true">-- 提交 持久化 (成功)</span><span class="token keyword">COMMIT</span><span class="token comment" spellcheck="true">-- 回滚 回到原来的样子 (失败)</span><span class="token keyword">ROLLBACK</span><span class="token comment" spellcheck="true">-- 事务结束</span><span class="token keyword">SET</span> autocommit<span class="token operator">=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">-- 开启自动提交</span><span class="token comment" spellcheck="true">-- 了解</span><span class="token keyword">SAVEPOINT</span> 保存点名 <span class="token comment" spellcheck="true">-- 设置一个事务的保存点</span><span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> <span class="token keyword">SAVEPOINT</span> 保存点名 <span class="token comment" spellcheck="true">-- 回滚到保存点</span><span class="token keyword">RELEASE</span> <span class="token keyword">SAVEPOINT</span> 保存点名 <span class="token comment" spellcheck="true">-- 插销保存点</span></code></pre><h4><span id="621-模拟">6.2.1、模拟</span></h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 一个一个执行</span><span class="token comment" spellcheck="true">-- 转账</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> shop <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>account<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>money<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account<span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>money<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 模拟转账</span><span class="token keyword">SET</span> autocommit<span class="token operator">=</span><span class="token number">0</span> <span class="token comment" spellcheck="true">-- 关闭自动提交</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token comment" spellcheck="true">-- 开启一个事务</span><span class="token comment" spellcheck="true">-- 一组事务</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token number">-500</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'A'</span> <span class="token comment" spellcheck="true">-- A-500</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">500</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'B'</span> <span class="token comment" spellcheck="true">-- B+500</span><span class="token keyword">COMMIT</span> <span class="token comment" spellcheck="true">-- 提交</span><span class="token keyword">ROLLBACK</span> <span class="token comment" spellcheck="true">-- 回滚</span><span class="token keyword">SET</span> autocommit<span class="token operator">=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">-- 恢复默认值</span></code></pre><h2><span id="7-索引">7、索引</span></h2><p>博客连接:<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p><blockquote><p>MySQL官方对索引的定义为：<strong>索引（Index）是帮助MySQL高效获取数据的数据结构</strong>。提取句子主干，就可以得到索引的本质：索引是数据结构。</p></blockquote><h3><span id="71-索引的分类">7.1、索引的分类</span></h3><ul><li><p>主键索引(primary key)</p><ul><li>唯一标识 不可重复 (只能有一列为主键)</li></ul></li><li><p>唯一索引 (unique key)</p><ul><li>避免重复的列出现,唯一索引可以重复，多个列都可以标识唯一索引 (就是这一列的列名不可一有两个及以上)</li></ul></li><li><p>常规索引 (key/index) </p><ul><li>默认,index或key设置</li></ul></li><li><p>全文索引 (FullText)</p><ul><li><p>在特定的数据库引擎下才有</p></li><li><p>快速定位数据</p></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 索引的使用</span><span class="token comment" spellcheck="true">-- 1 在创建表的时候给字段增加索引</span><span class="token comment" spellcheck="true">-- 2 创建完毕后 增加索引</span><span class="token comment" spellcheck="true">-- 显示所有索引信息</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> student<span class="token comment" spellcheck="true">-- 增加一个索引 索引名(列名)</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> school<span class="token punctuation">.</span>student <span class="token keyword">ADD</span> FULLTEXT <span class="token keyword">INDEX</span> studentname<span class="token punctuation">(</span>studentname<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- explain 分析sql执行的状况</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> STUDENT <span class="token comment" spellcheck="true">-- 非全文索引</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> STUDENT <span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span>studentname<span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span><span class="token string">'刘'</span><span class="token punctuation">)</span></code></pre><h3><span id="72-测试索引">7.2、测试索引</span></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 需要的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>app_user<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span><span class="token string">''</span> <span class="token keyword">COMMENT</span><span class="token string">'用户昵称'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'用户邮箱'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span><span class="token string">''</span> <span class="token keyword">COMMENT</span><span class="token string">'手机号'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gender<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> UNSIGNED <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span><span class="token keyword">COMMENT</span> <span class="token string">'性别（0：男;1:女）'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span><span class="token string">'0'</span>  <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'app用户表'</span><span class="token comment" spellcheck="true">-- 插入100万条数据</span><span class="token keyword">DELIMITER</span> $$ <span class="token comment" spellcheck="true">-- 写函数之前必须要写</span><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> mock_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">INT</span><span class="token keyword">BEGIN</span>   <span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1000000</span><span class="token punctuation">;</span>   <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span>num <span class="token keyword">DO</span>       <span class="token comment" spellcheck="true">-- 插入语句</span>       <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>app_user<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>email<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>phone<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">'用户'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'123@qq.com'</span><span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token string">'18'</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">999999999</span><span class="token operator">-</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>   <span class="token keyword">RETURN</span> i<span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> mock_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'用户99999'</span> <span class="token comment" spellcheck="true">-- 耗时0.087</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'用户99999'</span> <span class="token comment" spellcheck="true">-- 耗时0.070</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'用户99999'</span> <span class="token comment" spellcheck="true">-- 耗时0.073</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'用户99999'</span> <span class="token comment" spellcheck="true">-- rows 查了993537行</span><span class="token comment" spellcheck="true">-- id_表明_字段名</span><span class="token comment" spellcheck="true">-- 3 create index 索引名 on 表(字段名)</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> id_app_user_name <span class="token keyword">ON</span> APP_user<span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'用户99999'</span> <span class="token comment" spellcheck="true">-- rows 查了1行 直接定位</span></code></pre><p><img src="/2022/02/18/mysql/MySQL%5C%E6%B5%8B%E8%AF%95%E7%B4%A2%E5%BC%951.png"></p><p><img src="/2022/02/18/mysql/MySQL%5C%E6%B5%8B%E8%AF%95%E7%B4%A2%E5%BC%952.png"></p><blockquote><p>索引在小数据的时候,用处不大，但在大数据的时候区别十分明显</p></blockquote><h3><span id="73-索引原则">7.3、索引原则</span></h3><ul><li><p>索引不是越多越好</p></li><li><p>不要对经常变动的数据加索引</p></li><li><p>小数据量的表不需要加索引</p></li><li><p>索引一般加在常用来查询的字段上</p></li></ul><blockquote><p>索引的数据结构</p></blockquote><p>Hash: 类型的索引</p><p>Btree: innodb的默认数据结构</p><p>建议读完:<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p><h2><span id="8-权限管理和备份">8、权限管理和备份</span></h2><h3><span id="81-用户管理">8.1、用户管理</span></h3><blockquote><p>sql yog可视化管理</p></blockquote><p>![](MySQL\sql yog可视化管理.png)</p><blockquote><p>sql 命令操作</p></blockquote><p>用户表 mysql下的user</p><p>本质：对这张表进行增删改查</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建用户</span><span class="token comment" spellcheck="true">-- create user 用户名 identified 密码</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> kuangshen IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token comment" spellcheck="true">-- 修改密码(当前用户)</span><span class="token keyword">SET</span> PASSWORD<span class="token operator">=</span>PASSWORD<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 修改密码(指定用户)</span><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> kuangshen<span class="token operator">=</span>PASSWORD<span class="token punctuation">(</span><span class="token string">'111111'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 重命名</span><span class="token comment" spellcheck="true">-- name user 原名 to 新名</span><span class="token keyword">RENAME</span> <span class="token keyword">USER</span> kuangshen <span class="token keyword">TO</span> kuangshen2<span class="token comment" spellcheck="true">-- 用户授权</span><span class="token comment" spellcheck="true">-- grant all privileges on 库.表 to 用户名(all privileges全部权限,但和root比没有grant权限(给其他用户授权的权限))</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span>  <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> kuangshen2<span class="token comment" spellcheck="true">-- 查询权限</span><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> kuangshen2 <span class="token comment" spellcheck="true">-- 查看指定用户的权限</span><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> root<span class="token variable">@localhost</span> <span class="token comment" spellcheck="true">-- root</span><span class="token comment" spellcheck="true">-- 撤销权限</span><span class="token comment" spellcheck="true">-- revoke 哪些权限 库.表 谁</span><span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> kuangshen2<span class="token comment" spellcheck="true">-- 删除用户</span><span class="token keyword">DROP</span> <span class="token keyword">USER</span> kuangshen2</code></pre><h3><span id="82-mysql备份">8.2、MySQL备份</span></h3><p>为什么要备份:</p><ul><li>保证重要的数据不丢失</li><li>数据转移</li></ul><p>MsSQL数据库备份的方式</p><ul><li><p>直接拷贝物理文件</p></li><li><p>在sqlyog中可视化工具手动导出</p><ul><li><img src="/2022/02/18/mysql/MySQL%5Csql%E8%BD%AC%E5%82%A81.png"></li><li><img src="/2022/02/18/mysql/MySQL%5Csql%E8%BD%AC%E5%82%A82.png"></li></ul></li><li><p>使用命令行 mysqldump 命令行</p><ul><li><p><img src="/2022/02/18/mysql/MySQL%5C%E5%A4%87%E4%BB%BD%E5%91%BD%E4%BB%A4%E8%A1%8C.png"></p></li><li><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mysql -h 主机 -u 用户名 -p 密码 数据库 表明 > 物理磁盘/文件名</span>mysqldump -hlocalhost -uroot -p123456 school student <span class="token operator">></span>D:/a.sql<span class="token comment" spellcheck="true"># 多张表</span>mysqldump -hlocalhost -uroot -p123456 school student result <span class="token operator">></span>D:/b.sql<span class="token comment" spellcheck="true"># 数据库</span>mysqldump -hlocalhost -uroot -p123456 school <span class="token operator">></span>D:/c.sql</code></pre></li><li><p>导入</p></li><li><p><img src="/2022/02/18/mysql/MySQL%5C%E5%AF%BC%E5%85%A5.png"></p></li></ul></li></ul><h2><span id="9-规范数据库设计">9、规范数据库设计</span></h2><p>视频链接：<a href="https://www.bilibili.com/video/BV1NJ411J79W?p=35&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1NJ411J79W?p=35&amp;spm_id_from=pageDriver</a></p><h3><span id="91-为什么需要设计">9.1、为什么需要设计</span></h3><p><strong>当数据库比较复杂的时候,就需要设计</strong></p><p><strong>糟糕的数据库设计:</strong></p><ul><li>数据冗余,浪费空间</li><li>数据插入和删除都很麻烦，异常【屏蔽使用物理外键】</li><li>程序的性能差</li></ul><p><strong>良好的数据库设计:</strong></p><ul><li>节省内存空间</li><li>保证数据的完整性</li><li>方便我们开发系统</li></ul><p><strong>软件开发中，关于数据库的设计</strong></p><ul><li>分析需求：分析业务和需要处理的数据库的需求</li><li>概要设计：设计关系图E-R图</li></ul><p><strong>设计数据库的步骤:(个人博客)</strong></p><ul><li>收集信息，分析需求<ul><li>用户表 (用户登录注销,用户的个人信息,写博客,创建分类)</li><li>分类表 (文章分类,谁创建的)</li><li>文章表 (文章的信息)</li><li>评论表</li><li>友链接 (友链接信息)</li><li>自定义表 (系统信息,某个关键的子,或者一些主字段) key:value</li></ul></li><li>标识实体(把需求落地到每个字段)</li><li>标识实体之间的关系<ul><li>写博客：user –&gt;blog</li><li>创建分类：user –&gt;category</li><li>关注： user–&gt; user</li><li>友链： links</li><li>评论： user-user-blog</li></ul></li></ul><h3><span id="92-三大范式">9.2、三大范式</span></h3><p><strong>为什么需要数据规范化?</strong></p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li><li>删除异常<ul><li>丢失有效信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p><a href="https://www.cnblogs.com/wsg25/p/9615100.html">三大范式博客链接</a></p><p><strong>第一范式(1NF)</strong></p><p>原子性:保证每一列不可再分</p><p><strong>第二范式(2NF)</strong></p><p>前提:满足第一范式</p><p>每张表只描述一件事情</p><p><strong>第三范式(3NF)</strong></p><p>前提:满足第二范式</p><p>确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关</p><p>(规范数据库的设计)</p><p><strong>规范和性能问题</strong></p><p>关联查询的表不得超过三张</p><ul><li>考虑商业化的需求和目标(成本,用户体验)</li><li>在 规范性能 的问题的时候，需要适当考虑一下 规范性</li><li>故意给某些表增加一些冗余的字段 (从多表查询中变为单表查询)</li><li>故意增加一些计算列 (从大数据量降低为小数据量查询:索引)</li></ul><h2><span id="10-jdbc重点">10、JDBC(重点)</span></h2><h3><span id="101-数据库驱动">10.1、数据库驱动</span></h3><p><img src="/2022/02/18/mysql/MySQL%5C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8.png"></p><hr><p>我们的程序会通过数据库驱动，和数据库打交道！</p><h3><span id="102-jdbc">10.2、JDBC</span></h3><p>SUN公司为了简化开发人员的(对数据库的统一)操作，提供了一个(Java操作数据库的)规范，俗称jdbc</p><p>这些规范的实现由具体的厂商去做~</p><p>对于开发人员来说，我们只需要掌握JDBC接口的操作即可！</p><p><img src="/2022/02/18/mysql/MySQL%5Cjdbc.png"></p><hr><p>java.sql</p><p>javax.sql</p><p>还需要导入一个数据库驱动包mysql-connector-java-5.1.38.jar</p><h3><span id="103-第一个jdbc程序">10.3、第一个jdbc程序</span></h3><p>以下代码的目录结构</p><p><img src="/2022/02/18/mysql/MySQL%5C%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png"></p><p>需要的数据库</p><pre class=" language-SQL"><code class="language-SQL">CREATE DATABASE jdbcStudy CHARACTER SET utf8 COLLATE utf8_general_ci;USE jdbcStudy;CREATE TABLE `users`(    id INT PRIMARY KEY,    NAME VARCHAR(40),    PASSWORD VARCHAR(40),    email VARCHAR(60),    birthday DATE);INSERT INTO `users`(id,NAME,PASSWORD,email,birthday)VALUES(1,'zhansan','123456','zs@sina.com','1980-12-04'),(2,'lisi','123456','lisi@sina.com','1981-12-04'),(3,'wangwu','123456','wangwu@sina.com','1979-12-04')</code></pre><ol><li><p>创建一个普通项目</p></li><li><p>导入数据驱动</p><p><img src="/2022/02/18/mysql/MySQL%5C%E6%B5%8B%E8%AF%95jdbc1.png"></p></li><li><p>编写测试代码</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson01<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 我的第一个JDBC程序</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcFirstDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 加载驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//固定写法</span>        <span class="token comment" spellcheck="true">//2 用户信息和url</span>        String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8"</span><span class="token punctuation">;</span>        String username<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>        String password<span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3 连接成功，数据库对象 Connection 代表数据库</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4 执行sql的对象</span>        Statement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5 执行sql的对象，去执行sql</span>        String sql<span class="token operator">=</span><span class="token string">"SELECT * FROM users"</span><span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"id="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"pwd="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"PASSWORD"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"email="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"birthday="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//6 断开连接</span>        resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="code%5CJDBC%5Csrc%5Ccom%5Ckuang%5Clesson01">代码详见：</a></p><p>步骤总结:</p><ol><li>加载驱动</li><li>连接数据库 DriverManager</li><li>获得执行sql的对象 Statement</li><li>获得返回的结果集</li><li>释放连接</li></ol><blockquote><p>DirverManager</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加载驱动</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//固定写法</span>Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// connection 代表数据库</span><span class="token comment" spellcheck="true">// 数据库设置自动提交</span><span class="token comment" spellcheck="true">// 事务提交</span><span class="token comment" spellcheck="true">// 事务回滚</span>connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span>rollback<span class="token punctuation">;</span></code></pre><blockquote><p>URL</p></blockquote><pre class=" language-JAVA"><code class="language-JAVA">String url="jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&characterEncoding=utf8";/*mysql -- 3306jdbc:mysql://localhost:端口号/数据库?参数1&参数2oracle -- 1521jdbc:oracle:thin:@localhost:1521:sid*/</code></pre><blockquote><p>Statement 执行sql的对象 PrepareStatement执行sql对象</p></blockquote><pre class=" language-java"><code class="language-java">statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询操作返回ResultSet</span>statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行任何sql</span>statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新 插入 删除 返回受影响的行数 </span></code></pre><blockquote><p>ResultSet 查询的结果集: 封装了所有的查询结果</p></blockquote><p>获得指定的数据类型</p><pre class=" language-java"><code class="language-java">resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resultSet<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resultSet<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>遍历，指针</p><pre class=" language-java"><code class="language-java">resultSet<span class="token punctuation">.</span><span class="token function">beforeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//移动到最前面</span>resultSet<span class="token punctuation">.</span><span class="token function">afterFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//移动到最后面</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//移动下一个</span>resultSet<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//移动前一行</span>resultSet<span class="token punctuation">.</span><span class="token function">absoulte</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//移动指定行</span></code></pre><blockquote><p>释放资源</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//释放连接</span>resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3><span id="104-statement对象">10.4、statement对象</span></h3><p><strong>Jdbc中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。</strong><br>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的sql语句，executeUpdate执行完后，将会返回一个整数(即增删改语句导致了数据库几行数据发生了变化)。<br>Statement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p><blockquote><p>CRUD操作-create</p></blockquote><p>使用executeUpdate(String sql)方法完成数据添加操作</p><pre class=" language-java"><code class="language-java">Statement st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql<span class="token operator">=</span><span class="token string">"insert into users(...)values(...)"</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>CRUD操作-delete</p></blockquote><pre class=" language-java"><code class="language-java">Statement st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql<span class="token operator">=</span><span class="token string">"delete from users where id=1"</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>CRUD操作-update</p></blockquote><pre class=" language-java"><code class="language-java">Statement st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql<span class="token operator">=</span><span class="token string">"update users set name="</span>xx" where id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新成功!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>CRUD操作-select</p></blockquote><pre class=" language-java"><code class="language-java">Statement st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql<span class="token operator">=</span>"select <span class="token operator">*</span> FROM users<span class="token punctuation">;</span>ResultSet rs<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    。。。<span class="token punctuation">}</span></code></pre><blockquote><p>代码实现</p></blockquote><ol><li>提取工具类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driver<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String username<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String password<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream in <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 加载驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取连接</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放连接</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span> Statement st<span class="token punctuation">,</span> ResultSet rs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.增</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInsert</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn<span class="token operator">=</span>null<span class="token punctuation">;</span>        Statement st<span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet rs<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>             conn <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             st<span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             String sql<span class="token operator">=</span><span class="token string">"insert into users(id,`Name`,`PASSWORD`,email,birthday)values(4,'kuangshen','123456','123@qq.com','2021-8-9')"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.删</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDelete</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn<span class="token operator">=</span>null<span class="token punctuation">;</span>        Statement st<span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet rs<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql<span class="token operator">=</span><span class="token string">"DELETE FROM users WHERE id=4"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.改</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUpdate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn<span class="token operator">=</span>null<span class="token punctuation">;</span>        Statement st<span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet rs<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql<span class="token operator">=</span><span class="token string">"UPDATE users SET NAME='KUANGSHEN2' WHERE id=4"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.查</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSelect</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn<span class="token operator">=</span>null<span class="token punctuation">;</span>        Statement st<span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet rs<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn<span class="token operator">=</span>JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            SQL</span>            String sql<span class="token operator">=</span><span class="token string">"select * FROM USERS"</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\tname:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\tpassword:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"PASSWORD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\temail:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\tbirthday:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="code%5CJDBC%5Csrc%5Ccom%5Ckuang%5Clesson02">代码详见</a></p><blockquote><h6><span id="sql注入">sql注入</span></h6></blockquote><p>sql存在漏洞，会被攻击导致数据泄露</p><h3><span id="105-preparedsatement对象">10.5、PreparedSatement对象</span></h3><p>PreparedSatement可以防止sql注入，并且效率更高</p><ol><li> 增</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson03<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInsert</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn<span class="token operator">=</span>null<span class="token punctuation">;</span>        PreparedStatement st<span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet rs<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//区别</span>            String sql<span class="token operator">=</span><span class="token string">"insert into users(id,`Name`,`PASSWORD`,email,birthday)values(?,?,?,?,?)"</span><span class="token punctuation">;</span>            st<span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//预编译</span>            <span class="token comment" spellcheck="true">//手动给参数赋值</span>            st<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"lpc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"123@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            执行</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li> 删</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson03<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDelete</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn<span class="token operator">=</span>null<span class="token punctuation">;</span>        PreparedStatement st<span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet rs<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//区别</span>            String sql<span class="token operator">=</span><span class="token string">"delete from users where id=?"</span><span class="token punctuation">;</span>            st<span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//预编译</span>            <span class="token comment" spellcheck="true">//手动给参数赋值</span>            st<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            执行</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li> 改</li></ol><pre class=" language-JAVA"><code class="language-JAVA">package com.kuang.lesson03;import com.kuang.lesson02.utils.JdbcUtils;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class TestUpdate {    public static void main(String[] args) {        Connection conn=null;        PreparedStatement st=null;        ResultSet rs=null;        try {            conn = JdbcUtils.getConnection();            //区别            String sql="update users set name=?,password=? where id=?";            st= conn.prepareStatement(sql);//预编译            //手动给参数赋值            st.setString(1,"lpc");            st.setString(2,"lpc");            st.setInt(3,4);//            执行            int i = st.executeUpdate();            if (i>0){                System.out.println("更新成功");            }        } catch (SQLException throwables) {            throwables.printStackTrace();        }finally {            JdbcUtils.release(conn,st,rs);        }    }}</code></pre><ol start="4"><li> 查</li></ol><pre class=" language-JAVA"><code class="language-JAVA">package com.kuang.lesson03;import com.kuang.lesson02.utils.JdbcUtils;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;public class TestSelect {    public static void main(String[] args) {        Connection conn = null;        PreparedStatement st = null;        ResultSet rs = null;        try {            conn= JdbcUtils.getConnection();            String sql="select * from users where id=?";            st=conn.prepareStatement(sql);            st.setInt(1,4);//            执行            rs = st.executeQuery();            if (rs.next()){                System.out.println(rs.getString("Name"));            }        } catch (Exception e) {        }finally{            JdbcUtils.release(conn,st,rs);        }    }}</code></pre><blockquote><p>PreparedStatement防止sql注入的本质就是:把传递进来的数据当作字符串</p></blockquote><p>   <a href="code%5CJDBC%5Csrc%5Ccom%5Ckuang%5Clesson03">代码详见</a></p><h3><span id="106-使用idea连接数据库">10.6、使用IDEA连接数据库</span></h3><p><img src="/2022/02/18/mysql/MySQL%5CIDEA%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%931.png"></p><p><img src="/2022/02/18/mysql/MySQL%5CIDEA%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%932.png"></p><p><img src="/2022/02/18/mysql/MySQL%5CIDEA%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%933.png"></p><p><img src="/2022/02/18/mysql/MySQL%5CIDEA%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%934.png"></p><hr><p>用idea插入表</p><pre class=" language-SQL"><code class="language-SQL">/*创建账户*/CREATE TABLE account(    id    Int PRIMARY KEY AUTO_INCREMENT,    NAME  VARCHAR(40),    money FLOAT);/*插入测试数据*/insert into account(name, money)values ('A', 1000);insert into account(name, money)values ('B', 1000);insert into account(name, money)values ('C', 1000);</code></pre><h3><span id="107-事务">10.7、事务</span></h3><p><strong>要么成功要么失败</strong></p><blockquote><p>ACID原则</p></blockquote><p>原子性:要么全部都完成，要么都不完成</p><p>一致性:总数不变</p><p><strong>隔离性:多个进程互不干扰</strong></p><p>持久性:一旦提交不可逆，持久化到了数据库</p><p>隔离性的问题：</p><p>脏读：一个事务读取到了另一个没有提交的事务的数据</p><p>不可重复读：同一个事务内,重复读取表中的一行数据，数据发生了改变</p><p>幻读：一个事务内，读取到了别人插入的数据，导致读取的数据不一致</p><blockquote><p>代码实现</p></blockquote><ol><li>开启事务 <strong>conn.setAutoCommit(false);</strong></li><li>一组业务执行完毕，提交事务</li><li>可以在catch语句中定义回滚，但默认失败就会回滚</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson04<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTransaction1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement st <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn<span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            关闭数据库自动提交就会开启事务</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql1<span class="token operator">=</span><span class="token string">"update account set money=money-100 where name='A'"</span><span class="token punctuation">;</span>            st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//          模拟失败</span><span class="token comment" spellcheck="true">//            int x=1/0;</span>            String sql2<span class="token operator">=</span><span class="token string">"update account set money=money+100 where name='B'"</span><span class="token punctuation">;</span>            st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            业务完毕提交事务</span>            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            try {</span><span class="token comment" spellcheck="true">//                conn.rollback();//失败就回滚</span><span class="token comment" spellcheck="true">//            } catch (SQLException throwables) {</span><span class="token comment" spellcheck="true">//                throwables.printStackTrace();</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            失败默认回滚</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="code%5CJDBC%5Csrc%5Ccom%5Ckuang%5Clesson04">代码详见</a></p><h3><span id="109-数据库连接池">10.9、数据库连接池</span></h3><p>数据库连接–执行完毕–释放 </p><p>连接–释放 </p><p>十分浪费系统资源</p><p><strong>池化技术: 准备一些预先的资源，过来就连预先准备好的</strong></p><p>最小连接数:10</p><p>最大连接数：15 业务最高承载上限</p><p>等待超时</p><p>编写连接池，实现一个接口 DataSource</p><blockquote><p>开放数据源实现</p></blockquote><p>DBCP</p><p>C3P0</p><p>Druid:阿里巴巴</p><p>使用了这些数据库连接池后，我们在项目开发中就不需要写连接数据库的代码了！</p><blockquote><p>DBCP</p></blockquote><p>需要用到的jar包</p><p>commons-dbcp-1.4.jar</p><p>commons-pool-1.5.4.jar</p><p>dbcpconfig.properties配置文件:</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#连接设置</span><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token comment" spellcheck="true">#!-- 初始化连接 --</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment" spellcheck="true">#最大连接数量</span><span class="token attr-name">maxActive</span><span class="token punctuation">=</span><span class="token attr-value">50</span><span class="token comment" spellcheck="true">#!-- 最大空闲连接 --</span><span class="token attr-name">maxIdle</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment" spellcheck="true">#!-- 最小空闲连接 --</span><span class="token attr-name">minIdle</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token comment" spellcheck="true">#!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --</span><span class="token attr-name">maxWait</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token comment" spellcheck="true">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名=property;】</span><span class="token comment" spellcheck="true">#注意：user 与 password 两个属性会被明确地传递，因此这里不需要包含他们。</span><span class="token attr-name">connectionProperties</span><span class="token punctuation">=</span><span class="token attr-value">useUnicode=true;characterEncoding=UTF8</span><span class="token comment" spellcheck="true">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span><span class="token attr-name">defaultAutoCommit</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span><span class="token comment" spellcheck="true">#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span><span class="token attr-name">defaultReadOnly</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span><span class="token comment" spellcheck="true">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span><span class="token attr-name">defaultTransactionIsolation</span><span class="token punctuation">=</span><span class="token attr-value">READ_UNCOMMITTED</span></code></pre><p>utils</p><pre class=" language-JAVA"><code class="language-JAVA">package com.kuang.lesson05.utils;import org.apache.commons.dbcp.BasicDataSource;import org.apache.commons.dbcp.BasicDataSourceFactory;import javax.sql.DataSource;import java.io.InputStream;import java.sql.*;import java.util.Properties;public class JdbcUtils_dbcp {    private static DataSource dataSource=null;    static{        try {            InputStream in = JdbcUtils_dbcp.class.getClassLoader().getResourceAsStream("dbcpconfig.properties");            Properties properties = new Properties();            properties.load(in);//          创建数据源   工厂模式-->创建            dataSource = BasicDataSourceFactory.createDataSource(properties);        } catch (Exception e) {        }    }    //获取连接    public static Connection getConnection() throws SQLException {        return dataSource.getConnection();//从数据源中获取连接    }    //释放连接    public static void release(Connection conn, Statement st, ResultSet rs){        if (rs!=null){            try {                rs.close();            } catch (SQLException throwables) {                throwables.printStackTrace();            }        }        if (st!=null){            try {                st.close();            } catch (SQLException throwables) {                throwables.printStackTrace();            }        }        if (conn!=null){            try {                conn.close();            } catch (SQLException throwables) {                throwables.printStackTrace();            }        }    }}</code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson05<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson05<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils_dbcp<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInsert</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn<span class="token operator">=</span>null<span class="token punctuation">;</span>        PreparedStatement st<span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet rs<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> JdbcUtils_dbcp<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//区别</span>            String sql<span class="token operator">=</span><span class="token string">"insert into users(id,`Name`,`PASSWORD`,email,birthday)values(?,?,?,?,?)"</span><span class="token punctuation">;</span>            st<span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//预编译</span>            <span class="token comment" spellcheck="true">//手动给参数赋值</span>            st<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"lpc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"123@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            执行</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils_dbcp<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>C3P0</p></blockquote><p>c3p0-0.9.1.2.jar   mchange-commons-java-0.2.19.jar</p><blockquote><p>结论</p></blockquote><p>无论使用什么样的数据源，本质还是一样的，DataSource接口是不变的，方法就不会变。</p><p>Druid</p><p>Apache</p><img src="/2022/02/18/mysql/将要学的.png"><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试问题汇总</title>
      <link href="/2022/02/18/mian-shi-wen-ti-hui-zong/"/>
      <url>/2022/02/18/mian-shi-wen-ti-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1><span id="为什么要调用equals要重写hashcode方法">为什么要调用equals要重写hashcode方法</span></h1><p><strong>需要保证对象调用equals方法为true时,hashcode必须相同.</strong></p><h1><span id="java基础">Java基础</span></h1><h2><span id="和equals区别">==和equals区别</span></h2><ul><li>如果是基本数据类型，比较是值，如果是引用类型，比较的是引用地址</li><li>具体看各个类重写equals方法之后的比较逻辑，比如String类，虽然是引用类型，但是String类中重写了equals方法，方法内部比较的是字符串中的各个字符是否全部相等。</li></ul><h2><span id="string-stringbuffer-stringbuilder">String、StringBuffer、StringBuilder</span></h2><p>String是final修饰的，不可变，每次操作都会产生新的String对象<br>StringBuffer和StringBuilder都是在原对象上操作<br>StringBuffer是线程安全的，StringBuilder线程不安全的<br>StringBuffer方法都是synchronized修饰的<br>性能：StringBuilder &gt; StringBuffer &gt; String<br>场景：经常需要改变字符串内容时使用后面两个<br>优先使用StringBuilder，多线程使用共享变量时使用StringBuffer</p><pre class=" language-JAVA"><code class="language-JAVA">//16容量 默认//有参构造，字符长度+16int newCapacity = (value.length << 1) + 2;//默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。</code></pre><h1><span id="集合">集合</span></h1><p>List特点：有序，可重复，它的子类也有这个特点</p><h2><span id="arraylist原理">ArrayList原理</span></h2><p>特点：查询快，增删慢</p><p><strong>底层</strong>：数组</p><p>创建对象的时候</p><p>jdk1.7:默认长度为10的数组</p><p>​           扩容：数据超过10的时候扩容，扩容为(原始长度+原始长度<em>0.5)[扩容为原先的*<em>1.5倍</em></em>]</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认容量</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// overflow-conscious code</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//右移一位等于/2，然后加上原来的长度，最后等于扩容为原来的1.5倍</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>jdk1.8:默认只创建对象，没有大小</p><p>​           扩容：第一次添加数据，才开辟10个长度，扩容与jdk1.7一致</p><h2><span id="linkedlist原理">LinkedList原理</span></h2><p>特点：查询慢，增删快</p><pre class=" language-JAVA"><code class="language-JAVA">private static class Node<e> {    E item;    Node<e> next;    Node<e> prev;    //头节点的上一个节点是null    //尾节点的下一个也是null    Node(Node<e> prev, E element, Node<e> next) {        this.item = element;        this.next = next;        this.prev = prev;    }}</e></e></e></e></e></code></pre><p>底层：双向链表,内部为一个node类型【前一个数据，自己的数据，下一个数据】</p><h2><span id="vector">Vector</span></h2><p>Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是线程安全的。</p><p>一开始就创建10的数组</p><p>扩容方面：2倍</p><pre class=" language-JAVA"><code class="language-JAVA">//一开始就创建10长度的数组public Vector() {        this(10);    }//capacityIncrement是个0，最后是oldCapacity+oldCapacity,扩容为原来的2倍int newCapacity = oldCapacity + ((capacityIncrement > 0) ?                                         capacityIncrement : oldCapacity);</code></pre><h2><span id="hashset原理">HashSet原理</span></h2><p>特点：无序，不重复</p><p>底层：用的是hashmap的key,然后value用的是[一个]Object,不是添加一个数据，value就新建一个Object</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//就一个Object对象</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2><span id="linkedhashset原理">LinkedHashSet原理</span></h2><p>添加的数据封装成一个链表，实现添加时的顺序，但还是无序，因为在数组中存储的位置不是连续的。</p><h2><span id="treeset原理">TreeSet原理</span></h2><p>底层红黑树</p><p>可以排序，要求添加的对象要实现Comparable或者set构造方法中加入Comparator接口的实现类参数，然后存储的顺序就是按照，你实现的Comparable或者Comparator接口中重写的方法排序。</p><ul><li>添加的对象实现Comparable接口</li><li>set构造方法中加入Comparator接口的实现类</li></ul><h2><span id="hashmap原理">Hashmap原理</span></h2><p>特点：无序，key不重复，双列k-v</p><blockquote><p>jdk7</p></blockquote><p>没有红黑数，创建对象直接开辟16长度数组，添加的时候使用头插法。(七上八下)</p><blockquote><p>jdk8</p></blockquote><p>底层：数组+单项链表【红黑树】</p><p>创建对象后不会占用内存{},第一次添加会开辟一个长度为16的数组，加载因子为0.75,临界值是长度*加载因子。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1左移4位 16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//加载因子</span></code></pre><p>添加：</p><p>调用添加对象的hashcode方法，然后做一个计算，计算出在数组存储的位置，然后去这个位置看看，如果没有数据则直接添加成功，如果有则一一向下和已经存储的数据比较hashcode值，如果比较到最后没有一个一样的就放在链表最后(尾插法)，如果hashcode值一样则equals比较，equals不一样则继续向下比较，如果equals一样则说明这两个数据确实一样，这个时候则把value替换掉。</p><p>数据越多hash冲突越多，造成这个位置上的链表数据越多，所以有加载因子和临界值。</p><p>扩容：</p><p>数据超过临界值，则扩容为2倍，再判断每个索引下的链表是否超过8并且数组长度是否超过64，没有如果超过了，则把链表节点超过8的改为红黑树存储,小于6转换回链表。</p><h2><span id="linkedhashmap原理">LinkedHashMap原理</span></h2><p>在hashmap的基础上加入双向链表，添加的时候记录顺序，实则还是无序，存储的位置不是连续的，通过存入的数据(封装成双向链表存储)记录顺序。</p><h2><span id="treemap原理">TreeMap原理</span></h2><p>按照key排序，要求key是同一个类型的对象，实现自然排序Comparable接口。然后就按照key重写的方法compareTo排序。</p><p>或者</p><p>创建TreeMap对象时放入Comparator接口的实现类，使用定制排序，按照实现类重写Comparator接口的compare方法排序</p><h1><span id="io">IO</span></h1><h2><span id="分类">分类：</span></h2><p>字节流 字符流</p><p>输入流 输出流</p><p>节点流(最里面的流) 处理流(外面的流:缓冲流…)</p><p><img src="/2022/02/18/mian-shi-wen-ti-hui-zong/image-20220205180621382.png" alt="image-20220205180621382"></p><h1><span id="spring">spring</span></h1><h2><span id="resource和autowired有什么区别">@Resource和@Autowired有什么区别？</span></h2><ul><li>@Autowired 根据类型注入</li><li>@Resource 默认根据名字注入，其次按照类型搜索</li><li>@Autowired @Qualifie(“userService”) 两个结合起来可以根据名字和类型注入，等同于@Resource</li></ul><p>[@Qualifier(指定一个id的bean注入)]</p><p>总结如下：</p><ul><li>@Autowired默认按byType自动装配，而@Resource默认byName自动装配。</li><li>@Autowired只包含一个参数：required，表示是否开启自动注入，默认是true。而@Resource包含七个参数，其中最重要的两个参数是：name 和 type。</li><li>@Autowired如果要使用byName，需要使用@Qualifier一起配合。而@Resource如果指定了name，则用byName自动装配，如果指定了type，则用byType自动装配。</li><li>@Autowired能够用在：构造器、方法、参数、成员变量和注解上，而@Resource能用在：类、成员变量和方法上。</li><li>@Autowired是spring定义的注解，而@Resource是JSR-250定义的注解。</li></ul><h2><span id="容器加载流程">容器加载流程</span></h2><p>加载 解析 增强 实例化 初始化 使用 销毁  (细节不再赘述)</p><p><img src="/2022/02/18/mian-shi-wen-ti-hui-zong/image-20220127132113628.png" alt="image-20220127132113628"></p><h2><span id="bean生命周期">bean生命周期</span></h2><p>1.通过构造方法创建bean实例（无参构造）；</p><p>2.为bean的属性设置值和对其它bean引用（调用set方法）；</p><p>3.把bean实例传递bean后置处理器的方法postProcessBeforeInitialization；</p><p>4.调用bean的初始化方法（需要进行配置初始化的方法）；</p><p>5.把bean实例传递bean后置处理的方法postProcessAfterInitialization；</p><p>6.bean可以使用了（对象获取到了）；</p><p>7.当容器关闭的时候，调用bean的销毁的方法（需要进行配置销毁的方法）。</p><h2><span id="springbean的作用域">springBean的作用域</span></h2><ol><li>singleton</li><li>prototype</li><li>request</li><li>session</li><li>applicatin</li><li>websocket</li></ol><h2><span id="循环依赖">循环依赖</span></h2><p>问题：两个bean，他们里面的属性依赖了对方，导致他们的对象不能创建。</p><p>使用三级缓存解决，前提：不能使用构造器注入属性</p><p>三级缓存干了什么事：完成了一件代理对象替换非代理对象的工作，确保返回的是唯一的对象。</p><p>三级缓存是为了解决在aop代理中产生的循环依赖问题</p><h2><span id="spring事务是么时候会失效">spring事务是么时候会失效</span></h2><p>spring事务的原理是aop，进行了切面增强，那么失效的根本原因是这个aop不起作用了，常见情况</p><ol><li><p><strong>发生自调用</strong></p><p>调本类的方法用的是this，不是代理对象，解决办法让代理类替换掉this即可，this变成userService。</p></li><li><p><strong>方法不是public</strong></p><p>@Transactional只能用于public方法上，如果非要用在非public的方法上，可以开启AspectJ代理模式</p></li><li><p><strong>数据库不支持事务</strong></p></li><li><p><strong>使用三级缓存解决</strong></p></li><li><p><strong>异常被吃掉</strong></p></li></ol><h2><span id="spring如何处理事务">spring如何处理事务</span></h2><ol><li><p>编程式事务</p><p>使用TransactionTemplate</p></li><li><p>声明式事务</p><p>@Transactional注解，只能作用于方法</p></li></ol><h2><span id="spring事务传播机制">spring事务传播机制</span></h2><ol><li>REQUIRED(Spring默认的事务传播类型)：如果当前没有事务，则自己新建一个事务，如果当前存在事务，则加入这个事务</li><li>SUPPORTS：当前存在事务，则加入当前事务，如果当前没有事务，就以非事务方法执行</li><li>MANDATORY：当前存在事务，则加入当前事务，如果当前事务不存在，则抛出异常。</li><li>REQUIRES_NEW：创建一个新事务，如果存在当前事务，则挂起该事务。</li><li>NOT_SUPPORTED：以非事务方式执行,如果当前存在事务，则挂起当前事务</li><li>NEVER：不使用事务，如果当前事务存在，则抛出异常</li><li>NESTED：如果当前事务存在，则在嵌套事务中执行，否则REQUIRED的操作一样（开启一个事务）</li></ol><h2><span id="spring事务隔离级别">spring事务隔离级别</span></h2><p>spring事务隔离级别就是数据库的隔离级别：外加一个默认级别<br>read uncommitted(未提交读)<br>read committed（提交读、不可重复读）<br>repeatable read (可重复读)<br>serializable (可串行化)</p><pre class=" language-tex"><code class="language-tex">数据库的配置隔离级别是Read Commited,而Spring配置的隔离级别是Repeatable Read，时隔离级别听一个为准？以Spring配置的为准，如果spring设置的隔离级别数据库不支持，效果取决于数据库</code></pre><h1><span id="mybatis">Mybatis</span></h1><h2><span id="mybatis存在哪些优点和缺点">Mybatis存在哪些优点和缺点</span></h2><p><strong>优点:</strong><br>  1.基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL单独写，解除 sql 与程序代码的耦合，便于统一管理。</p><ol start="2"><li>与 JDBC 相比，减少了 50%以上的代码量，消除了 JDBC 大量冗余的代码，不需要手动开关连接;</li><li>很好的与各种数据库兼容（因为 MyBatis 使用 JDBC 来连接数据库，所以只要JDBC 支持的数据库MyBatis 都支持）。</li><li>能够与 Spring 很好的集成;</li><li>提供映射标签， 支持对象与数据库的 ORM 字段关系映射; 提供对象关系映射标签， 支持对象关系组件维护。</li></ol><p><strong>缺点:</strong></p><p>SQL 语句的编写工作量较大， 尤其当字段多、关联表多时， 对开发人员编写SQL 语句的功底有一定要求。</p><p>SQL 语句依赖于数据库， 导致数据库移植性差， 不能随意更换数据库</p><h1><span id="多线程">多线程</span></h1><h2><span id="并发的三大特性">并发的三大特性</span></h2><ul><li>原子性</li><li>有序性</li><li>可见性</li></ul><h2><span id="对volatile-的理解">对Volatile 的理解</span></h2><p>Volatile 是 Java 虚拟机提供 轻量级的同步机制</p><p>1、保证可见性<br><strong>2、不保证原子性</strong><br>3、禁止指令重排</p><h2><span id="锁">锁</span></h2><h3><span id="synchronized和lock锁的区别"><strong>synchronized和Lock锁的区别</strong></span></h3><p><strong>synchronized:</strong></p><ul><li>是java内置的关键字</li><li>无法获取锁的状态</li><li>会自动释放锁</li><li>线程一在获得锁的情况下阻塞了，第二个线程就只能傻傻的等着</li><li>是不可中断的、非公平的、<strong>可重入锁</strong></li><li>适合锁少量的同步代码</li><li>有代码块锁和方法锁</li></ul><p><strong>Lock:</strong></p><ul><li>是java的一个类</li><li>可判断是否获取了锁</li><li>需手动释放锁，如果不释放会造成死锁</li><li>线程一在获得锁的情况下阻塞了，可以使用tryLock()尝试获取锁</li><li>默认是非公平的、可判断的、<strong>可重入锁</strong></li><li>适合锁大量的同步代码</li><li>只有代码块锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（拥有更多的子类）</li></ul><h2><span id="不安全的集合">不安全的集合</span></h2><p>juc包下：</p><p>CopyonWriteArrayList：解决arraylist不安全</p><p>CopyonWriteArraySet:解决hashset不安全</p><p>ConcurrentHashMap:解决hashmap不安全</p><h2><span id="线程的状态和生命周期">线程的状态和生命周期</span></h2><p>状态：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>    NEW<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//创建</span>    RUNNABLE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//运行</span>    BLOCKED<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//阻塞</span>    WAITING<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//等待</span>    TIMED_WAITING<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时等待</span>    TERMINATED<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止</span><span class="token punctuation">}</span></code></pre><p>生命周期：创建，就绪，运行，阻塞，死亡</p><p>等待分为：</p><ul><li>等待阻塞：wait方法</li><li>同步阻塞:  没有抢到锁</li><li>其他阻塞:  sleep，join方法或者thread设置状态</li></ul><h2><span id="sleep-wait-join-yield区别">sleep()、wait()、join()、yield()区别</span></h2><p><strong>锁池</strong>：没有竞争到锁的池子</p><p><strong>等待池</strong>：wait方法,不会再去竞争锁，只有notify才回让其中一个线程去竞争，notifyAll将所有等待池种的线程放到锁池</p><ol><li>sleep是Thread种的静态方法，wait是object中的</li><li>sleep不会释放锁，wait会，而且放到等待池</li><li>sleep不依赖同步器synchronized，但wait依赖synchronized</li><li>sleep不需要被唤醒，wait需要</li><li>sleep是用于线程停止，休眠操作，wait用于线程之间的通讯</li><li>sleep会让出cpu执行时间强制上下文切换，wait后可能还是有机会竞争到锁重新执行</li></ol><p>yield让线程进入就绪状态，让出cpu执行权</p><p>join插入，哪个线程调就执行那个线程</p><h2><span id="线程池">线程池</span></h2><p>降低资源消耗，提高线程利用率</p><h3><span id="七大参数">七大参数:</span></h3><ul><li>核心线程数，最大线程数，超时时间，超时单位，阻塞队列，线程工厂，拒绝策略</li></ul><pre class=" language-TEL"><code class="language-TEL">创建线程池，核心线程跟着创建任务进来，看核心线程是否已满，未满直接执行，已满，去队列，队列未满放入队列等待执行，队列也满了，去看看最大线程数，没有达到最大线程数，创建一个线程执行，最大线程数也满了就执行拒绝策略</code></pre><h3><span id="4大拒绝策略">4大拒绝策略:</span></h3><ul><li>丢弃策略（DiscardPolicy ）直接丢弃</li><li>中止策略（AbortPolicy ）抛异常</li><li>优先处理策略（CallerRunsPolicy ）让它原先的线程执行</li><li>丢弃最老任务（DiscardOldestPolicy ）队列中最老的丢弃，然后添加。</li></ul><h2><span id="线程池中阻塞队列的作用为什么是先添加列队而不是先创建最大线程">线程池中阻塞队列的作用？为什么是先添加列队而不是先创建最大线程？</span></h2><ul><li>核心线程数已满，保存新添加线程</li><li>使阻塞队列中的线程进入wait状态，释放cpu资源。(阻塞队列自带阻塞和唤醒的功能，不需要额外处理，无任务执行时,线程池利用阻塞队列的take方法挂起，从而维持核心线程的存活、不至于一直占用cpu资源)</li><li>在创建新线程的时候，是要获取全局锁的，这个时候其它的就得阻塞，影响了整体效率。</li></ul><h1><span id="数据库">数据库</span></h1><h2><span id="acid靠什么实现">ACID靠什么实现</span></h2><ol><li>原子性由<strong>undolog</strong>日志来保证，它记录了需要回滚的日志信息，事务回滚时撤销已经执行成功的sqI</li><li>一致性是由其他三大特性保证，程序代码要保证业务上的一致性</li><li>隔离性是由MVCC来保证</li><li>持久性由<strong>redolog</strong>来保证，mysqI修改数据的时候会在redolog中记录一份日志数据，就算数据没有保存成功，只要日志保存成功了，数据仍然不会丢失</li></ol><h2><span id="innodb和myisam对比">InnoDB和MyISAM对比</span></h2><ul><li>InnoDB聚簇索引，MyISAM非聚簇索引</li><li>InnoDB数据与索引一起保存.ibd，MyISAM表结构.frm 索引.myi 数据.myd</li><li>InnoDB支持事务、外键、行锁表锁，MyISAM不支持事务、外键、只支持表锁</li><li>select count(*)</li><li>MyISAM查询更优，InnoDB更新更优</li><li>都是B+tree索引</li><li>MyISAM支持全文索引，InnoDB5.6后支持</li></ul><h3><span id="myisam"><strong>MyISAM</strong></span></h3><ul><li>不支持事务，但是每次查询都是原子的</li><li>支持表级锁，每次操作对整个表加锁</li><li>存储表的总行数</li><li>一个MyISAM表有三个文件：表结构.frm 索引.myi 数据 .myd</li><li>采用非聚集索引，索引文件的数据域存储指向数据文件的指针。辅索引与主索引基本一致，但是辅索引不用保证唯一性。</li></ul><h3><span id="innodb"><strong>Innodb</strong></span></h3><ul><li>支持ACID事务，支持四种隔离级别</li><li>支持行级锁及外键约束，因此支持写并发</li><li>不存储总行</li><li>主键索引采用聚集索引(索引的数据域存储数据文件本身)，辅索引的数据域存储主键的值;因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为维持B+树结构，文件的大调整。</li></ul><h2><span id="什么是事务事务的四个特性以及事务的隔离级别重点"><strong>什么是事务？事务的四个特性以及事务的隔离级别（重点）</strong></span></h2><p>事务：一系列操作组成，要么全部成功，要么全部失败</p><blockquote><p>事务ACID特性</p></blockquote><ol><li>原子性：一些列操作要么全部成功，要么全部失败</li><li>隔离性：事务的结果只有提交了其他事务才可见</li><li>一致性：数据库总时从一个一致状态变到另一个一致状态（事务修改前后的<strong>数据总体保证一致 转账</strong>）</li><li>持久性：事务提交后，对数据修改永久的</li></ol><blockquote><p>事务的并发问题：</p></blockquote><ol><li>脏读：读到未提交的数据</li><li>不可重复读：一个事务下，两次读取数据不一致（侧重内容数据的修改）</li><li>幻读：事务A 按照一定条件进行数据读取， 期间事务B 插入了相同搜索条件的新数据，事务A再次按照原先条件进行读取时，发现了事务B 新插入的数据 称为幻读（侧重新增或删除，插入数据读到多了一行）</li></ol><blockquote><p>隔离级别原理及解决问题分析：</p></blockquote><p><a href="https://www.cnblogs.com/myseries/p/10748912.html">数据库的4种隔离级别</a></p><ol><li><strong>读未提交</strong>：原理：直接读取数据，不能解决任何并发问题</li><li><strong>读已提交</strong>：读操作不加锁，写操作加排他锁，解决了脏读。原理：利用MVCC实现，每一句语句执行前都会生成Read View（一致性视图）</li><li><strong>可重复读</strong>：MVCC实现，只有事务开始时会创建Read View，之后事务里的其他查询都用这个Read View。解决了脏读、不可重复读，快照读（普通查询，读取历史数据）使用MVCC解决了幻读，当前读（读取最新提交数据）通过间隙锁解决幻读（lock in share mode、for update、update、detete、insert），间隙锁在可重复读下才生效。（<strong>默认隔离级别</strong>）</li><li><strong>可串行化</strong>：原理：使用锁，读加共享锁，写加排他锁，串行执行</li></ol><p><strong>总结：</strong>读已提交和可重复读实现原理就是MVCC Read View不同的生成时机。可重复读只在事务开始时生成一个Read View，之后都用的这个；读已提交每次执行前都会生成Read View。</p><h2><span id="什么是索引为什么要有索引"><strong>什么是索引？为什么要有索引？</strong></span></h2><ul><li>排好序的数据结构，可以帮助快速查找数据</li><li>帮助我们快速查找，提高效率</li><li>优缺点：索引可以提高查询速度，查询使用优化隐藏器提高性能，但是也会占据物理空间，降低增删改的速度，因为还要操作索引文件</li></ul><blockquote><p>索引分类</p></blockquote><p>功能逻辑上：</p><ol><li>普通索引</li><li>唯一索引</li><li>主键索引</li><li>全文索引</li></ol><p>物理实现方式上：</p><ol><li>聚簇索引</li><li>非聚簇索引</li></ol><p>作用字段上：</p><ol><li>单列索引</li><li>联合索引</li></ol><h2><span id="数据库索引的底层数据结构"><strong>数据库索引的底层数据结构？</strong></span></h2><p><strong>B+树</strong></p><p><img src="/2022/02/18/mian-shi-wen-ti-hui-zong/image-20220204164111460.png" alt="image-20220204164111460"></p><h2><span id="数据库设计三大范式"><strong>数据库设计三大范式？</strong></span></h2><p>第一范式：字段具有原子性，不可再分（字段单一职责）</p><p>第二范式：满足第一范式，每行应该被唯一区分，加一列存放每行的唯一标识符，称为主键（都要依赖主键）</p><p>每行数据都要被唯一标识</p><p>第三范式：满足一二范式，且一个表不能包含其他表已存在的非主键信息（不间接依赖-不存在其他表的非主键信息）</p><p><strong>范式优点与缺点：</strong></p><p>优点：范式化，重复冗余数据少，更新快，修改少，查询时更少的distinct</p><p>缺点：因为一个表不存在冗余重复数据，<strong>查询可能造成很多关联</strong>，效率变低，可能使一些<strong>索引策略无效</strong>，范式化将列存在不同表中，这些列若在同一个表中可以是一个索引。</p><h2><span id="sql语句如何优化"><strong>SQL语句如何优化</strong></span></h2><p>1.对查询进行优化，应尽量<strong>避免全表扫描</strong>，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p>2.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p><p>3.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</p><p><a href="https://www.cnblogs.com/xc-chejj/p/11244748.html">https://www.cnblogs.com/xc-chejj/p/11244748.html</a></p><h2><span id="数据库优化方案"><strong>数据库优化方案</strong></span></h2><p><img src="/2022/02/18/mian-shi-wen-ti-hui-zong/image-20220204175622337.png" alt="image-20220204175622337"></p><p>1、先设置慢查询（my.ini或数据库命令）</p><p>2、分析慢查询日志</p><p>3、定位低效率sql（show processlist）</p><p>4、explain分析执行计划（是否索引失效，用到索引没，用了哪些）</p><p>5、优化（索引+sql语句+数据库结构优化+优化器优化+架构优化)</p><h2><span id="索引失效情况">索引失效情况</span></h2><p>1.如果条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)</p><p>2.对于多列索引，不是使用的第一部分，则不会使用索引</p><p>3.like查询是以%开头</p><p>4.如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引</p><p>5.如果mysql估计使用全表扫描要比使用索引快,则不使用索引、</p><p>查看索引的使用情况：</p><p>show status like ‘Handler_read%’;<br>注意：<br>handler_read_key:这个值越高越好，越高表示使用索引查询到的次数</p><p>handler_read_rnd_next:这个值越高，说明查询低效</p><h2><span id="char类型和varchar类型的区别">char类型和varchar类型的区别？</span></h2><ul><li>char类型的长度是固定的，varchar的长度是可变的。</li><li>这就表示，存储字符串’abc’，使用char(10)，表示存储的字符将占10个字节（包括7个空字符）<br>使用varchar2(10),，则表示只占3个字节，10是最大值，当存储的字符小于10时，按照实际的长度存储</li></ul><h2><span id="什么是存储过程-procedure">什么是存储过程 procedure？</span></h2><p>存储过程是数据库中的一个对象，存储在服务端，用来封装多条SQL语句且带有逻辑性，可以实现一个功能，由于他在创建时，就已经对SQL进行了编译，所以执行效率高，而且可以重复调用，类似与我们Java中的方法</p><h2><span id="什么是触发器-trigger">什么是触发器 Trigger？</span></h2><p>触发器：数据库中的一个对象，相当于JS中的监听器，触发器可以监听 增删改 三个动作<br>比如说我想监听一张表，只要我增删改了这张表中的数据，我就可以触发这个触发器，去往另外一张表中记录一下日志</p><h1><span id="jvm">jVM</span></h1><h2><span id="类加载器分类">类加载器分类</span></h2><p>根加载器</p><p>扩展类加载器</p><p>应用程序/系统加载器</p><p>自定义加载器</p><h2><span id="垃圾回收算法">垃圾回收算法</span></h2><ul><li><strong>引用计数法</strong></li><li><strong>复制算法</strong></li><li><strong>标记清除算法</strong></li><li><strong>标记压缩(优化标记清除)</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试问题汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot</title>
      <link href="/2022/02/18/springboot/"/>
      <url>/2022/02/18/springboot/</url>
      
        <content type="html"><![CDATA[<h1><span id="springboot简介">SpringBoot简介</span></h1><h2><span id="回顾什么是spring">回顾什么是Spring</span></h2><p>Spring是一个开源框架，2003 年兴起的一个轻量级的Java 开发框架，作者：Rod Johnson  。</p><p><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</strong></p><h2><span id="spring是如何简化java开发的">Spring是如何简化Java开发的</span></h2><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p><p>1、基于POJO的轻量级和最小侵入性编程，所有东西都是bean；</p><p>2、通过IOC，依赖注入（DI）和面向接口实现松耦合；</p><p>3、基于切面（AOP）和惯例进行声明式编程；</p><p>4、通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</p><h2><span id="什么是springboot">什么是SpringBoot</span></h2><p>学过javaweb的同学就知道，开发一个web应用，从最初开始接触Servlet结合Tomcat, 跑出一个Hello Wolrld程序，是要经历特别多的步骤；后来就用了框架Struts，再后来是SpringMVC，到了现在的SpringBoot，过一两年又会有其他web框架出现；你们有经历过框架不断的演进，然后自己开发项目所有的技术也在不断的变化、改造吗？建议都可以去经历一遍；</p><p>言归正传，什么是SpringBoot呢，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置，  you can “just run”，能迅速的开发web应用，几行代码开发一个http接口。</p><p>所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案。</p><p>是的这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</p><p>随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</p><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p><p>Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot 已经当之无愧成为 Java 领域最热门的技术。</p><p><strong>Spring Boot的主要优点：</strong></p><ul><li>为所有Spring开发者更快的入门</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><p>使用SpringBoot到底有多爽，用下面这幅图来表达</p><p><img src="/2022/02/18/springboot/image-20211018151512921.png" alt="image-20211018151512921"></p><h1><span id="helloworld">Hello，World</span></h1><h2><span id="准备工作">准备工作</span></h2><p>我们将学习如何快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。</p><p>我的环境准备：</p><ul><li>jdk 1.8</li><li>Maven-3.x.x</li><li>SpringBoot  最新版</li></ul><p>开发工具：</p><ul><li>IDEA</li></ul><h2><span id="创建基础项目说明">创建基础项目说明</span></h2><p>Spring官方提供了非常方便的工具让我们快速构建应用</p><p>Spring Initializr：<a href="https://start.spring.io/">https://start.spring.io/</a></p><p><strong>项目创建方式一：</strong>使用Spring Initializr 的 Web页面创建项目</p><p>1、打开  <a href="https://start.spring.io/">https://start.spring.io/</a></p><p>2、填写项目信息</p><p>3、点击”Generate Project“按钮生成项目；下载此项目</p><p>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p><p>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p><p><strong>项目创建方式二：</strong>使用 IDEA 直接创建项目</p><p>1、创建一个新项目</p><p>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p><p>3、填写项目信息</p><p>4、选择初始化的组件（初学勾选 Web 即可）</p><p>5、填写项目路径</p><p>6、等待项目构建成功</p><p><img src="/2022/02/18/springboot/image-20211009203725384.png" alt="image-20211009203725384"></p><p><strong>项目结构分析：</strong></p><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p><p>1、程序的主启动类</p><p>2、一个 application.properties 配置文件</p><p>3、一个 测试类</p><p>4、一个 pom.xml</p><h2><span id="pomxml-分析">pom.xml 分析</span></h2><p>打开pom.xml，看看Spring Boot项目的依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 父依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- web场景启动器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- springboot单元测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 剔除依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打包插件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h2><span id="编写一个http接口">编写一个http接口</span></h2><ol><li><p>在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到</p><p>2、在包中新建一个HelloController类</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   3、编写完毕后，从主程序启动项目，浏览器发起请求，看页面返回；控制台输出了 Tomcat 访问的端口号！</p><p><img src="/2022/02/18/springboot/image-20211010122019828.png" alt="image-20211010122019828"></p><p>简单几步，就完成了一个web接口的开发，SpringBoot就是这么简单。所以我们常用它来建立我们的微服务项目！</p><h2><span id="将项目打成jar包点击-maven的-package">将项目打成jar包，点击 maven的 package</span></h2><p><img src="/2022/02/18/springboot/image-20211010122221499.png" alt="image-20211010122221499"></p><p>如果遇到以上错误，可以配置打包时 跳过项目运行测试用例</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    在工作中,很多情况下我们打包是不想执行测试用例的    可能是测试用例不完事,或是测试用例会影响数据库数据    跳过测试用例执    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--跳过项目运行测试用例--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><p>如果打包成功，则会在target目录下生成一个 jar 包</p><p>打成了jar包后，就可以在任何地方运行了！OK</p><h2><span id="彩蛋"><strong>彩蛋</strong></span></h2><p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案；</p><p>只需一步：到项目下的 resources 目录下新建一个banner.txt 即可。</p><p>图案可以到：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> 这个网站生成，然后拷贝到文件中即可！</p><p><img src="/2022/02/18/springboot/image-20211010122525642.png" alt="image-20211010122525642"></p><p><a href="code%5Cspringboot-01-helloworld%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc">文件资源</a></p><h1><span id="运行原则">运行原则</span></h1><p>我们之前写的HelloSpringBoot，到底是怎么运行的呢，Maven项目，我们一般从pom.xml文件开始；</p><blockquote><p><strong>pom.xml</strong></p></blockquote><h2><span id="父母依赖">父母依赖</span></h2><p>有些主要是依赖一个父项目，主要是管理项目的资源过滤及插件！</p><pre class=" language-XML"><code class="language-XML"><parent>    <groupid>org.springframework.boot</groupid>    <artifactid>spring-boot-starter-parent</artifactid>    <version>2.5.5</version>    <relativepath> <!-- lookup parent from repository --></relativepath></parent></code></pre><p>点进去，发现还有一个父亲依赖</p><pre class=" language-XML"><code class="language-XML"><parent>    <groupid>org.springframework.boot</groupid>    <artifactid>spring-boot-dependencies</artifactid>    <version>2.5.5</version></parent></code></pre><p>这里真正管理SpringBoot应用程序里面所有依赖版本的地方，SpringBoot的版本控制中心；</p><p><strong>我们导入依赖默认是不需要写版本；但是如果导入的包以后没有依赖中管理就需要手动配置版本了；</strong></p><h2><span id="启动器-spring-boot-starter">启动器 spring-boot-starter</span></h2><pre class=" language-XML"><code class="language-XML"><dependency>       <groupid>org.springframework.boot</groupid>    <artifactid>spring-boot-starter-web</artifactid></dependency></code></pre><p><strong>springboot-boot-starter-xxx</strong>：就是spring-boot的场景启动器</p><p><strong>spring-boot-starter-web</strong>：帮我们导入了web模块正常运行所依赖的组件；</p><p>SpringBoot 的所有功能场景都会突然出现，启动一个启动器，只需要在项目中引入这些启动器，所有相关的都依赖导入导入，我们需要什么功能就导入生成器场景启动器；我们未来也可以自己自定义启动器；</p><blockquote><p><strong>主启动类</strong></p></blockquote><p>分析完 pom.xml 来看看这个启动类</p><h2><span id="默认的主启动类">默认的主启动类</span></h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@SpringBootApplication 来标注一个主程序类</span><span class="token comment" spellcheck="true">//说明这是一个Spring Boot应用</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplication</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//以为是启动了一个方法，没想到启动了一个服务</span>       SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是<strong>一个简单的启动</strong>不简单<strong>！</strong>我们来分析一下这些注解都干了</p><h2><span id="springbootapplication">@SpringBootApplication</span></h2><p>说明作用：这个Boot这个类就在自己的某个上类是SpringBoot的主配置类，SpringBoot运行类的主要方法来启动SpringBoot应用；</p><p>进入这个注解：可以看到上面还有很多其他注解！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>    excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span>TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span>AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre><h2><span id="componentscan">@ComponentScan</span></h2><p>这个注解在春天中很重要，它对应 XML 配置中的元素。</p><p>作用：自动加载并加载符合条件的组件或bean，将这个bean定义加载到IOC容器中</p><h2><span id="springbootconfiguration">@SpringBootConfiguration</span></h2><p>作用：SpringBoot的配置类，是SpringBoot的配置类，表示一个SpringBoot的配置类；</p><p>我们继续进入这个注解查看</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 点进去得到下面的 @Component</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p> 这里对应的@Configuration，说明这是一个配置类，配置类就是Spring的xml配置文件；</p><p>里面的@Component这个说明，启动类任务也是Spring中的一个组件，主要是启动应用！</p><p>我们回到 SpringBootApplication 注解中继续看。</p><h2><span id="enableautoconfiguration">@EnableAutoConfiguration</span></h2><p><strong>@EnableAutoConfiguration：开启自动配置功能</strong></p><p>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置；@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；</p><p>点进注解接续查看：</p><p><strong>@AutoConfigurationPackage ：自动配置包</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Registrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">AutoConfigurationPackage</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>@import</strong>：春天注解@import ，给容器中导入一个组件</p><p>Registrar.class 作用：将主启动类的所属包及包下面所有子包里面的所有组件扫描到Spring容器；</p><p>这个分析完了，退到上一步，继续看</p><p><strong>@Import({AutoConfigurationImportSelector.class})：给容器导入组件；</strong></p><p>AutoConfigurationImportSelector：自动配置导入选择器，那它会导入哪些组件的选择器呢？我们点击去这个类看源码：</p><p>1、这个类有一个这样的方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获得候选的配置</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span>    <span class="token comment" spellcheck="true">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、方法又调用了SpringFactoriesLoader类的这个方法！我们进入SpringFactoriesLoader类loadFactoryNames()方法</p><pre class=" language-JAVA"><code class="language-JAVA">public static List<string> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {    String factoryClassName = factoryClass.getName();    //这里它又调用了 loadSpringFactories 方法    return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());}</string></code></pre><p>3、我们继续点击查看loadSpringFactories方法</p><pre class=" language-JAVA"><code class="language-JAVA">private static Map<string, list<string>> loadSpringFactories(@Nullable ClassLoader classLoader) {    //获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身    MultiValueMap<string, string> result = (MultiValueMap)cache.get(classLoader);    if (result != null) {        return result;    } else {        try {            //去获取一个资源 "META-INF/spring.factories"            Enumeration<url> urls = classLoader != null ? classLoader.getResources("META-INF/spring.factories") : ClassLoader.getSystemResources("META-INF/spring.factories");            LinkedMultiValueMap result = new LinkedMultiValueMap();            //将读取到的资源遍历，封装成为一个Properties            while(urls.hasMoreElements()) {                URL url = (URL)urls.nextElement();                UrlResource resource = new UrlResource(url);                Properties properties = PropertiesLoaderUtils.loadProperties(resource);                Iterator var6 = properties.entrySet().iterator();                while(var6.hasNext()) {                    Entry<?, ?> entry = (Entry)var6.next();                    String factoryClassName = ((String)entry.getKey()).trim();                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());                    int var10 = var9.length;                    for(int var11 = 0; var11 < var10; ++var11) {                        String factoryName = var9[var11];                        result.add(factoryClassName, factoryName.trim());                    }                }            }            cache.put(classLoader, result);            return result;        } catch (IOException var13) {            throw new IllegalArgumentException("Unable to load factories from location [META-INF/spring.factories]", var13);        }    }}</url></string,></string,></code></pre><p>4、发现一个多次出现的原因，请参见：spring.factories</p><h2><span id="springfactories">spring.factories</span></h2><p>我们根据源头打开spring.factories，看到了很多自动配置的文件；这就是自动配置来源！</p><p><img src="/2022/02/18/springboot/image-20211010125252395.png" alt="image-20211010125252395"></p><p><strong>WebMvc自动配置</strong></p><p>我们在上面的自动配置类随便找一个打开看看，比如：WebMvcAutoConfiguration</p><p><img src="/2022/02/18/springboot/image-20211010125522071.png" alt="image-20211010125522071"></p><p>这些都是可以看到的JavaConfig配置类，而且都注入了一些Bean，可以一些自己认识的类，自己来看看吧！</p><p>所以，自动配置搜索真正实现是从classpath中所有的META-INF/spring.factories配置文件，对应的org.springframework.boot.autoconfigure。包下的配置项，通过实例化为对应输入了@Configuration的JavaConfig形式的IOC容器配置类，然后将这些都汇总成为一个实例并加载到IOC容器中。</p><p><strong>结语：</strong></p><ol><li>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li><li>将这些值作为自动配置类导入容器，自动配置类就生效，帮我们进行自动配置工作；</li><li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</li><li>它包含容器中导入非常多的自动配置类（xxxAutoConfiguration），就是给容器中导入这个场景需要的所有组件，并配置好这些组件；</li><li>有了自动配置类，免去了我们手动写配置注入功能组件等的工作；</li></ol><p><strong>现在大家应该了解了下，SpringBoot 的运行原理，我们大概会深入一次！</strong></p><blockquote><p><strong>弹簧应用</strong></p></blockquote><h2><span id="不简单的方法">不简单的方法</span></h2><p>我最初以为想到却开启了一个服务；</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootApplicationpublic class SpringbootApplication {    public static void main(String[] args) {        SpringApplication.run(SpringbootApplication.class, args);    }}</code></pre><p><strong>SpringApplication.run 分析</strong></p><p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行；</p><p><strong>这类主要有以下四件事情：</strong></p><p>1、推断应用的类型是普通的项目还是Web项目</p><p>2、初始化并加载所有可初始化器，设置到initializers属性中</p><p>3、查找所有的应用程序监听器，设置到监听器属性中</p><p>4、推断并设置主要方法的定义类，找到运行的主类</p><p>查看构造器：</p><pre class=" language-JAVA"><code class="language-JAVA">public SpringApplication(ResourceLoader resourceLoader, Class... primarySources) {    // ......    this.webApplicationType = WebApplicationType.deduceFromClasspath();    this.setInitializers(this.getSpringFactoriesInstances();    this.setListeners(this.getSpringFactoriesInstances(ApplicationListener.class));    this.mainApplicationClass = this.deduceMainApplicationClass();}</code></pre><h2><span id="运行方法流程分析">运行方法流程分析</span></h2><p><img src="/2022/02/18/springboot/%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.webp"></p><h1><span id="yaml语法学习">yaml语法学习</span></h1><h2><span id="配置文件">配置文件</span></h2><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li><p>application.properties</p></li><li><ul><li>语法结构 ：key=value</li></ul></li><li><p>application.yml</p></li><li><ul><li>语法结构 ：key：空格 value</li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号！测试一下！</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span></code></pre><h2><span id="yaml概述">yaml概述</span></h2><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p><p><strong>这种语言以数据作为中心，而不是以标记语言为重点！</strong></p><p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p><p>传统xml配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8081<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span></code></pre><p>yaml配置：</p><pre class=" language-yaml"><code class="language-yaml">server：   <span class="token key atrule">prot</span><span class="token punctuation">:</span> <span class="token number">8080</span></code></pre><h2><span id="yaml基础语法">yaml基础语法</span></h2><p>说明：语法要求严格！</p><p>1、空格不能省略</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的。</p><p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><pre><code>k: v</code></pre><p>注意：</p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “kuang \n shen”  输出 ：kuang  换行  shen</p></li><li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘kuang \n shen’  输出 ：kuang  \n  shen</p></li></ul><p><strong>对象、Map（键值对）</strong></p><pre><code>#对象、Map格式k:     v1:    v2:</code></pre><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">student</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> qinjiang    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span></code></pre><p>行内写法</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">student2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> qingjiang<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span></code></pre><p><strong>数组（ List、set ）</strong></p><p>用 - 值表示数组中的一个元素,比如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> cat   <span class="token punctuation">-</span> dog    <span class="token punctuation">-</span> pig</code></pre><p>行内写法</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><p><strong>修改SpringBoot的默认端口号</strong></p><p>配置文件中添加，端口号的参数，就可以切换端口；</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span></code></pre><p><strong>总结代码</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#k= v</span><span class="token comment" spellcheck="true">#对空格的要求十分高</span><span class="token comment" spellcheck="true">#普通的key-value</span><span class="token key atrule">name</span><span class="token punctuation">:</span> qinjiang<span class="token comment" spellcheck="true">#对象</span><span class="token key atrule">student</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> qinjiang     <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3    </span><span class="token comment" spellcheck="true">#行内写法</span><span class="token key atrule">student2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> qingjiang<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#数组</span><span class="token key atrule">pets</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> cat   <span class="token punctuation">-</span> dog    <span class="token punctuation">-</span> pig  <span class="token comment" spellcheck="true">#行内写法</span><span class="token key atrule">pets2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><p><a href="code%5Cspringboot-02-config%5Csrc%5Cmain%5Cresources">文件资源</a></p><blockquote><p>注入配置文件</p></blockquote><p>yaml文件更强大的地方在于，他可以给我们的实体类直接注入匹配值！</p><h2><span id="yaml注入配置文件">yaml注入配置文件</span></h2><p>1、在springboot项目中的resources目录下新建一个文件 application.yml</p><p>2、编写一个实体类 Dog；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> name<span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token string">"Dog{"</span> <span class="token operator">+</span>                    <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                 <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                 <span class="token string">'}'</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、思考，我们原来是如何给bean注入属性值的！@Value，给狗狗类测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Componentpublic</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>       <span class="token keyword">private</span> String name<span class="token punctuation">;</span>       <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>       <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、在SpringBoot的测试类下注入狗狗输出一下；</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc;import com.lpc.pojo.Dog;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestclass Springboot02ConfigApplicationTests {       @Autowired        private Dog dog;      @Test        void contextLoads() {          System.out.println(dog);       }}</code></pre><p>结果成功输出，@Value注入成功，这是我们原来的办法对吧。</p><img src="/2022/02/18/springboot/image-20211017124540816.png"><p>5、我们在编写一个复杂一点的实体类：Person 类</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.pojo;import org.springframework.stereotype.Component;import java.util.Date;import java.util.List;import java.util.Map;@Componentpublic class Person {       private String name;     private Integer age;      private Boolean happy;      private Date birth;      private Map<string, object> maps;      private List<object> lists;      private Dog dog;        public Person() {       }       public Person(String name, Integer age, Boolean happy, Date birth, Map<string, object> maps, List<object> lists, Dog dog) {            this.name = name;           this.age = age;             this.happy = happy;           this.birth = birth;               this.maps = maps;            this.lists = lists;            this.dog = dog;       }        public String getName() {            return name;      }       public void setName(String name) {          this.name = name;      }       public Integer getAge() {              return age;      }       public void setAge(Integer age) {          this.age = age;        }      public Boolean getHappy() {           return happy;      }       public void setHappy(Boolean happy) {           this.happy = happy;      }      public Date getBirth() {            return birth;      }       public void setBirth(Date birth) {            this.birth = birth;       }      public Map<string, object> getMaps() {            return maps;        }       public void setMaps(Map<string, object> maps) {          this.maps = maps;       }       public List<object> getLists() {            return lists;     }       public void setLists(List<object> lists) {            this.lists = lists;     }       public Dog getDog() {           return dog;     }       public void setDog(Dog dog) {        this.dog = dog;       }        @Override       public String toString() {             return "Person{" +              "name='" + name + '\'' +               ", age=" + age +                      ", happy=" + happy +                ", birth=" + birth +                     ", maps=" + maps +                  ", lists=" + lists +               ", dog=" + dog +                  '}';     }}</object></object></string,></string,></object></string,></object></string,></code></pre><p>6、我们来使用yaml配置的方式进行注入，大家写的时候注意区别和优势，我们编写一个yaml配置！</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> lpc    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3 </span>  <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2021/10/17    <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">}</span>    <span class="token key atrule">lists</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> code        <span class="token punctuation">-</span> music     <span class="token punctuation">-</span> girl   <span class="token key atrule">dog</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> 旺财       <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span></code></pre><p>7、我们刚才已经把person这个对象的所有值都写好了，我们现在来注入到我们的类中！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*@ConfigurationProperties作用：将配置文件中配置的每一个属性的值，映射到这个组件中；告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应*/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>8、IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</p><p><img src="/2022/02/18/springboot/image-20211017133916703.png" alt="image-20211017133916703"></p><pre class=" language-XML"><code class="language-XML"><!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --><dependency>         <groupid>org.springframework.boot</groupid>       <artifactid>spring-boot-configuration-processor</artifactid>       <optional>true</optional></dependency></code></pre><p>9、确认以上配置都OK之后，我们去测试类中测试一下：</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc;import com.lpc.pojo.Dog;import com.lpc.pojo.Person;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestclass Springboot02ConfigApplicationTests {     @Autowired//        private Dog dog;       private Person person;       @Test       void contextLoads() {        //                System.out.println(dog);          System.out.println(person);    }}</code></pre><p>结果：所有值全部注入成功！</p><p><img src="/2022/02/18/springboot/image-20211017134122209.png" alt="image-20211017134122209"></p><p><strong>yaml配置注入到实体类完全OK！</strong></p><p><a href="code%5Cspringboot-02-config%5Csrc%5Cmain%5Cresources">文件资源</a></p><h2><span id="加载指定的配置文件">加载指定的配置文件</span></h2><p><strong>@PropertySource ：</strong>加载指定的配置文件；</p><p><strong>@configurationProperties</strong>：默认从全局配置文件中获取值；</p><p>1、我们去在resources目录下新建一个<strong>application.properties</strong>文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">lpc</span></code></pre><p>2、然后在我们的代码中指定加载person.properties文件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:application.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></code></pre><p>3、再次输出测试一下：指定配置文件绑定成功！</p><p><img src="/2022/02/18/springboot/image-20211017135815056.png" alt="image-20211017135815056"></p><h2><span id="对比小结">对比小结</span></h2><p>@Value这个使用起来并不友好！我们需要为每个属性单独注解赋值，比较麻烦；我们来看个功能对比图</p><p><img src="/2022/02/18/springboot/image-20211017135913789.png" alt="image-20211017135913789"></p><p>1、@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</p><p>2、松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</p><p>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p><p>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持</p><p><strong>结论：</strong></p><p>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</p><p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</p><p>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</p><p><a href="code%5Cspringboot-02-config%5Csrc%5Cmain%5Cresources">文件资源</a></p><h2><span id="jsr303数据校验">JSR303数据校验</span></h2><h2><span id="先看看如何使用">先看看如何使用</span></h2><p>Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span>  <span class="token comment" spellcheck="true">//数据校验</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//name必须是邮箱格式       </span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果 ：default message [不是一个合法的电子邮件地址];</p><p><img src="/2022/02/18/springboot/image-20211017141828109.png" alt="image-20211017141828109"></p><p><strong>使用数据校验，可以保证数据的正确性；</strong> </p><h2><span id="常见参数">常见参数</span></h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"名字不能为空"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String userName<span class="token punctuation">;</span><span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"年龄最大不能查过120"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String email<span class="token punctuation">;</span>空检查<span class="token annotation punctuation">@Null</span>  验证对象是否为null<span class="token annotation punctuation">@NotNull</span>   验证对象是否不为null<span class="token punctuation">,</span> 无法查检长度为<span class="token number">0</span>的字符串<span class="token annotation punctuation">@NotBlank</span>  检查约束字符串是不是Null还有被Trim的长度是否大于<span class="token number">0</span><span class="token punctuation">,</span>只对字符串<span class="token punctuation">,</span>且会去掉前后空格<span class="token punctuation">.</span><span class="token annotation punctuation">@NotEmpty</span>  检查约束元素是否为NULL或者是EMPTY<span class="token punctuation">.</span>    Booelan检查<span class="token annotation punctuation">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="token boolean">true</span> <span class="token annotation punctuation">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="token boolean">false</span>    长度检查<span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token punctuation">)</span> 验证对象（Array<span class="token punctuation">,</span>Collection<span class="token punctuation">,</span>Map<span class="token punctuation">,</span>String）长度是否在给定的范围之内 <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token punctuation">)</span> string is between min and max included<span class="token punctuation">.</span>日期检查<span class="token annotation punctuation">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前 <span class="token annotation punctuation">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后 <span class="token annotation punctuation">@Pattern</span>    验证 String 对象是否符合正则表达式的规则<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>等等除此以外，我们还可以自定义一些数据校验规则</code></pre><p>多环境切换</p><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；</p><h2><span id="多配置文件">多配置文件</span></h2><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本；  </p><p><strong>例如：</strong></p><p>application-test.properties 代表测试环境配置</p><p>application-dev.properties 代表开发环境配置</p><p>但是Springboot并不会直接启动这些配置文件，它<strong>默认使用application.properties主配置文件</strong>；</p><p>我们需要通过一个配置来选择需要激活的环境：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；spring.profiles.active=dev</span></code></pre><h2><span id="yaml的多文档块">yaml的多文档块</span></h2><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token comment" spellcheck="true">#选择要激活那个环境块</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> prod<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev <span class="token comment" spellcheck="true">#配置环境的名称</span><span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod  <span class="token comment" spellcheck="true">#配置环境的名称</span></code></pre><p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p><h2><span id="配置文件加载位置">配置文件加载位置</span></h2><p><strong>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</strong></p><p>官方外部配置文件说明参考文档</p><p><img src="/2022/02/18/springboot/image-20211017144714207.png" alt="image-20211017144714207"></p><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p><pre><code>优先级1：项目路径下的config文件夹配置文件优先级2：项目路径下配置文件优先级3：资源路径下的config文件夹配置文件优先级4：资源路径下配置文件</code></pre><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p><strong>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</strong></p><p>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题；</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置项目的访问路径</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/kuang</span></code></pre><h2><span id="拓展运维小技巧">拓展，运维小技巧</span></h2><p>指定位置加载配置文件</p><p>我们还可以通过spring.config.location来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p><pre class=" language-bash"><code class="language-bash">java -jar spring-boot-config.jar --spring.config.location<span class="token operator">=</span>F:/application.properties</code></pre><p><a href="code%5Cspringboot-02-config-2%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc">文件资源</a></p><h1><span id="自动配置原理">自动配置原理</span></h1><p><strong><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;chksm=ce6107d5f9168ec34f59d88c5a7cfa592ab2c1a5bf02cc3ed7bbb7b4f4e93d457144a6843a23&amp;idx=1&amp;mid=2247483766&amp;scene=21&amp;sn=27739c5103547320c505d28bec0a9517#wechat_redirect">自动配置原理</a></strong></p><h1><span id="web开发静态资源处理">Web开发静态资源处理</span></h1><h2><span id="web开发探究">Web开发探究</span></h2><h2><span id="简介">简介</span></h2><p>好的，同学们，那么接下来呢，我们开始学习SpringBoot与Web开发，从这一章往后，就属于我们实战部分的内容了；</p><p>其实SpringBoot的东西用起来非常简单，因为SpringBoot最大的特点就是自动装配。</p><p><strong>使用SpringBoot的步骤：</strong></p><p>1、创建一个SpringBoot应用，选择我们需要的模块，SpringBoot就会默认将我们的需要的模块自动配置好</p><p>2、手动在配置文件中配置部分配置项目就可以运行起来了</p><p>3、专注编写业务代码，不需要考虑以前那样一大堆的配置了。</p><p>要熟悉掌握开发，之前学习的自动配置的原理一定要搞明白！</p><p>比如SpringBoot到底帮我们配置了什么？我们能不能修改？我们能修改哪些配置？我们能不能扩展？</p><ul><li>向容器中自动配置组件 ：*** Autoconfiguration</li><li>自动配置类，封装配置文件的内容：***Properties</li></ul><p>没事就找找类，看看自动装配原理！</p><p>我们之后来进行一个单体项目的小项目测试，让大家能够快速上手开发！</p><h2><span id="静态资源处理">静态资源处理</span></h2><h3><span id="静态资源映射规则">静态资源映射规则</span></h3><p><strong>首先，我们搭建一个普通的SpringBoot项目，回顾一下HelloWorld程序！</strong></p><p>写请求非常简单，那我们要引入我们前端资源，我们项目中有许多的静态资源，比如css，js等文件，这个SpringBoot怎么处理呢？</p><p>如果我们是一个web应用，我们的main下会有一个webapp，我们以前都是将所有的页面导在这里面的，对吧！但是我们现在的pom呢，打包方式是为jar的方式，那么这种方式SpringBoot能不能来给我们写页面呢？当然是可以的，但是SpringBoot对于静态资源放置的位置，是有规定的！</p><p><strong>我们先来聊聊这个静态资源映射规则：</strong></p><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；</p><p>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；</p><p>有一个方法：addResourceHandlers 添加资源处理</p><p><img src="/2022/02/18/springboot/image-20211020220606568.png" alt="image-20211020220606568"></p><p>读一下源代码：比如所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；</p><h2><span id="什么是webjars-呢">什么是webjars 呢？</span></h2><p>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p><p>使用SpringBoot需要使用Webjars，我们可以去搜索一下：</p><p>网站：<a href="https://www.webjars.org/">https://www.webjars.org</a> </p><p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p><p><img src="/2022/02/18/springboot/image-20211020220722798.png" alt="image-20211020220722798"></p><p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：<a href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a></p><p><img src="/2022/02/18/springboot/image-20211020220749753.png" alt="image-20211020220749753"></p><h2><span id="第二种静态资源映射规则">第二种静态资源映射规则</span></h2><p>那我们项目中要是使用自己的静态资源该怎么导入呢？我们看下一行代码；</p><p>我们去找staticPathPattern发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去找 resourceProperties 这个类，我们可以点进去看一下分析：</p><p><img src="/2022/02/18/springboot/image-20211020220912806.png" alt="image-20211020220912806"></p><p>再点</p><p><img src="/2022/02/18/springboot/image-20211020221025610.png" alt="image-20211020221025610"></p><p><img src="/2022/02/18/springboot/image-20211020221111376.png" alt="image-20211020221111376"></p><p>这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p><p>所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p><pre><code>classpath:/META-INF/resources/""classpath:/resources/""classpath:/static/""classpath:/public/"</code></pre><p>我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p><p><img src="/2022/02/18/springboot/image-20211020221345168.png" alt="image-20211020221345168"></p><p>比如我们访问 <a href="http://localhost:8080/1.js">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p><h2><span id="首页处理">首页处理</span></h2><p>静态资源文件夹说完后，我们继续向下看源码！可以看到一个欢迎页的映射，就是我们的首页！</p><p><img src="/2022/02/18/springboot/image-20211021144350600.png" alt="image-20211021144350600"></p><p>方法下</p><p><em>// 欢迎页就是一个location下的的 index.html 而已</em></p><p><img src="/2022/02/18/springboot/image-20211021144640827.png" alt="image-20211021144640827"></p><p>欢迎页，静态资源文件夹下的所有 index.html 页面；被 /** 映射。</p><p>比如我访问  <a href="http://localhost:8080/">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p><p>新建一个 index.html ，在我们上面的3个目录中任意一个；然后访问测试  <a href="http://localhost:8080/">http://localhost:8080/</a>  看结果！</p><p><strong>关于网站图标说明</strong>：</p><p>与其他静态资源一样，Spring Boot在配置的静态内容位置中查找 favicon.ico。如果存在这样的文件，它将自动用作应用程序的favicon。</p><p>1、关闭SpringBoot默认图标</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#关闭默认图标</span><span class="token attr-name">spring.mvc.favicon.enable</span><span class="token punctuation">=</span><span class="token attr-value">false;</span></code></pre><p>2、自己放一个图标在静态资源目录下，我放在 public 目录下</p><p>3、清除浏览器缓存！刷新网页，发现图标已经变成自己的了</p><p><a href="code%5Cspringboot-03-web%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc%5Cconfig">文件资源</a></p><h1><span id="thymeleaf模板引擎">Thymeleaf模板引擎</span></h1><p>Thymeleaf</p><h2><span id="模板引擎">模板引擎</span></h2><p>前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。</p><p>jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，第二，我们用的还是嵌入式的Tomcat，所以呢，<strong>他现在默认是不支持jsp的</strong>。</p><p>那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？</p><p><strong>SpringBoot推荐你可以来使用模板引擎：</strong></p><p>模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图：</p><p><img src="/2022/02/18/springboot/image-20211021180917701.png" alt="image-20211021180917701"></p><p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。</p><p>我们呢，就来看一下这个模板引擎，那既然要看这个模板引擎。首先，我们来看SpringBoot里边怎么用。</p><h2><span id="引入thymeleaf">引入Thymeleaf</span></h2><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：</p><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p><p>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></p><p>Spring官方文档：找到我们对应的版本</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a> </p><p>找到对应的pom依赖：可以适当点进源码看下本来的包！</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--thymeleaf--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Maven会自动下载jar包，我们可以去看下下载的东西；</p><p><img src="/2022/02/18/springboot/image-20211021181311310.png" alt="image-20211021181311310"></p><h2><span id="thymeleaf分析">Thymeleaf分析</span></h2><p>前面呢，我们已经引入了Thymeleaf，那这个要怎么使用呢？</p><p>我们首先得按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则，在按照那个规则，我们进行使用。</p><p>我们去找一下Thymeleaf的自动配置类：ThymeleafProperties</p><p><img src="/2022/02/18/springboot/image-20211021181703059.png" alt="image-20211021181703059"></p><p>我们可以在其中看到默认的前缀和后缀！</p><p>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p><p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</p><p><strong>测试</strong></p><p>1、编写一个TestController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controllerpublic</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t1"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> String <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//classpath:/templates/test.html </span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、编写一个测试页面  test.html 放在 templates 目录下</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>测试页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>3、启动项目请求测试</p><h2><span id="thymeleaf-语法学习">Thymeleaf 语法学习</span></h2><p>要学习语法，还是参考官网文档最为准确，我们找到对应的版本看一下；</p><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> ， 简单看一下官网！我们去下载Thymeleaf的官方文档！</p><p><strong>我们做个最简单的练习 ：我们需要查出一些数据，在页面中展示</strong></p><p>1、修改测试请求，增加数据传输；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test1</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//存入数据    </span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Hello,Thymeleaf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//classpath:/templates/test.html  </span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p><p>我们可以去官方文档的#3中看一下命名空间拿来过来：</p><pre class=" language-html"><code class="language-html">xmlns:th="http://www.thymeleaf.org"</code></pre><p>3、我们去编写下前端页面</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>狂神说<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>测试页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--th:text就是将div中的内容设置为它指定的值，和之前学习的Vue一样--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>4、启动测试！</p><p><img src="/2022/02/18/springboot/image-20211021194523118.png" alt="image-20211021194523118"></p><p><strong>OK，入门搞定，我们来认真研习一下Thymeleaf的使用语法！</strong></p><p><strong>1、我们可以使用任意的 th:attr 来替换Html中原生属性的值！</strong></p><p><img src="/2022/02/18/springboot/image-20211021194637089.png" alt="image-20211021194637089"></p><p><strong>2、我们能写哪些表达式呢？</strong></p><pre><code>Simple expressions:（表达式语法）Variable Expressions: ${...}：获取变量值；OGNL；    1）、获取对象的属性、调用方法    2）、使用内置的基本对象：#18         #ctx : the context object.         #vars: the context variables.         #locale : the context locale.         #request : (only in Web Contexts) the HttpServletRequest object.         #response : (only in Web Contexts) the HttpServletResponse object.         #session : (only in Web Contexts) the HttpSession object.         #servletContext : (only in Web Contexts) the ServletContext object.    3）、内置的一些工具对象：　　　　　　#execInfo : information about the template being processed.　　　　　　#uris : methods for escaping parts of URLs/URIs　　　　　　#conversions : methods for executing the configured conversion service (if any).　　　　　　#dates : methods for java.util.Date objects: formatting, component extraction, etc.　　　　　　#calendars : analogous to #dates , but for java.util.Calendar objects.　　　　　　#numbers : methods for formatting numeric objects.　　　　　　#strings : methods for String objects: contains, startsWith, prepending/appending, etc.　　　　　　#objects : methods for objects in general.　　　　　　#bools : methods for boolean evaluation.　　　　　　#arrays : methods for arrays.　　　　　　#lists : methods for lists.　　　　　　#sets : methods for sets.　　　　　　#maps : methods for maps.　　　　　　#aggregates : methods for creating aggregates on arrays or collections.==================================================================================  Selection Variable Expressions: *{...}：选择表达式：和${}在功能上是一样；  Message Expressions: #{...}：获取国际化内容  Link URL Expressions: @{...}：定义URL；  Fragment Expressions: ~{...}：片段引用表达式Literals（字面量）      Text literals: 'one text' , 'Another one!' ,…      Number literals: 0 , 34 , 3.0 , 12.3 ,…      Boolean literals: true , false      Null literal: null      Literal tokens: one , sometext , main ,…      Text operations:（文本操作）    String concatenation: +    Literal substitutions: |The name is ${name}|    Arithmetic operations:（数学运算）    Binary operators: + , - , * , / , %    Minus sign (unary operator): -    Boolean operations:（布尔运算）    Binary operators: and , or    Boolean negation (unary operator): ! , not    Comparisons and equality:（比较运算）    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )    Equality operators: == , != ( eq , ne )    Conditional operators:条件运算（三元运算符）    If-then: (if) ? (then)    If-then-else: (if) ? (then) : (else)    Default: (value) ?: (defaultvalue)    Special tokens:    No-Operation: _</code></pre><p><strong>练习测试：</strong></p><p>1、 我们编写一个Controller，放一些数据</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//存入数据   </span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"&lt;h1>Hello&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"qinjiang"</span><span class="token punctuation">,</span><span class="token string">"kuangshen"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//classpath:/templates/test.html  </span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、测试页面取出数据</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>狂神说<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>测试页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!--不转义：就是标签能用/转义就是显示原来的字符串--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--遍历数据--></span>               <span class="token comment" spellcheck="true">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user :${users}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>                         <span class="token comment" spellcheck="true">&lt;!--行内写法：官网#12--></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:${users}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[[${user}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>3、启动项目测试！</p><p><strong>我们看完语法，很多样式，我们即使现在学习了，也会忘记，所以我们在学习过程中，需要使用什么，根据官方文档来查询，才是最重要的，要熟练使用官方文档！</strong></p><p><a href="code%5Cspringboot-03-web%5Csrc%5Cmain%5Cresources%5Ctemplates">文件资源</a></p><h1><span id="mvc自动配置原理">MVC自动配置原理</span></h1><h2><span id="mvc自动配置原理">MVC自动配置原理</span></h2><h2><span id="官网阅读">官网阅读</span></h2><p>在进行项目编写前，我们还需要知道一个东西，就是SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。</p><p>只有把这些都搞清楚了，我们在之后使用才会更加得心应手。途径一：源码分析，途径二：官方文档！</p><p>地址 ：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p><pre><code>Spring MVC Auto-configuration// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。Spring Boot provides auto-configuration for Spring MVC that works well with most applications.// 自动配置在Spring默认设置的基础上添加了以下功能：The auto-configuration adds the following features on top of Spring’s defaults:// 包含视图解析器Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.// 支持静态资源文件夹的路径，以及webjarsSupport for serving static resources, including support for WebJars // 自动注册了Converter：// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把"1"字符串自动转换为int类型// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】Automatic registration of Converter, GenericConverter, and Formatter beans.// HttpMessageConverters// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；Support for HttpMessageConverters (covered later in this document).// 定义错误代码生成规则的Automatic registration of MessageCodesResolver (covered later in this document).// 首页定制Static index.html support.// 图标定制Custom Favicon support (covered later in this document).// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！Automatic use of a ConfigurableWebBindingInitializer bean (covered later in this document)./*如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。*/If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.</code></pre><p>我们来仔细对照，看一下它怎么实现的，它告诉我们SpringBoot已经帮我们自动配置好了SpringMVC，然后自动配置了哪些东西呢？</p><h2><span id="contentnegotiatingviewresolver-内容协商视图解析器"><strong>ContentNegotiatingViewResolver 内容协商视图解析器</strong></span></h2><p>自动配置了ViewResolver，就是我们之前学习的SpringMVC的视图解析器；</p><p>即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。</p><p>我们去看看这里的源码：我们找到 WebMvcAutoConfiguration ， 然后搜索ContentNegotiatingViewResolver。找到如下方法！</p><p><img src="/2022/02/18/springboot/image-20211022200434408.png" alt="image-20211022200434408"></p><p>我们可以点进这类看看！找到对应的解析视图的代码；</p><p><img src="/2022/02/18/springboot/image-20211022200955821.png" alt="image-20211022200955821"></p><p>我们继续点进去看，他是怎么获得候选的视图的呢？</p><p>点getCandidateViews中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p><p><img src="/2022/02/18/springboot/image-20211022204211170.png" alt="image-20211022204211170"></p><p>我们再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initServletContext</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里它是从beanFactory工具中获取容器中的所有视图解析器</span>    <span class="token comment" spellcheck="true">// ViewRescolver.class 把所有的视图解析器来组合的</span>    Collection<span class="token operator">&lt;</span>ViewResolver<span class="token operator">></span> matchingBeans <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beansOfTypeIncludingAncestors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ViewResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ViewResolver viewResolver<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>viewResolvers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>viewResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...............</span><span class="token punctuation">}</span></code></pre><p>既然它是在容器中去找视图解析器，我们是否可以猜想，我们就可以去实现一个视图解析器了呢？</p><p>我们可以自己给容器中去添加一个视图解析器；这个类就会帮我们自动的将它组合进来；</p><p><strong>我们去实现一下</strong></p><p>1、我们在我们的主程序中去写一个视图解析器来试试；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ViewResolver<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//放到bean中</span>    <span class="token keyword">public</span> ViewResolver <span class="token function">myViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//我们写一个静态内部类，视图解析器就需要实现ViewResolver接口</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> View <span class="token function">resolveViewName</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、怎么看我们自己写的视图解析器有没有起作用呢？</p><p>我们给 DispatcherServlet 中的 doDispatch方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中</p><p><img src="/2022/02/18/springboot/image-20211023130835189.png" alt="image-20211023130835189"></p><p>3、我们启动我们的项目，然后随便访问一个页面，看一下调试信息；</p><p>找到这个</p><p><img src="/2022/02/18/springboot/image-20211023131131120.png" alt="image-20211023131131120"></p><p>所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot帮我们就好了！</p><h2><span id="转换器和转化器">转换器和转化器</span></h2><p>解析转换器：</p><p><img src="/2022/02/18/springboot/image-20211023132135536.png" alt="image-20211023132135536"></p><p><img src="/2022/02/18/springboot/image-20211023132614544.png" alt="image-20211023132614544"></p><p>可以在我们看到的Properties文件中，我们可以进行自动配置！</p><p>如果配置了自己的初始化方式，就会注册到 Bean 中生效，我们就可以在配置文件中配置日期的更新规则：</p><p><img src="/2022/02/18/springboot/image-20211023132835495.png" alt="image-20211023132835495"></p><p>剩下的不一一举例了，大家可以继续多研究一下！</p><h2><span id="修改-springboot-的默认配置">修改 SpringBoot 的默认配置</span></h2><p>这么多的自动配置，原理都是一样的，通过这个 WebMVC 的自动配置原理分析，我们要学会一种学习方式，通过源码，得出结论；这个结论一定是自己的，而且是一通百通。</p><p>SpringBoot 的自带，大量源于这些设计细节思想，所以，没必要读多源码！</p><p>SpringBoot 在自动配置很多组件的时候，先看容器没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；</p><p>如果每个组件都可以存在，比如我们的视图解析器，就可以将用户配置的和自己默认的组合起来！</p><p><strong>扩展使用SpringMVC</strong>  官方文档如下：</p><p>如果您想保留 Spring Boot MVC 功能并添加额外的 MVC 配置（拦截器、格式化程序、视图控制器和其他功能），您可以添加您自己的 WebMvcConfigurer 类型的 @Configuration 类，但不添加 @EnableWebMvc。如果您希望提供 RequestMappingHandlerMapping、RequestMappingHandlerAdapter 或 ExceptionHandlerExceptionResolver 的自定义实例，您可以声明一个 WebMvcRegistrationsAdapter 实例来提供此类组件。</p><p>我们做的就是写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能写包@EnableWebMvc注解；我们去写一个；我们新建一个叫config，写一个类MyvcConfig；</p><p>加入</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 浏览器发送/test ， 就会跳转到test页面；  </span>    registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/02/18/springboot/image-20211023133334975.png" alt="image-20211023133334975"></p><p><strong>所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p><p>我们可以去分析一下原理：</p><p>1、WebMvcAutoConfiguration是SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p><p>2、这个类上有一个注解，在做其他自动配置时会导入： @Import(EnableWebMvcConfiguration.class)</p><p><img src="/2022/02/18/springboot/image-20211023133634052.png" alt="image-20211023133634052"></p><p>3、我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration</p><p><img src="/2022/02/18/springboot/image-20211023133645805.png" alt="image-20211023133645805"></p><p>这个父类有这样一段代码：</p><p><img src="/2022/02/18/springboot/image-20211023133725701.png" alt="image-20211023133725701"></p><p>4、我们可以在这个类中去寻找一个我们刚刚设置的viewController当做参考，发现它调用了一个</p><p><img src="/2022/02/18/springboot/image-20211023134554796.png" alt="image-20211023134554796"></p><p>5、我们点进去看一下</p><p><img src="/2022/02/18/springboot/image-20211023134613846.png" alt="image-20211023134613846"></p><p>所以得出结论：所有的WebMvc配置都被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p><h1><span id="页面国际化">页面国际化</span></h1><p>有的时候，我们的网站会去涉及中英文甚至多语言的切换，这时候我们就需要学习国际化了！</p><h2><span id="准备工作">准备工作</span></h2><p>先在IDEA中统一设置properties的编码问题！</p><p><img src="/2022/02/18/springboot/image-20211023160120554.png" alt="image-20211023160120554"></p><p>编写国际化配置文件，抽取页面需要显示的国际化页面消息。我们可以去登录页面查看一下，哪些内容我们需要编写国际化的配置！</p><h2><span id="配置文件编写">配置文件编写</span></h2><p>1、我们在resources资源文件下新建一个i18n目录，存放国际化配置文件</p><p>2、建立一个login.properties文件，还有一个login_zh_CN.properties；发现IDEA自动识别了我们要做国际化操作；文件夹变了！</p><p><img src="/2022/02/18/springboot/image-20211023161355430.png" alt="image-20211023161355430"></p><p>3、我们可以在这上面去新建一个文件；</p><p><img src="/2022/02/18/springboot/image-20211023161425351.png" alt="image-20211023161425351"></p><p>弹出如下页面：我们再添加一个英文的；</p><p><img src="/2022/02/18/springboot/image-20211023161439243.png" alt="image-20211023161439243"></p><p>这样就快捷多了！</p><p><img src="/2022/02/18/springboot/image-20211023161454358.png" alt="image-20211023161454358"></p><p><strong>4、接下来，我们就来编写配置，我们可以看到idea下面有另外一个视图；</strong></p><p><img src="/2022/02/18/springboot/image-20211023161520542.png" alt="image-20211023161520542"></p><p>这个视图我们点击 + 号就可以直接添加属性了；我们新建一个login.tip，可以看到边上有三个文件框可以输入</p><p><img src="/2022/02/18/springboot/image-20211023161550279.png" alt="image-20211023161550279"></p><p>我们添加一下首页的内容！</p><p><img src="/2022/02/18/springboot/image-20211023161612154.png" alt="image-20211023161612154"></p><p>然后去查看我们的配置文件；</p><p>login.properties ：默认</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">login.btn</span><span class="token punctuation">=</span><span class="token attr-value">登录</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">记住我</span><span class="token attr-name">login.tip</span><span class="token punctuation">=</span><span class="token attr-value">请登录l</span><span class="token attr-name">ogin.username</span><span class="token punctuation">=</span><span class="token attr-value">用户名</span></code></pre><p>英文：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">login.btn</span><span class="token punctuation">=</span><span class="token attr-value">Sign in</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">Password</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">Remember </span><span class="token attr-name">melogin.tip</span><span class="token punctuation">=</span><span class="token attr-value">Please sign in</span><span class="token attr-name">login.username</span><span class="token punctuation">=</span><span class="token attr-value">Username</span></code></pre><p>中文：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">login.btn</span><span class="token punctuation">=</span><span class="token attr-value">登录</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">记住我</span><span class="token attr-name">login.tip</span><span class="token punctuation">=</span><span class="token attr-value">请登录</span><span class="token attr-name">login.username</span><span class="token punctuation">=</span><span class="token attr-value">用户名</span></code></pre><p>OK，配置文件步骤搞定！</p><h2><span id="配置文件生效探究">配置文件生效探究</span></h2><p>我们去看一下SpringBoot对国际化的自动配置！这里又涉及到一个类：MessageSourceAutoConfiguration</p><p>里面有一个方法，这里发现SpringBoot已经自动配置好了管理我们国际化资源文件的组件 ResourceBundleMessageSource；</p><p><img src="/2022/02/18/springboot/image-20211023162338858.png" alt="image-20211023162338858"></p><p>我们真实 的情况是放在了i18n目录下，所以我们要去配置这个messages的路径；</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token attr-value">i18n.login</span></code></pre><h2><span id="配置页面国际化值">配置页面国际化值</span></h2><p>去页面获取国际化的值，查看Thymeleaf的文档，找到message取值操作为：#{…}。我们去页面测试下：</p><p>IDEA还有提示，非常智能的！</p><p><img src="/2022/02/18/springboot/image-20211023164334946.png" alt="image-20211023164334946"></p><pre class=" language-HTML"><code class="language-HTML"><!DOCTYPE html><html lang="en" xmlns:th="http://www.thymeleaf.org">       <head>             <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">            <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">            <meta name="description" content>           <meta name="author" content>           <title>Signin Template for Bootstrap</title>            <!-- Bootstrap core CSS -->            <link th:href="@{/css/bootstrap.min.css}" rel="stylesheet">         <!-- Custom styles for this template -->              <link th:href="@{/css/signin.css}" rel="stylesheet">     </head>   <body class="text-center">     <form class="form-signin" action="dashboard.html">               <img class="mb-4" th:src="@{/img/bootstrap-solid.svg}" alt width="72" height="72">         <h1 class="h3 mb-3 font-weight-normal" th:text="#{login.tip}"><span id></span></h1>         <input type="text" class="form-control" th:placeholder="#{login.username}" required autofocus>             <input type="password" class="form-control" th:placeholder="#{login.password}" required>         <div class="checkbox mb-3">            <label>                    <input type="checkbox" value="remember-me">[[#{login.remember}]]          </label>           </div>              <button class="btn btn-lg btn-primary btn-block" type="submit">[[#{login.btn}]]</button>         <p class="mt-5 mb-3 text-muted">© 2017-2018</p>               <a class="btn btn-sm">中文</a>             <a class="btn btn-sm">English</a>      </form>     </body></html></code></pre><p>我们可以去启动项目，访问一下，发现已经自动识别为中文的了！</p><p><img src="/2022/02/18/springboot/image-20211023164410720.png" alt="image-20211023164410720"></p><p><strong>但是我们想要更好！可以根据按钮自动切换中文英文！</strong></p><h2><span id="配置国际化解析">配置国际化解析</span></h2><p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做LocaleResolver （获取区域信息对象）的解析器！</p><p>我们去我们webmvc自动配置文件，寻找一下！看到SpringBoot默认配置：</p><p><img src="/2022/02/18/springboot/image-20211023170257877.png" alt="image-20211023170257877"></p><p>AcceptHeaderLocaleResolver 这个类中有一个方法</p><p><img src="/2022/02/18/springboot/image-20211023170429459.png" alt="image-20211023170429459"></p><p>那假如我们现在想点击链接让我们的国际化资源生效，就需要让我们自己的Locale生效！</p><p>我们去自己写一个自己的LocaleResolver，可以在链接上携带区域信息！</p><p>修改一下前端页面的跳转连接</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这里传入参数不需要使用 ？使用 （key=value）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(l<span class="token punctuation">=</span><span class="token punctuation">'</span>zh_CN<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(l<span class="token punctuation">=</span><span class="token punctuation">'</span>en_US<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>我们去写一个处理的组件类！</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.config;import org.springframework.util.StringUtils;import org.springframework.web.servlet.LocaleResolver;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Locale;public class MyLocaleResolver implements LocaleResolver {      //    解析请求        @Override        public Locale resolveLocale(HttpServletRequest request) {        //        获取语言参数             String l = request.getParameter("l");        Locale locale = Locale.getDefault();        //如果没有就是用默认的        //       如果携带了国际化参数               if (StringUtils.hasText(l)) {            //      zh _ CN                  String[] split = l.split("_");            //            国家 地区                locale=new Locale(split[0], split[1]);        }               return locale;     }        @Override       public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {      }}</code></pre><p>为了让我们的区域化信息能够生效，我们需要再配置一下这个组件！在我们自己的MvcConofig下添加bean；</p><pre class=" language-JAVA"><code class="language-JAVA">@Beanpublic LocaleResolver localeResolver() {      return new MyLocaleResolver();}</code></pre><p><strong>我们重启项目，来访问一下，发现点击按钮可以实现成功切换！搞定收工！</strong></p><h1><span id="项目"></span></h1><h1><span id="整合jdbc">整合JDBC</span></h1><h2><span id="springdata简介">SpringData简介</span></h2><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p><p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p><p>Sping Data 官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></p><p>数据库相关的启动器 ：可以参考官方文档：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></p><h2><span id="整合jdbc">整合JDBC</span></h2><h3><span id="创建测试项目测试数据源">创建测试项目测试数据源</span></h3><p>1、我去新建一个项目测试：springboot-data-jdbc ; 引入相应的模块！基础模块</p><p><img src="/2022/02/18/springboot/image-20211028155751772.png" alt="image-20211028155751772"></p><p>2、项目建好之后，发现自动帮我们导入了如下的启动器：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3、编写yaml配置文件连接数据库；</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: 123456        url: jdbc:mysql://localhost:3306/mybatis?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai       driver-class-name: com.mysql.jdbc.Driver</code></pre><p>4、配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置；去测试类测试一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot04BataApplicationTests</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>       DataSource dataSource<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>       <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>                 connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>               throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：我们可以看到他默认给我们配置的数据源为 : class com.zaxxer.hikari.HikariDataSource ， 我们并没有手动配置</p><p>我们来全局搜索一下，找到数据源的所有自动配置都在 ：DataSourceAutoConfiguration文件：</p><p><img src="/2022/02/18/springboot/image-20211028174922181.png" alt="image-20211028174922181"></p><p>这里导入的类都在 DataSourceConfiguration 配置类下，可以看出 Spring Boot 2.2.5 默认使用HikariDataSource 数据源，而以前版本，如 Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</p><p><strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；</strong></p><p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong></p><p>关于数据源我们并不做介绍，有了数据库连接，显然就可以 CRUD 操作数据库了。但是我们需要先了解一个对象 JdbcTemplate</p><h2><span id="jdbctemplate">JDBCTemplate</span></h2><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p><p>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p><p>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p><p>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p><p>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul><h2><span id="测试">测试</span></h2><p>编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JdbcTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    查询数据库的所有信息</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"userList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maps<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into mybatis.user(id,name,pwd) value(6,'springbootdata','123')"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"add ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"updateUser/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update mybatis.user set name=?,pwd=? where id="</span><span class="token operator">+</span>id<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"789"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"deleteUser/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from mybatis.user where id=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试请求，结果正常；</p><p>到此，CURD的基本操作，使用 JDBC 就搞定了。</p><p><a href="code%5Cspringboot-04-data%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc">文件资源</a></p><h1><span id="整合druid">整合Druid</span></h1><h2><span id="集成druid">集成Druid</span></h2><h2><span id="druid简介">Druid简介</span></h2><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p><p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p><p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p><p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p><p><strong>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</strong></p><p><img src="/2022/02/18/springboot/image-20211028201720202.png" alt="image-20211028201720202"></p><p><img src="/2022/02/18/springboot/image-20211028201835997.png" alt="image-20211028201835997"></p><p><img src="/2022/02/18/springboot/image-20211028201850349.png" alt="image-20211028201850349"></p><h2><span id="配置数据源">配置数据源</span></h2><p>1、添加上 Druid 数据源依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、切换数据源；之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以 通过 spring.datasource.type 指定数据源。</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: 123456    url: jdbc:mysql://localhost:3306/mybatis?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai    driver-class-name: com.mysql.cj.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource </code></pre><p>3、数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；</p><p><img src="/2022/02/18/springboot/image-20211028202327774.png" alt="image-20211028202327774"></p><p>4、切换成功！既然切换成功，就可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: 123456    #?serverTimezone=UTC解决时区的报错    url: jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8    driver-class-name: com.mysql.cj.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource    #Spring Boot 默认是不注入这些属性值的，需要自己绑定    #druid 数据源专有配置    initialSize: 5    minIdle: 5    maxActive: 20    maxWait: 60000    timeBetweenEvictionRunsMillis: 60000    minEvictableIdleTimeMillis: 300000    validationQuery: SELECT 1 FROM DUAL    testWhileIdle: true    testOnBorrow: false    testOnReturn: false    poolPreparedStatements: true    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入    #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority    #则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j    filters: stat,wall,log4j    maxPoolPreparedStatementPerConnectionSize: 20    useGlobalDataSourceStat: true    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre><p>5、导入Log4j 的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>6、现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.config;import com.alibaba.druid.pool.DruidDataSource;import com.alibaba.druid.support.http.StatViewServlet;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.sql.DataSource;import java.util.HashMap;@Configurationpublic class DruidConfig {      @Bean       @ConfigurationProperties(prefix = "spring.datasource")      public DataSource druidDataSource() {           return new DruidDataSource();       }}</code></pre><p>7、去测试类中测试一下；看是否成功！</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc;import com.alibaba.druid.pool.DruidDataSource;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import javax.sql.DataSource;import java.sql.Connection;import java.sql.SQLException;@SpringBootTestclass Springboot04BataApplicationTests {        @Autowired      DataSource dataSource;     @Test       void contextLoads() throws SQLException {          Connection connection = null;          System.out.println(dataSource.getClass());          connection = dataSource.getConnection();           System.out.println(connection);              DruidDataSource druidDataSource = (DruidDataSource) dataSource;        System.out.println("druidDataSource 数据源最大连接数：" + druidDataSource.getMaxActive());        System.out.println("druidDataSource 数据源初始化连接数：" + druidDataSource.getInitialSize());        connection.close();      }}</code></pre><p>输出结果 ：可见配置参数已经生效！</p><p><img src="/2022/02/18/springboot/image-20211029191819107.png" alt="image-20211029191819107"></p><h2><span id="配置druid数据源监控">配置Druid数据源监控</span></h2><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p><p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p><pre class=" language-JAVA"><code class="language-JAVA">//配置 Druid 监控管理后台的Servlet；//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式@Beanpublic ServletRegistrationBean statViewServlet() {      ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), "/druid/*");     // 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet        // 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到     Map<string, string> initParams = new HashMap<>();      initParams.put("loginUsername", "admin");     //后台管理界面的登录账号        initParams.put("loginPassword", "123456");     //后台管理界面的登录密码       //后台允许谁可以访问     //initParams.put("allow", "localhost")：表示只有本机可以访问      //initParams.put("allow", "")：为空或者为null时，表示允许所有访问      initParams.put("allow", "");       //deny：Druid 后台拒绝谁访问        //initParams.put("kuangshen", "192.168.1.20");表示禁止此ip访问       //设置初始化参数        bean.setInitParameters(initParams);      return bean;}</string,></code></pre><p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src="/2022/02/18/springboot/image-20211029191946183.png" alt="image-20211029191946183"></p><p>进入之后</p><p><img src="/2022/02/18/springboot/image-20211029192007101.png" alt="image-20211029192007101"></p><p><strong>配置 Druid web 监控 filter 过滤器</strong></p><pre class=" language-JAVA"><code class="language-JAVA">//配置 Druid 监控 之  web 监控的 filter//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计@Beanpublic FilterRegistrationBean webStatFilter() {    FilterRegistrationBean bean = new FilterRegistrationBean();    bean.setFilter(new WebStatFilter());    //exclusions：设置哪些请求进行过滤排除掉，从而不进行统计    Map<string, string> initParams = new HashMap<>();    initParams.put("exclusions", "*.js,*.css,/druid/*,/jdbc/*");    bean.setInitParameters(initParams);    //"/*" 表示过滤所有请求    bean.setUrlPatterns(Arrays.asList("/*"));    return bean;}</string,></code></pre><p>平时在工作中，按需求进行配置即可，主要用作监控！</p><p><a href="code%5Cspringboot-04-data%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc">文件资源</a></p><h1><span id="整合mybatis">整合MyBatis</span></h1><p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><p>Maven仓库地址：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1">https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1</a></p><p><img src="/2022/02/18/springboot/image-20211029192220826.png" alt="image-20211029192220826"></p><h2><span id="整合测试">整合测试</span></h2><p>1、导入 MyBatis 所需要的依赖</p><pre class=" language-JAVA"><code class="language-JAVA"><dependency>       <groupid>org.mybatis.spring.boot</groupid>       <artifactid>mybatis-spring-boot-starter</artifactid>      <version>2.1.1</version></dependency></code></pre><p>2、配置数据库连接信息</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true">#整合mybatios</span><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.lpc.pojo</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mybatis/mappers/*.xml</span></code></pre><p><strong>3、测试数据库是否连接成功！</strong></p><p><strong>4、创建实体类，导入 Lombok！</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>     <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>5、创建mapper包以及对应的 Mapper 接口</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Mapper</span><span class="token comment" spellcheck="true">//表示这是个mybatis的mapper类，跟启动类加mapperscan一样</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       User <span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>6、对应的Mapper映射文件(注意位置要和配置文件一致)</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lpc.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user(id,name,pwd)values (#{id},#{name},#{pwd})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set name=#{name},pwd=#{pwd} where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from user where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p><strong>8、编写部门的Controller 进行测试！</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/userList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">user</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"虚拟鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"011"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"add ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"updateUser/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"咖啡猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"deleteUser/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>启动项目访问进行测试！</strong></p><p><a href="code%5Cspringboot-05-mybatis%5Csrc%5Cmain">文件资源</a></p><h1><span id="集成springsecurity">集成SpringSecurity</span></h1><h2><span id="安全简介">安全简介</span></h2><p>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p><p>市面上存在比较有名的：Shiro，Spring Security ！</p><p>这里需要阐述一下的是，每一个框架的出现都是为了解决某一问题而产生了，那么Spring Security框架的出现是为了解决什么问题呢？</p><p>首先我们看下它的官网介绍：Spring Security官网地址</p><pre><code>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirementsSpring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准。Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</code></pre><p>从官网的介绍中可以知道这是一个权限框架。想我们之前做项目是没有使用框架是怎么控制权限的？对于权限 一般会细分为功能权限，访问权限，和菜单权限。代码会写的非常的繁琐，冗余。</p><p>怎么解决之前写权限代码繁琐，冗余的问题，一些主流框架就应运而生而Spring Scecurity就是其中的一种。</p><p>Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p><p>对于上面提到的两种应用情景，Spring Security 框架都有很好的支持。在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</p><h2><span id="实战测试">实战测试</span></h2><h3><span id="实验环境搭建">实验环境搭建</span></h3><p>1、新建一个初始的springboot项目web模块，thymeleaf模块</p><p>2、导入<a href="springBoot-security%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90">静态资源</a></p><p>3、controller跳转！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouterController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"/index"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level1/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level1/"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level2/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level2/"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level3/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level3/"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、测试实验环境是否OK！</p><h3><span id="认识springsecurity">认识SpringSecurity</span></h3><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p><p>记住几个类：</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p><p><strong>“认证”（Authentication）</strong></p><p>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。</p><p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p><p> <strong>“授权” （Authorization）</strong></p><p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p><p>这个概念是通用的，而不是只在Spring Security 中存在。</p><h3><span id="认证和授权">认证和授权</span></h3><p>目前，我们的测试环境，是谁都可以访问的，我们使用 Spring Security 增加上认证和授权的功能</p><p>1、引入 Spring Security 模块</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、编写 Spring Security 配置类</p><p>参考官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a> </p><p>查看我们自己项目中的版本，找到对应的帮助文档：</p><p><a href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5">https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5</a></p><p>3、编写基础配置类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>config<span class="token punctuation">;</span>gframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>HttpSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>EnableWebSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>WebSecurityConfigurerAdapter<span class="token punctuation">;</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>4、定制请求的授权规则</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//授权</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//首页所有人可以访问，功能页对有权限的人可以访问</span><span class="token comment" spellcheck="true">//        授权规则</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level1/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level2/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level3/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>                <span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>5、测试一下：发现除了首页都进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</p><p>6、在configure()方法中加入以下配置，开启自动配置的登录功能！</p><pre><code>// 开启自动配置的登录功能// /login 请求来到登录页// /login?error 重定向到这里表示登录失败http.formLogin();</code></pre><p>7、测试一下：发现，没有权限的时候，会跳转到登录的页面！</p><p><img src="/2022/02/18/springboot/image-20211104212100417.png" alt="image-20211104212100417"></p><p>8、查看刚才登录页的注释信息；</p><p>我们可以定义认证规则，重写configure(AuthenticationManagerBuilder auth)方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义认证规则</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//在内存中定义，也可以在jdbc中去拿....</span>   auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"kuangshen"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>9、测试，我们可以使用这些账号登录进行测试！发现会报错！</p><p>There is no PasswordEncoder mapped for the id “null”</p><p>10、原因，我们要将前端传过来的密码进行某种方式加密，否则就无法登录，修改代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义认证规则</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//在内存中定义，也可以在jdbc中去拿....</span>   <span class="token comment" spellcheck="true">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span>   <span class="token comment" spellcheck="true">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span>   <span class="token comment" spellcheck="true">//spring security 官方推荐的是使用bcrypt加密方式。</span>      auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"kuangshen"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>11、测试，发现，登录成功，并且每个角色只能访问自己认证下的规则！搞定</p><h3><span id="权限控制和注销">权限控制和注销</span></h3><p>1、开启自动配置的注销的功能</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制请求的授权规则</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//....</span>   <span class="token comment" spellcheck="true">//开启自动配置的注销的功能</span>      <span class="token comment" spellcheck="true">// /logout 注销请求</span>   http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、我们在前端，增加一个注销的按钮，index.html 导航栏中</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--注销--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/logout}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign-out icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>3、我们可以去测试一下，登录成功后点击注销，发现注销完毕会跳转到登录页面！</p><p>4、但是，我们想让他注销成功后，依旧可以跳转到首页，该怎么处理呢？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//          注销</span>http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5、测试，注销完毕后，发现跳转到首页OK</p><p>6、我们现在又来一个需求：用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如kuangshen这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示！这个就是真实的网站情况了！该如何做呢？</p><p>我们需要结合thymeleaf中的一些功能</p><p>sec：authorize=”isAuthenticated()”:是否认证登录！来显示不同的页面</p><p>Maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity4 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-springsecurity5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>7、修改我们的 前端页面</p><ol><li><p>导入命名空间</p></li><li><pre class=" language-html"><code class="language-html">xmlns:sec=http://www.thymeleaf.org/extras/spring-security</code></pre></li></ol><p>​       修改导航栏，增加认证判断</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--登录注销--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--未登录显示登陆--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address card icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 登录        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--登录了显示名字--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>principal.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            角色:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>principal.authorities<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--登录了显示注销--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/logout}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign-out icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 注销        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>8、重启测试，我们可以登录试试看，登录成功后确实，显示了我们想要的页面；</p><p>9、如果注销404了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能；我们试试：在 配置中增加 <code>http.csrf().disable();</code></p><pre class=" language-java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span></code></pre><p>10、我们继续将下面的角色功能块认证完成！(不同权限不同功能)</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>vip1<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>vip2<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>vip3<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>11、测试一下！</p><p>12、权限控制和注销搞定！</p><h3><span id="记住我">记住我</span></h3><p>现在的情况，我们只要登录之后，关闭浏览器，再登录，就会让我们重新登录，但是很多网站的情况，就是有一个记住密码的功能，这个该如何实现呢？很简单</p><p>1、开启记住我功能</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//记住我</span>http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、我们再次启动项目测试一下，发现登录页多了一个记住我功能，我们登录之后关闭 浏览器，然后重新打开浏览器访问，发现用户依旧存在！</p><p>思考：如何实现的呢？其实非常简单</p><p>我们可以查看浏览器的cookie</p><p><img src="/2022/02/18/springboot/image-20211106143307217.png" alt="image-20211106143307217"></p><p>3、我们点击注销的时候，可以发现，spring security 帮我们自动删除了这个 cookie</p><p>4、结论：登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie，具体的原理我们在JavaWeb阶段都讲过了，这里就不在多说了！</p><p><img src="/2022/02/18/springboot/image-20211106143420337.png" alt="image-20211106143420337"></p><h3><span id="定制登录页">定制登录页</span></h3><p>现在这个登录页面都是spring security 默认的，怎么样可以使用我们自己写的Login界面呢？</p><p>1、在刚才的登录页配置后面指定 loginpage</p><pre class=" language-java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、然后前端需要指向我们自己定义的请求</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address card icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>3、我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，方式必须为post:</p><p>在 loginPage()源码中的注释上有写明：</p><p>4、这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码！我们配置接收登录的用户名和密码的参数！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    定制登录页loginPage 登录处理地址loginProcessingUrl</span><span class="token comment" spellcheck="true">//    usernameParameter，passwordParameter制定前台的name</span>   http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5、在登录页增加记住我的多选框</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 记住我</code></pre><p>6、后端验证处理！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制记住我的参数！</span>http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rememberMeParameter</span><span class="token punctuation">(</span><span class="token string">"remember"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>7、测试，OK</p><h2><span id="完整配置代码">完整配置代码</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>AuthenticationManagerBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>HttpSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>EnableWebSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>WebSecurityConfigurerAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span>BCryptPasswordEncoder<span class="token punctuation">;</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//定义认证规则</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//在内存中定义，也可以在jdbc中去拿....</span>       <span class="token comment" spellcheck="true">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span>       <span class="token comment" spellcheck="true">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span>       <span class="token comment" spellcheck="true">//spring security 官方推荐的是使用bcrypt加密方式。</span>      auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"kuangshen"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"vip3"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span> <span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"vip3"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//定制请求的授权规则</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 首页所有人可以访问，功能页对有权限的人可以访问</span>    <span class="token comment" spellcheck="true">//        授权规则</span>    http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level1/**"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level2/**"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level3/**"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//开启自动配置的登录功能：如果没有权限，就会跳转到登录页面！</span>           <span class="token comment" spellcheck="true">// /login 请求来到登录页</span>           <span class="token comment" spellcheck="true">// /login?error 重定向到这里表示登录失败</span>    http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 关闭csrf功：能跨站请求伪造,默认只能通过post方式提交logout请求</span>    http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//        开启记住我功能</span>    http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rememberMeParameter</span><span class="token punctuation">(</span><span class="token string">"remember"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//开启自动配置的注销的功能</span>           <span class="token comment" spellcheck="true">// /logout 注销请求</span>           <span class="token comment" spellcheck="true">// .logoutSuccessUrl("/"); 注销成功来到首页</span>    http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="code%5Cspringboot-06-security%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc">文件资源</a></p><h1><span id="shiro">shiro</span></h1><h2><span id="简介">简介</span></h2><p>Apache Shiro是一个强大且易用的Java安全框架</p><p>可以完成身份验证、授权、密码和会话管理</p><p>Shiro 不仅可以用在 JavaSE 环境中，也可以用在 JavaEE 环境中</p><p>官网： <a href="http://shiro.apache.org/">http://shiro.apache.org/</a></p><h2><span id="功能">功能</span></h2><p><img src="/2022/02/18/springboot/image-20211106152158827.png" alt="image-20211106152158827"></p><p><strong>Authentication</strong>：身份认证/登录，验证用户是不是拥有相应的身份；</p><p><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</p><p><strong>Session Manager</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</p><p><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</p><p><strong>Web Support</strong>：Web支持，可以非常容易的集成到Web环境；</p><p><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</p><p><strong>Concurrency</strong>：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</p><p><strong>Testing</strong>：提供测试支持；</p><p><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</p><p><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</p><h2><span id="shiro架构外部">Shiro架构(外部)</span></h2><p>从外部来看Shiro，即从应用程序角度的来观察如何使用Shiro完成工作</p><p><img src="/2022/02/18/springboot/image-20211106152455126.png" alt="image-20211106152455126"></p><ul><li>Subject：应用代码直接交互的对象是Subject，也就是说Shiro的对外API 核心就是Subject。Subject 代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；与Subject 的所有交互都会委托给SecurityManager；Subject 其实是一个门面，SecurityManager才是实际的执行者</li><li>SecurityManager：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且其管理着所有Subject；可以看出它是Shiro的核心，它负责与Shiro的其他组件进行交互，它相当于SpringMVC中DispatcherServlet的角色</li><li>Realm：域，Shiro从Realm 获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm 得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm 看成DataSource</li></ul><p>也就是说对于我们而言，最简单的一个Shiro应用：</p><p>应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；</p><p>我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。</p><p>从以上也可以看出，Shiro不提供维护用户/权限，而是通过Realm让开发人员自己注入</p><h2><span id="shiro架构内部">Shiro架构(内部)</span></h2><p><img src="/2022/02/18/springboot/image-20211106152818100.png" alt="image-20211106152818100"></p><ul><li><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的“用户”；</li><li><strong>SecurityManager</strong>：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。</li><li><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li><li><strong>Authrizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li><strong>Realm</strong>：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；</li><li><strong>SessionManager</strong>：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；</li><li><strong>SessionDAO</strong>：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</li><li><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</li><li><strong>Cryptography</strong>：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密的</li></ul><h2><span id="认证流程">认证流程</span></h2><p><img src="/2022/02/18/springboot/image-20211106153019138.png" alt="image-20211106153019138"></p><p><strong>用户</strong> 提交 <strong>身份信息、凭证信息</strong> 封装成 <strong>令牌</strong> 交由 <strong>安全管理器</strong> 认证</p><h2><span id="hello-world官方快速入门">Hello World(官方快速入门)</span></h2><ul><li>查看官方文档：<a href="http://shiro.apache.org/tutorial.html">http://shiro.apache.org/tutorial.html</a></li><li>官方的quickstart : <a href="https://github.com/apache/shiro/tree/master/samples/quickstart/">https://github.com/apache/shiro/tree/master/samples/quickstart/</a></li></ul><p><img src="/2022/02/18/springboot/image-20211106153507658.png" alt="image-20211106153507658"></p><ol><li><p>创建一个maven父工程，用来学习Shiro,删掉不必要的部分</p></li><li><p>创建一个普通的Maven子工程：hell-shiro</p></li><li><p>根据<a href="https://github.com/apache/shiro/blob/master/samples/quickstart/pom.xml">官方文档</a>，我们导入Shiro的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- configure logging --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jcl-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.29<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.29<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>相关配置文件</p><ol><li><p>log4j.properties——<a href="https://github.com/apache/shiro/blob/master/samples/quickstart/src/main/resources/log4j.properties">官网</a></p></li><li><p>shiro.ini——<a href="https://github.com/apache/shiro/blob/master/samples/quickstart/src/main/resources/shiro.ini">官网</a></p></li><li><p>启动类 Quickstart——<a href="https://github.com/apache/shiro/blob/master/samples/quickstart/src/main/java/Quickstart.java">官网</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>SecurityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IniSecurityManagerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>Subject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Factory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quickstart</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Quickstart<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Factory<span class="token operator">&lt;</span>SecurityManager<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SecurityManager securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//        获取当前用户对象subject</span>    Subject currentUser <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//        通过当前用户拿到session</span>    Session session <span class="token operator">=</span> currentUser<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"someKey"</span><span class="token punctuation">,</span> <span class="token string">"aValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"someKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"aValue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Retrieved the correct value! ["</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    判断当前用户是否被认证</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentUser<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//      token 令牌</span>      UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"lonestarr"</span><span class="token punctuation">,</span> <span class="token string">"vespa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//      设置记住我</span>      token<span class="token punctuation">.</span><span class="token function">setRememberMe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//        执行了登录操作</span>        currentUser<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> uae<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"There is no user with username of "</span> <span class="token operator">+</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> ice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Password for account "</span> <span class="token operator">+</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" was incorrect!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LockedAccountException</span> lae<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>            <span class="token string">"The account for username "</span>                <span class="token operator">+</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token string">" is locked.  "</span>                <span class="token operator">+</span> <span class="token string">"Please contact your administrator to unlock it."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// ... catch more exceptions here (maybe custom ones specific to your application?</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ae<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// unexpected condition?  error?</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// say who they are:</span>    <span class="token comment" spellcheck="true">// print their identifying principal (in this case, a username):</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"User ["</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] logged in successfully."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// test a role:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"schwartz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"May the Schwartz be with you!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello, mere mortal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 粗粒度的权限</span>    <span class="token comment" spellcheck="true">// test a typed permission (not instance-level)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"lightsaber:wield"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"You may use a lightsaber ring.  Use it wisely."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Sorry, lightsaber rings are for schwartz masters only."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 细粒度的权限</span>    <span class="token comment" spellcheck="true">// a (very powerful) Instance Level permission:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"winnebago:drive:eagle5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>          <span class="token string">"You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  "</span>              <span class="token operator">+</span> <span class="token string">"Here are the keys - have fun!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Sorry, you aren't allowed to drive the 'eagle5' winnebago!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// all done - log out!</span>    currentUser<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/02/18/springboot/image-20211106164847819.png" alt="image-20211106164847819"></p></li><li><p>Spring Security都有~（只是换了个名字）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取当前的用户对象 Subject</span>Subject currentUser <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Session session <span class="token operator">=</span> currentUser<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>currentUser<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    currentUser<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    currentUser<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"schwartz"</span><span class="token punctuation">)</span>    currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"lightsaber:wield"</span><span class="token punctuation">)</span>    currentUser<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="code%5Cspringboot-08-shiro%5Chello-shiro%5Csrc%5Cmain%5Cjava">文件资源</a></p></li></ol></li></ol><h2><span id="springboot整合shiro环境搭建">SpringBoot整合Shiro环境搭建</span></h2><ol><li><p>新建一个项目或模块，勾选依赖</p><p><img src="/2022/02/18/springboot/image-20211106171202921.png" alt="image-20211106171202921"></p></li><li><p>测试环境是否正常</p><ol><li><p>新建一个controller页面</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LPC * @version 1.0 * @date 6/11/2021 下午 5:14 */</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/index"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">toIndex</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello shiro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"user/add"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"user/update"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>新建一个index.html页面</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/add}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/update}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>新建一个add.html页面</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>新建一个update.html页面</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>项目结构</p><p><img src="/2022/02/18/springboot/image-20211106172508795.png" alt="image-20211106172508795"></p></li><li><p>运行截图</p><p><img src="/2022/02/18/springboot/image-20211106172645749.png" alt="image-20211106172645749"></p></li></ol></li><li><p>导入shiro整合spring的包——<a href="https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring">官网</a>,查看最新版本</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--      Subject  用户      SecurityManager 管理所有用户      Realm 连接数据库--></span><span class="token comment" spellcheck="true">&lt;!--shiro整合spring的包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写导入配置类</p><ol><li><p>编写一个自定义类UserRealm</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.config;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;/** * @author LPC * @version 1.0 * @date 6/11/2021 下午 5:51 */// 自定义的Realmpublic class UserRealm extends AuthorizingRealm {    // 授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {        System.out.println("执行了=>授权doGetAuthorizationInfo");        return null;    }    // 认证    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken)        throws AuthenticationException {        System.out.println("执行了=>认证doGetAuthorizationInfo");        return null;    }}</code></pre></li><li><p>编写配置ShiroConfig</p><ol><li>创建realm对象，需要自定义类</li><li>DefaultWebSecurityManager</li><li>ShiroFilterFactoryBean</li></ol><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.config;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class ShiroConfig {  //    ShiroFilterFactoryBean 3  @Bean  public ShiroFilterFactoryBean getDefaultWebSecurityManager(      @Qualifier("DefaultWebSecurityManager")          DefaultWebSecurityManager defaultWebSecurityManager) {    ShiroFilterFactoryBean factoryBean = new ShiroFilterFactoryBean();    // 设置安全管理器    factoryBean.setSecurityManager(defaultWebSecurityManager);    return factoryBean;  }  //    DefaultWebSecurityManager 2  @Bean(name = "DefaultWebSecurityManager")  public DefaultWebSecurityManager getDefaultWebSecurityManager(      @Qualifier("userRealm") UserRealm userRealm) {    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();    //    关联UserRealm    securityManager.setRealm(userRealm);    return securityManager;  }  //    Realm 1  @Bean  public UserRealm userRealm() {    return new UserRealm();  }}</code></pre></li></ol></li></ol><h2><span id="shiro实现登录拦截">Shiro实现登录拦截</span></h2><ul><li><p>在<code>ShiroConfig</code>中的<code>getShiroFilterFactoryBean</code>方法中添加如下配置</p><ul><li><p>anon： 无需认证就可以访问</p></li><li><p>authc： 必须认证了才能访问</p></li><li><p>user： 必须拥有记住我功能才能用</p></li><li><p>perms： 拥有对某个资源的权限才能访问</p></li><li><p>role： 拥有某个角色权限</p><p>在默认的web安全管理中心加入过滤器</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>factoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>点击首页的add或者update之后</p><p><img src="/2022/02/18/springboot/image-20211106193821939.png" alt="image-20211106193821939"></p></li><li><p>添加拦截成功页面</p><ul><li><p>登录页面login.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/toLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密 码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>在MyController中添加</p><pre><code>@RequestMapping("/toLogin")public String toLogin() {    return "login";}</code></pre></li><li><p>在<code>ShiroConfig</code>中的<code>getShiroFilterFactoryBean</code>方法中添加如下配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    设置登录的请求</span>factoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>拦截成功跳转到登录页面</p><p><img src="/2022/02/18/springboot/image-20211106194122338.png" alt="image-20211106194122338"></p></li></ul><h2><span id="shiro实现用户认证">Shiro实现用户认证</span></h2><ol><li><p>在<code>MyController</code>中编写用户提交表单之后处理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//    获取当前用户</span>  Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    封装用户的登录数据</span>  UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"用户名错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>login.html的修改</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/login}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密 码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>用户输入登录信息</p><ol><li><p>页面</p><p><img src="/2022/02/18/springboot/image-20211107151141053.png" alt="image-20211107151141053"></p></li><li><p>控制台</p><p><img src="/2022/02/18/springboot/image-20211107151150066.png" alt="image-20211107151150066"></p></li></ol></li><li><p>用户认证编写<code>UserRealm</code>中的认证（doGetAuthenticationInfo）</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 认证</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span>      <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了=>认证doGetAuthorizationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    UsernamePasswordToken userToken <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span> authenticationToken<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    账号认证</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userToken<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抛出UnknownAccountException</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    密码认证</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>账号：root，密码：123456 可以登录</p></li></ol><h2><span id="shiro整合mybatis">Shiro整合Mybatis</span></h2><ol><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入mybatis，这是MyBatis官方提供的适配spring Boot的，而不是spring Boot自己的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件application.yml的编写</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: admin    #?serverTimezone=UTC解决时区的报错    url: jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8    driver-class-name: com.mysql.cj.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource    #Spring Boot 默认是不注入这些属性值的，需要自己绑定    #druid 数据源专有配置    initialSize: 5    minIdle: 5    maxActive: 20    maxWait: 60000    timeBetweenEvictionRunsMillis: 60000    minEvictableIdleTimeMillis: 300000    validationQuery: SELECT 1 FROM DUAL    testWhileIdle: true    testOnBorrow: false    testOnReturn: false    poolPreparedStatements: true    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入    #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority    #则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j    filters: stat,wall,log4j    maxPoolPreparedStatementPerConnectionSize: 20    useGlobalDataSourceStat: true    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500    mybatis:  type-aliases-package: nuc.ss.pojo  mapper-locations: classpath:mapper/*.xml</code></pre></li><li><p>User类的编写</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>UserMapper.xml映射</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lpc.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user where name = #{name};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>UserService接口实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>UserServiceImpl业务逻辑</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试环境</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ShiroSpringbootApplicationTests</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span><span class="token string">"狂神"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/02/18/springboot/image-20211107154004392.png" alt="image-20211107154004392"></p></li><li><p><code>UserRealm</code>连接真实数据库</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 认证</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span>    <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了=>认证doGetAuthorizationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UsernamePasswordToken userToken <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span> authenticationToken<span class="token punctuation">;</span>  User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>userToken<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    账号认证</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//没有用户</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抛出 UnknownAccountException</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//    密码认证</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>现在关联了数据库，数据库有的都可以登录了</strong></p></li><li><p>断点测试密码加密类型，默认是<code>SimpleCredentialsMatcher</code>加密</p><p><img src="/2022/02/18/springboot/image-20211107155815528.png" alt="image-20211107155815528"></p><p>MD5加密——<a href="http://tool.chinaz.com/tools/md5.aspx">测试</a></p><p>123456——E10ADC3949BA59ABBE56E057F20F883E</p><p>MD5盐值加密</p><p>所有加密</p><p><img src="/2022/02/18/springboot/image-20211107155927310.png" alt="image-20211107155927310"></p></li></ol><h2><span id="shiro实现用户授权">Shiro实现用户授权</span></h2><ol><li><p><code>ShiroConfig</code>中的<code>getShiroFilterFactoryBean</code>方法添加认证代码</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*     * anon:无需认证就可访问     * authc：必须认证     * user：必须拥有 记住我 功能才能用     * perms： 拥有对某个资源的权限才能访问     * role： 拥有某个角色才能访问     * */</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//授权，正常情况下，没有授权会跳转到未授权页面</span>filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span><span class="token string">"perms[user:add]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">,</span><span class="token string">"perms[user:update]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>登录之后点击add按钮会弹出如下页面</p><p><img src="/2022/02/18/springboot/image-20211107162055857.png" alt="image-20211107162055857"></p></li><li><p>添加为授权页面</p><ol><li><p>MyController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/noauto"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">unauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"未经授权，无法访问此页面"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>ShiroConfig</code>中的<code>getShiroFilterFactoryBean</code>方法中添加</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//未授权页面</span>bean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/noauto"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li><li><p>再次测试</p><p><img src="/2022/02/18/springboot/image-20211107163525879.png" alt="image-20211107163525879"></p><p>所以需要在UserRealm中为用户进行真正授权</p></li><li><p>UserRealm类的修改</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 授权</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了=>授权doGetAuthorizationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  SimpleAuthorizationInfo info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    拿到当前登录的这个对象</span>  Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User currentUser <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> subject<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到user对象</span>  <span class="token comment" spellcheck="true">//    设置当前用户的权限(数据库中的权限)</span>  info<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">getPerms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/02/18/springboot/image-20211107220244180.png" alt="image-20211107220244180"></p></li><li><p>再次测试</p><p>root可以访问update，不能访问add</p><p>kuangshen可以访问add，不能访问update</p></li></ol><h2><span id="shiro整合thymeleaf">Shiro整合Thymeleaf</span></h2><ol><li><p>shiro-thymeleaf整合包导入——<a href="https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro">官网</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--shiro-thymeleaf整合--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在ShiroConfig中整合ShiroDialect</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 整合ShiroDialect： 用来整合 Shiro thymeleaf</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ShiroDialect <span class="token function">getShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>index.html页面</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/add}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        |        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/update}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><p><img src="/2022/02/18/springboot/image-20211107224215125.png" alt="image-20211107224215125"></p><p><img src="/2022/02/18/springboot/image-20211107224235238.png" alt="image-20211107224235238"></p><p><a href="code%5Cspringboot-08-shiro%5Cshiro-springboot%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc">文件资源</a></p><h1><span id="集成swagger">集成Swagger</span></h1><h2><span id="swagger简介">Swagger简介</span></h2><p><strong>前后端分离</strong></p><ul><li>前端 -&gt; 前端控制层、视图层</li><li>后端 -&gt; 后端控制层、服务层、数据访问层</li><li>前后端通过API进行交互</li><li>前后端相对独立且松耦合</li></ul><p><strong>产生的问题</strong></p><ul><li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li></ul><p><strong>解决方案</strong></p><ul><li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险</li></ul><p><strong>Swagger</strong></p><ul><li>号称世界上最流行的API框架</li><li>Restful Api 文档在线自动生成器 =&gt; <strong>API 文档 与API 定义同步更新</strong></li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><h2><span id="springboot集成swagger">SpringBoot集成Swagger</span></h2><p><strong>SpringBoot集成Swagger</strong> =&gt; <strong>springfox</strong>，两个jar包</p><ul><li><strong>Springfox-swagger2</strong></li><li>swagger-springmvc</li></ul><p><strong>使用Swagger</strong></p><p>要求：jdk 1.8 + 否则swagger2无法运行</p><p>步骤：</p><ol><li><p>新建一个SpringBoot-web项目</p></li><li><p>添加Maven依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写HelloController，测试确保运行成功！</p></li><li><p>要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 8/11/2021 下午 8:38 * @describe: * @vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token comment" spellcheck="true">//开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面；</p><p><img src="/2022/02/18/springboot/image-20211108204107328.png" alt="image-20211108204107328"></p></li></ol><h2><span id="配置swagger">配置Swagger</span></h2><ol><li><p>Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//配置docket以配置Swagger具体参数</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>可以通过apiInfo()属性配置文档信息</p><pre class=" language-JAVA"><code class="language-JAVA">//配置文档信息private ApiInfo apiInfo() {   Contact contact = new Contact("联系人名字", "http://xxx.xxx.com/联系人访问链接", "联系人邮箱");   return new ApiInfo(           "Swagger学习", // 标题           "学习演示如何配置Swagger", // 描述           "v1.0", // 版本           "http://terms.service.url/组织链接", // 组织链接           contact, // 联系人信息           "Apach 2.0 许可", // 许可           "许可链接", // 许可连接           new ArrayList<>()// 扩展  );}</code></pre></li><li><p>Docket 实例关联上 apiInfo()</p><pre class=" language-JAVA"><code class="language-JAVA">@Beanpublic Docket docket() {   return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());}</code></pre></li><li><p>重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>  看下效果；</p></li></ol><h2><span id="配置扫描接口">配置扫描接口</span></h2><ol><li><p>构建Docket时通过select()方法配置怎么扫描接口。</p><pre class=" language-JAVA"><code class="language-JAVA">@Beanpublic Docket docket() {   return new Docket(DocumentationType.SWAGGER_2)      .apiInfo(apiInfo())      .select()// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口      .apis(RequestHandlerSelectors.basePackage("com.lpc.controller"))      .build();}</code></pre></li><li><p>重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p></li><li><p>除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p><pre class=" language-java"><code class="language-java"><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 扫描所有，项目中的所有接口都会被扫描到</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不扫描接口</span><span class="token comment" spellcheck="true">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotation<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><span class="token function">withClassAnnotation</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotation<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根据包路径扫描接口</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token keyword">final</span> String basePackage<span class="token punctuation">)</span> </code></pre></li><li><p>除此之外，我们还可以配置接口扫描过滤：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>      <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.lpccontroller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 配置如何通过path过滤,即这里只扫描请求以/lpc开头的接口</span>      <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/lpc/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>这里的可选值还有</p><pre class=" language-java"><code class="language-java"><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 任何请求都扫描</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 任何请求都不扫描</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token keyword">final</span> String pathRegex<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过正则表达式控制</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token keyword">final</span> String antPattern<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过ant()控制</span></code></pre></li></ol><h2><span id="配置swagger开关">配置Swagger开关</span></h2><ol><li><p>通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span>             <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>      <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.lpc.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 配置如何通过path过滤,即这里只扫描请求以/lpc开头的接口</span>      <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/lpc/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 设置要显示swagger的环境</span>   Profiles of <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 判断当前是否处于该环境</span>   <span class="token comment" spellcheck="true">// 通过 enable() 接收此参数判断是否要显示</span>   <span class="token keyword">boolean</span> b <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>of<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span>      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>      <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.lpc.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 配置如何通过path过滤,即这里只扫描请求以/lpc开头的接口</span>      <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/lpc/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>可以在项目中增加一个dev的配置文件查看效果！</p><p><img src="/2022/02/18/springboot/image-20211108212911822.png" alt="image-20211108212911822"></p><p><img src="/2022/02/18/springboot/image-20211108212921552.png" alt="image-20211108212921552"></p><p><img src="/2022/02/18/springboot/image-20211108212948313.png" alt="image-20211108212948313"></p><p><img src="/2022/02/18/springboot/image-20211108212959551.png" alt="image-20211108212959551"></p></li></ol><h2><span id="配置api分组">配置API分组</span></h2><ol><li><p>如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 配置分组</span>       <span class="token comment" spellcheck="true">// 省略配置....</span><span class="token punctuation">}</span></code></pre></li><li><p>重启项目查看分组</p><p><img src="/2022/02/18/springboot/image-20211109141348783.png" alt="image-20211109141348783"></p></li><li><p>如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>重启项目查看即可</p><p><img src="/2022/02/18/springboot/image-20211109141549898.png" alt="image-20211109141549898"></p></li></ol><h2><span id="实体配置">实体配置</span></h2><p>1、新建一个实体类</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.pojo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;/** * @author: lpc * @date: 9/11/2021 下午 2:17 * @describe: * @vision */@ApiModel("用户实体类")public class User {    @ApiModelProperty("用户名")    public String username;    @ApiModelProperty("密码")    public String password;}</code></pre><p>2、只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p><pre class=" language-JAVA"><code class="language-JAVA">@PostMapping("user")public User user() {    return new User();}</code></pre><p>3、重启查看测试</p><p><img src="/2022/02/18/springboot/image-20211109142906379.png" alt="image-20211109142906379"></p><p>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p><p>@ApiModel为类添加注释</p><p>@ApiModelProperty为类属性添加注释</p><h2><span id="常用注解">常用注解</span></h2><p>Swagger的所有注解定义在io.swagger.annotations包下</p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags = “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td><td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>我们也可以给请求的接口配置一些注释</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"hello接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对类进行描述</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello控制类"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/02/18/springboot/image-20211109143852582.png" alt="image-20211109143852582"></p><p><img src="/2022/02/18/springboot/image-20211109143828753.png" alt="image-20211109143828753"></p><hr><p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p><p>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p><p>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在<strong>正式环境要记得关闭Swagger</strong>，一来出于安全考虑二来也可以节省运行时内存。</p><h2><span id="拓展其他皮肤">拓展：其他皮肤</span></h2><p>我们可以导入不同的包实现不同的皮肤定义：</p><p>1、默认的  <strong>访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong></p><pre class=" language-XML"><code class="language-XML"><dependency>   <groupid>io.springfox</groupid>   <artifactid>springfox-swagger-ui</artifactid>   <version>2.9.2</version></dependency></code></pre><p><img src="/2022/02/18/springboot/image-20211109145453496.png" alt="image-20211109145453496"></p><p>2、bootstrap-ui  <strong>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></strong></p><pre class=" language-XML"><code class="language-XML"><!-- 引入swagger-bootstrap-ui包 /doc.html--><dependency>   <groupid>com.github.xiaoymin</groupid>   <artifactid>swagger-bootstrap-ui</artifactid>   <version>1.9.1</version></dependency></code></pre><p><img src="/2022/02/18/springboot/image-20211109145619762.png" alt="image-20211109145619762"></p><p>3、mg-ui  <strong>访问 <a href="http://localhost:8080/document.html">http://localhost:8080/document.html</a></strong></p><pre class=" language-XML"><code class="language-XML"><!-- 引入swagger-ui-layer包 /document.html--><dependency>   <groupid>com.zyplayer</groupid>   <artifactid>swagger-mg-ui</artifactid>   <version>1.0.6</version></dependency></code></pre><p><img src="/2022/02/18/springboot/image-20211109145956713.png" alt="image-20211109145956713"></p><p><a href="code%5Cswagger-demo%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc%5Cconfig">文件资源</a></p><h1><span id="异步-定时-邮件任务">异步、定时、邮件任务</span></h1><h2><span id="异步任务">异步任务</span></h2><p><a href="code%5Cspringboot-09-test">新建项目</a></p><p>1、创建一个service包</p><p>2、创建一个类AsyncService</p><p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p><p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Async<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 9/11/2021 下午 3:26 * @describe: * @vision */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据正在处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、编写controller包</p><p>4、编写AsyncController类</p><p>我们去写一个Controller测试一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AsyncService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 9/11/2021 下午 3:27 * @describe: * @vision */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncController</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Autowired</span>   AsyncService asyncService<span class="token punctuation">;</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      asyncService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5、访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0%E6%95%B0%E6%8D%AE%E6%AD%A3%E5%9C%A8%E5%A4%84%E7%90%86%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello进行测试，3秒后出现数据正在处理，这是同步等待的情况。</a></p><p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p><p>6、给hello方法添加@Async注解；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span><span class="token comment" spellcheck="true">//这是一个异步方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据正在处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableAsync<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAsync</span><span class="token comment" spellcheck="true">//开启异步功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot09TestApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot09TestApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p><p><a href="code%5Cspringboot-09-test%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc%5Cservice">文件资源</a></p><h2><span id="邮件任务">邮件任务</span></h2><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p><ul><li>邮件发送需要引入spring-boot-start-mail</li><li>SpringBoot 自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml中</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p><strong>测试：</strong></p><p>1、引入pom依赖</p><pre class=" language-XML"><code class="language-XML"><dependency>   <groupid>org.springframework.boot</groupid>   <artifactid>spring-boot-starter-mail</artifactid></dependency></code></pre><p>看它引入的依赖，可以看到 jakarta.mail</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jakarta.mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、查看自动配置类：MailSenderAutoConfiguration</p><p><img src="/2022/02/18/springboot/image-20211109180155997.png"></p><p><img src="/2022/02/18/springboot/image-20211109180248896.png" alt="image-20211109180248896"></p><p>这个类中存在bean，JavaMailSenderImpl</p><p><img src="/2022/02/18/springboot/image-20211109180351497.png" alt="image-20211109180351497"></p><p>然后我们去看下配置文件</p><p><img src="/2022/02/18/springboot/image-20211109180526409.png" alt="image-20211109180526409"></p><p>3、配置文件：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">2507566674@qq.com</span><span class="token comment" spellcheck="true">#邮箱设置里生成</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">jvnguqzfrhblebga</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.qq.com</span><span class="token comment" spellcheck="true">#开启加密验证(qq独有)</span><span class="token attr-name">spring.mail.properties.mail.smtp.ssl.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p>4、Spring单元测试</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Autowired</span> JavaMailSender mailSender<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SimpleMailMessage message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"大狂神，你好啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"谢谢你的java系列课程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2753629465@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"2507566674@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">contextLoads2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 复杂的邮件</span>    MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  组装(开启多文件)</span>    MimeMessageHelper mimeMessageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"小狂神，你好啊！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;p style='color:red'>谢谢你的java课程！&lt;/p>"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    附件</span>    mimeMessageHelper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\background\\1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    mimeMessageHelper.setTo("2753629465@qq.com");</span>    mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2507566674@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"2507566674@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>查看邮箱，邮件接收成功！</p><p>我们只需要使用Thymeleaf进行前后端结合即可开发自己网站邮件收发功能了！</p><h2><span id="定时任务">定时任务</span></h2><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p><ul><li>TaskExecutor接口 <strong>任务执行者</strong></li><li>TaskScheduler接口 <strong>任务调度者</strong></li></ul><p>两个注解：</p><ul><li>@EnableScheduling  <strong>开启定时任务注解 支持</strong></li><li>@Scheduled  <strong>什么时候执行</strong></li></ul><p><strong>cron表达式：</strong></p><p><img src="/2022/02/18/springboot/image-20211109163158131.png" alt="image-20211109163158131"></p><table><thead><tr><th align="left">特殊字符</th><th>代表含义</th></tr></thead><tbody><tr><td align="left">,</td><td>枚举</td></tr><tr><td align="left">-</td><td>区间</td></tr><tr><td align="left">*</td><td>任意</td></tr><tr><td align="left">/</td><td>步长</td></tr><tr><td align="left">?</td><td>日/星期冲突匹配</td></tr><tr><td align="left">L</td><td>最后</td></tr><tr><td align="left">S</td><td>工作日</td></tr><tr><td align="left">C</td><td>和calendar联系后计算过的值</td></tr><tr><td align="left">#</td><td>星期，4#2,第2个星期三</td></tr></tbody></table><p><strong>测试步骤：</strong></p><p>1、创建一个ScheduledService</p><p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.service;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Service;/** * @author: lpc * @date: 9/11/2021 下午 6:37 * @describe: * @vision */@Servicepublic class ScheduledService {@Scheduled(cron = "0/5 * * * * ?")//每隔5秒执行一次  public void hello() {    System.out.println("执行了hello方法！");  }}</code></pre><p>2、这里写完定时任务之后，我们需要在主程序上增加**@EnableScheduling** 开启定时任务功能</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableAsync<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableScheduling<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAsync</span><span class="token comment" spellcheck="true">//开启异步功能</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token comment" spellcheck="true">//开启定时任务注解 支持</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot09TestApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot09TestApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、我们来详细了解下cron表达式；</p><p><a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p><p>4、常用的表达式</p><pre><code>（1）0/2 * * * * ?   表示每2秒 执行任务（1）0 0/2 * * * ?   表示每2分钟 执行任务（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点（5）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时（6）0 0 12 ? * WED   表示每个星期三中午12点（7）0 0 12 * * ?   每天中午12点触发（8）0 15 10 ? * *   每天上午10:15触发（9）0 15 10 * * ?     每天上午10:15触发（10）0 15 10 * * ?   每天上午10:15触发（11）0 15 10 * * ? 2005   2005年的每天上午10:15触发（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发（13）0 0/5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发（14）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发（15）0 0-5 14 * * ?   在每天下午2点到下午2:05期间的每1分钟触发（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发（18）0 15 10 15 * ?   每月15日上午10:15触发（19）0 15 10 L * ?   每月最后一日的上午10:15触发（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</code></pre><p><a href="code%5Cspringboot-09-test%5Csrc%5Cmain%5Cjava%5Ccom%5Clpc">文件资源</a></p><h1><span id="dubbo和zookeeper集成">Dubbo和Zookeeper集成</span></h1><h2><span id="分布式理论">分布式理论</span></h2><p>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</p><p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。。。</p><h2><span id="dubbo文档">Dubbo文档</span></h2><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p><p>在Dubbo的官网文档有这样一张图</p><p><img src="/2022/02/18/springboot/image-20211109190440271.png" alt="image-20211109190440271"></p><h2><span id="单一应用架构">单一应用架构</span></h2><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p><img src="/2022/02/18/springboot/image-20211109190649564.png" alt="image-20211109190649564"></p><p>适用于小型网站，小型管理系统，将所有功能都部署到一个服务器里，简单易用。</p><p><strong>缺点：</strong></p><p>1、性能扩展比较难</p><p>2、协同开发问题</p><p>3、不利于升级维护</p><h2><span id="垂直应用架构">垂直应用架构</span></h2><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><img src="/2022/02/18/springboot/image-20211109203208117.png" alt="image-20211109203208117"></p><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p><p>缺点：公用模块无法重复利用，开发性的浪费</p><h2><span id="分布式服务架构">分布式服务架构</span></h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p><p><img src="/2022/02/18/springboot/image-20211109203241064.png" alt="image-20211109203241064"></p><h2><span id="流动计算架构">流动计算架构</span></h2><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心</strong>(SOA)[ Service Oriented Architecture]是关键。</p><p><img src="/2022/02/18/springboot/image-20211109203307435.png" alt="image-20211109203307435"></p><h2><span id="什么是rpc">什么是RPC</span></h2><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p>也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；</p><p>推荐阅读文章：<a href="https://www.jianshu.com/p/2accc2840a1b">https://www.jianshu.com/p/2accc2840a1b</a></p><p><strong>RPC基本原理</strong></p><p><img src="/2022/02/18/springboot/image-20211109211951663.png" alt="image-20211109211951663"></p><p><strong>步骤解析：</strong></p><p><img src="/2022/02/18/springboot/image-20211109212056766.png" alt="image-20211109212056766"></p><p>RPC两个核心模块：通讯，序列化。</p><h2><span id="测试环境搭建">测试环境搭建</span></h2><h3><span id="dubbo">Dubbo</span></h3><p>Apache Dubbo 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>dubbo官网 <a href="http://dubbo.apache.org/zh-cn/index.html">http://dubbo.apache.org/zh-cn/index.html</a></p><p>1.了解Dubbo的特性</p><p>2.查看官方文档</p><p><strong>dubbo基本概念</strong></p><p><img src="/2022/02/18/springboot/image-20211109213638202.png" alt="image-20211109213638202"></p><p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><p><strong>调用关系说明</strong></p><p>l 服务容器负责启动，加载，运行服务提供者。</p><p>l 服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>l 服务消费者在启动时，向注册中心订阅自己所需的服务。</p><p>l 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p>l 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>l 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h3><span id="dubbo环境搭建">Dubbo环境搭建</span></h3><p>点进dubbo官方文档，推荐我们使用Zookeeper 注册中心</p><p>什么是zookeeper呢？可以查看<a href="https://zookeeper.apache.org/">官方文档</a></p><h3><span id="window下安装zookeeper">Window下安装zookeeper</span></h3><p>1、下载zookeeper ：<a href="https://dlcdn.apache.org/zookeeper/">地址</a>，解压zookeeper</p><p>2、运行/bin/zkServer.cmd ，初次运行会报错，没有zoo.cfg配置文件；</p><p>可能遇到问题：闪退 !</p><p>解决方案：编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因。</p><p><img src="/2022/02/18/springboot/image-20211110151358987.png" alt="image-20211110151358987"></p><p><img src="/2022/02/18/springboot/image-20211110151446715.png" alt="image-20211110151446715"></p><p>3、修改zoo.cfg配置文件</p><p>将conf文件夹下面的zoo_sample.cfg复制一份改名为zoo.cfg即可。</p><p>注意几个重要位置：</p><p>dataDir=./  临时数据存储的目录（可写相对路径）</p><p>clientPort=2181  zookeeper的端口号</p><p>修改完成后再次启动zookeeper</p><p><img src="/2022/02/18/springboot/image-20211110151612053.png" alt="image-20211110151612053"></p><p>4、使用zkCli.cmd测试</p><p>ls /：列出zookeeper根下保存的所有节点</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 0<span class="token punctuation">]</span> <span class="token function">ls</span> /<span class="token punctuation">[</span>zookeeper<span class="token punctuation">]</span></code></pre><p>create –e /kuangshen 123：创建一个kuangshen节点，值为123</p><p><img src="/2022/02/18/springboot/image-20211110152436126.png" alt="image-20211110152436126"></p><p>get /kuangshen：获取/kuangshen节点的值</p><p><img src="/2022/02/18/springboot/image-20211110152412788.png" alt="image-20211110152412788"></p><p>我们再来查看一下节点</p><p><img src="/2022/02/18/springboot/image-20211110152457102.png" alt="image-20211110152457102"></p><h3><span id="window下安装dubbo-admin">window下安装dubbo-admin</span></h3><p>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。</p><p>但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序dubbo-admin，不过这个监控即使不装也不影响使用。</p><p>我们这里来安装一下：</p><p><strong>1、下载dubbo-admin</strong></p><p>地址 ：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a></p><p><strong>2、解压进入目录</strong></p><p>修改 dubbo-admin\src\main\resources \application.properties 指定zookeeper地址</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">7001</span><span class="token attr-name">spring.velocity.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">spring.velocity.charset</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span class="token attr-name">spring.velocity.layout-url</span><span class="token punctuation">=</span><span class="token attr-value">/templates/default.vm</span><span class="token attr-name">spring.messages.fallback-to-system-locale</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token attr-value">i18n/message</span><span class="token attr-name">spring.root.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.guest.password</span><span class="token punctuation">=</span><span class="token attr-value">guest</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://127.0.0.1:2181</span></code></pre><p><strong>3、在项目目录下</strong>打包dubbo-admin</p><pre class=" language-bash"><code class="language-bash">mvn clean package -Dmaven.test.skip<span class="token operator">=</span>true</code></pre><p><strong>第一次打包的过程有点慢，需要耐心等待！直到成功！</strong></p><p><img src="/2022/02/18/springboot/image-20211110153709282.png" alt="image-20211110153709282"></p><p><img src="/2022/02/18/springboot/image-20211110153518522.png" alt="image-20211110153518522"></p><p>4、执行 dubbo-admin\target 下的dubbo-admin-0.0.1-SNAPSHOT.jar</p><pre class=" language-bash"><code class="language-bash">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</code></pre><p>【注意：zookeeper的服务一定要打开！】</p><p>执行完毕，我们去访问一下 <a href="http://localhost:7001/">http://localhost:7001/</a> ， 这时候我们需要输入登录账户和密码，我们都是默认的root-root；</p><p>登录成功后，查看界面</p><p><img src="/2022/02/18/springboot/image-20211110154924144.png" alt="image-20211110154924144"></p><p>安装完成！</p><p><strong>SpringBoot + Dubbo + zookeeper</strong></p><h2><span id="框架搭建">框架搭建</span></h2><p><strong>1. 启动zookeeper ！</strong></p><p><strong>2. IDEA创建一个空项目；</strong></p><p><strong>3.创建一个模块，实现服务提供者：provider-server ， 选择web依赖即可</strong></p><p><strong>4.项目创建完毕，我们写一个服务，比如卖票的服务；</strong></p><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/11/2021 下午 4:15 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>  String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编写实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/11/2021 下午 4:15 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"人间--9981-->地狱"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5.创建一个模块，实现服务消费者：consumer-server ， 选择web依赖即可</strong></p><p><strong>6.项目创建完毕，我们写一个服务，比如用户的服务；</strong></p><p>编写service</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/11/2021 下午 4:18 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    拿到provider的票</span><span class="token punctuation">}</span></code></pre><p><strong>需求：现在我们的用户想使用买票的服务，这要怎么弄呢 ？</strong></p><h2><span id="服务提供者">服务提供者</span></h2><p><strong>1、将服务提供者注册到注册中心，我们需要整合Dubbo和zookeeper，所以需要导包</strong></p><p><strong>我们从dubbo官网进入github，看下方的帮助文档，找到dubbo-springboot，找到依赖包</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- dubbo --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    </code></pre><p><strong>zookeeper的包我们去maven仓库下载，zkclient；</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- zkclient --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.sgroschupf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>【新版的坑】zookeeper及其依赖包，解决日志冲突，还需要剔除日志依赖；</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入zookeeper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--排除这个slf4j-log4j12--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>2、在springboot配置文件中配置dubbo相关属性！</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8001</span><span class="token comment" spellcheck="true">#服务应用名字</span><span class="token attr-name">dubbo.application.name</span><span class="token punctuation">=</span><span class="token attr-value">provider-server</span><span class="token comment" spellcheck="true">#注册中心地址</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://127.0.0.1:2181</span><span class="token comment" spellcheck="true">#哪些服务要被注册</span><span class="token attr-name">dubbo.scan.base-packages</span><span class="token punctuation">=</span><span class="token attr-value">com.lpc.service</span></code></pre><p><strong>3、在service的实现类中配置服务注解，发布服务！注意导包问题</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/11/2021 下午 4:15 * @describe: * @vision */</span><span class="token annotation punctuation">@Service</span> <span class="token comment" spellcheck="true">//将服务发布出去</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//放在容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"人间--9981-->地狱"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>逻辑理解 ：应用启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中！</strong></p><p><img src="/2022/02/18/springboot/image-20211110173952287.png" alt="image-20211110173952287"></p><h2><span id="服务消费者">服务消费者</span></h2><p><strong>1、导入依赖，和之前的依赖一样；</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--dubbo--></span><span class="token comment" spellcheck="true">&lt;!-- Dubbo Spring Boot Starter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--zookeeper--></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.sgroschupf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入zookeeper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--排除这个slf4j-log4j12--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、<strong>配置参数</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#当前应用名字</span><span class="token attr-name">dubbo.application.name</span><span class="token punctuation">=</span><span class="token attr-value">consumer-server</span><span class="token comment" spellcheck="true">#注册中心地址</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://127.0.0.1:2181</span></code></pre><p><strong>3. 本来正常步骤是需要将服务提供者的接口打包，然后用pom文件导入，我们这里使用简单的方式，直接将服务的接口拿过来，路径必须保证正确，即和服务提供者相同；</strong></p><p><img src="/2022/02/18/springboot/image-20211110182216761.png" alt="image-20211110182216761"></p><p><strong>4. 完善消费者的服务类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/11/2021 下午 4:18 * @describe: * @vision */</span><span class="token annotation punctuation">@Service</span><span class="token comment" spellcheck="true">//放到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    拿到provider的票,要去注册中心拿</span>    <span class="token annotation punctuation">@Reference</span>    TicketService TICKET_SERVICE<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String ticket <span class="token operator">=</span> TICKET_SERVICE<span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在注册中心拿到->"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5. 测试类编写；</strong></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc;import com.lpc.service.UserService;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestclass ConsumerServerApplicationTests {  @Autowired  UserService userService;  @Test  void contextLoads() {    userService.buyTicket();  }}</code></pre><h2><span id="启动测试">启动测试</span></h2><p><strong>1. 开启zookeeper</strong></p><p><strong>2. 打开dubbo-admin实现监控【可以不用做】</strong></p><p><strong>3. 开启服务者</strong>(开启提供者和消费者)</p><p><strong>4. 消费者消费测试，结果：</strong></p><p><img src="/2022/02/18/springboot/image-20211110183500272.png" alt="image-20211110183500272"></p><p><strong>监控中心 ：</strong></p><p><img src="/2022/02/18/springboot/image-20211110183811803.png" alt="image-20211110183811803"></p><p><strong>ok , 这就是SpingBoot + dubbo + zookeeper实现分布式开发的应用，其实就是一个服务拆分的思想；</strong></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/01/15/docker-wei-wan/"/>
      <url>/2022/01/15/docker-wei-wan/</url>
      
        <content type="html"><![CDATA[<h1><span id="docker概述">Docker概述</span></h1><h2><span id="docker为什么出现">Docker为什么出现？</span></h2><ul><li>开发和运维两套环境，而环境配置十分麻烦。<br>如在Windows上开发，要发布到Linux上运行。Docker给以上问题提出了解决方案：<br>Java — Jar(环境）—打包项目带上环境（镜像）—Docker仓库（应用商店）—下载镜像—直接运行</li><li>Docker的思想来自于集装箱，核心思想：隔离。<br>即将应用打包装箱，每个箱子是互相隔离的，可以将服务器利用到极致。</li></ul><table><thead><tr><th>虚拟机</th><th>Docker</th></tr></thead><tbody><tr><td>linux centos原生镜像（一个电脑）</td><td>隔离镜像（最核心的环境 +jdk +mysql等)</td></tr><tr><td>需要开启多个虚拟机</td><td>运行镜像就可以了</td></tr><tr><td>几GB</td><td>几MB</td></tr></tbody></table><h3><span id="官方文档">官方文档</span></h3><blockquote><p><a href="https://docs.docker.com/">https://docs.docker.com/</a></p></blockquote><h3><span id="仓库地址">仓库地址</span></h3><blockquote><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p></blockquote><h2><span id="docker能做什么">Docker能做什么？</span></h2><h3><span id="传统虚拟机与docker对比">传统虚拟机与Docker对比</span></h3><p><img src="/2022/01/15/docker-wei-wan/image-20211203221343920.png" alt="image-20211203221343920"></p><h3><span id="docker的优点">Docker的优点</span></h3><ul><li>==不模拟完整的操作系统==，系统内核（kernel）非常小，更少的抽象层（GuestOS：如Centos）</li><li>容器内的应用直接运行在宿主机的内核，容器本身没有自己的内核，也没有虚拟硬件。</li><li>每个容器相互隔离，内部都有属于自己的文件系统，互不影响。</li></ul><h3><span id="docker实现devops开发-运维">Docker实现DevOps（开发、运维）</span></h3><ul><li>应用更快速的交付和部署<br>打包镜像发布测试，一键运行；不再需要写大量帮助文档，安装程序</li><li>更便捷的升级和扩缩容？<br>部署应用就和搭积木一样</li><li>更简单的系统运维<br>开发和测试的环境高度一致</li><li>更高效的计算资源利用<br>内核级别的虚拟化，可以在一个物理机上运行很多的容器实例，服务器性能可以被压榨到极致。</li></ul><h1><span id="docker安装">Docker安装</span></h1><h2><span id="docker的基本组成">Docker的基本组成</span></h2><p><img src="/2022/01/15/docker-wei-wan/image-20211203221425267.png" alt="image-20211203221425267"></p><ul><li>镜像（image）：镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件。它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。相当于一个模板，通过这个模板来创建容器服务，可以通过一个镜像创建多个容器。</li><li>容器（container）：独立运行一个或一组应用/基本命令有：启动，停止，删除等/可理解为一个简单的linux系统。</li><li>仓库（repository）：存放镜像的地方（公有/私有）</li></ul><h2><span id="安装docker">安装Docker</span></h2><blockquote><p>环境</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#系统内核是3.10以上都</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># uname -r</span>3.10.0-1160.el7.x86_64</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#系统版本</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/os-release </span>NAME<span class="token operator">=</span><span class="token string">"CentOS Linux"</span>VERSION<span class="token operator">=</span><span class="token string">"7 (Core)"</span>ID<span class="token operator">=</span><span class="token string">"centos"</span>ID_LIKE<span class="token operator">=</span><span class="token string">"rhel fedora"</span>VERSION_ID<span class="token operator">=</span><span class="token string">"7"</span>PRETTY_NAME<span class="token operator">=</span><span class="token string">"CentOS Linux 7 (Core)"</span>ANSI_COLOR<span class="token operator">=</span><span class="token string">"0;31"</span>CPE_NAME<span class="token operator">=</span><span class="token string">"cpe:/o:centos:centos:7"</span>HOME_URL<span class="token operator">=</span><span class="token string">"https://www.centos.org/"</span>BUG_REPORT_URL<span class="token operator">=</span><span class="token string">"https://bugs.centos.org/"</span>CENTOS_MANTISBT_PROJECT<span class="token operator">=</span><span class="token string">"CentOS-7"</span>CENTOS_MANTISBT_PROJECT_VERSION<span class="token operator">=</span><span class="token string">"7"</span>REDHAT_SUPPORT_PRODUCT<span class="token operator">=</span><span class="token string">"centos"</span>REDHAT_SUPPORT_PRODUCT_VERSION<span class="token operator">=</span><span class="token string">"7"</span></code></pre><blockquote><p>安装</p></blockquote><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true">#1卸载旧的版本</span> <span class="token function">sudo</span> yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine <span class="token comment" spellcheck="true">#2需要都安装包</span> yum <span class="token function">install</span> -y yum-utils <span class="token comment" spellcheck="true">#3设置镜像都仓库</span> yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class="token comment" spellcheck="true">#更新yum索引</span> yum makecache fast <span class="token comment" spellcheck="true">#4安装docker相关都 docker-ce 社区版 ee企业版</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io <span class="token comment" spellcheck="true">#5启动</span> systemctl start docker <span class="token comment" spellcheck="true">#查看版本</span> docker version</code></pre><p><img src="/2022/01/15/docker-wei-wan/image-20211203233145061.png" alt="image-20211203233145061"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#7helloworld</span>docker run hello-world</code></pre><p><img src="/2022/01/15/docker-wei-wan/image-20211203233340101.png" alt="image-20211203233340101"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#8查看下载的helloworld的镜像</span> docker images  <span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    feb5d9fea6a5   2 months ago   13.3kB</code></pre><p>了解：卸载docker</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#1 卸载依赖</span>yum remove docker-ce docker-ce-cli containerd.io<span class="token comment" spellcheck="true">#2 删除资源</span><span class="token function">rm</span> -rf /var/lib/docker <span class="token comment" spellcheck="true">#默认工作路径</span><span class="token function">rm</span> -rf /var/lib/containerd</code></pre><blockquote><p>阿里云镜像加速</p></blockquote><p><img src="/2022/01/15/docker-wei-wan/image-20211203234251906.png" alt="image-20211203234251906"></p><p>配置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/Docker<span class="token punctuation">(</span>未完<span class="token punctuation">)</span>/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://i9mrrdt7.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><h2><span id="docker运行原理">Docker运行原理</span></h2><p><img src="/2022/01/15/docker-wei-wan/image-20211204085305456.png" alt="image-20211204085305456"></p><h2><span id="底层原理">底层原理</span></h2><blockquote><p><strong>Docker是怎么工作的？</strong></p></blockquote><p>Docker是一个<strong>Client-Server结构</strong>的系统，Server以守护进程运行在主机上。通过Socket从客户端进行访问。</p><p>Docker-Server接受到Docker-Clent的指令，就会执行</p><p><img src="/2022/01/15/docker-wei-wan/image-20211204085911889.png" alt="image-20211204085911889"></p><blockquote><p><strong>Docker为什么比vm快？</strong></p></blockquote><ol><li><p>Docker有着比虚拟更少的抽象层</p><p><img src="/2022/01/15/docker-wei-wan/image-20211204090059690.png" alt="image-20211204090059690"></p></li><li><p>docker用的是宿主机的内核，vm需要Guest OS</p></li></ol><p>所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统，避免引导。</p><p>虚拟机加载Guest OS，分钟级别。docker利用宿主机的操作系统，没有这个过程，秒级！</p><p><img src="/2022/01/15/docker-wei-wan/image-20211204090530567.png" alt="image-20211204090530567"></p><h1><span id="docker的常用命令">Docker的常用命令</span></h1><h2><span id="帮助命令">帮助命令</span></h2><pre class=" language-bash"><code class="language-bash">docker version           <span class="token comment" spellcheck="true">#dacker版本信息</span>docker info              <span class="token comment" spellcheck="true"># 系统信息，包括镜像和容器的数量 详细</span>docker --help            <span class="token comment" spellcheck="true"># 帮助信息</span></code></pre><p>帮助文档地址：<a href="https://docs.docker.com/engine/reference/commandline/Docker(%E6%9C%AA%E5%AE%8C)/">https://docs.docker.com/engine/reference/commandline/Docker(未完)/</a></p><p>Docker采用联合文件系统，不同镜像的相同文件无需再次下载：</p><h2><span id="镜像命令">镜像命令</span></h2><blockquote><p><strong>docker images 查看所有本地的镜像</strong></p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    feb5d9fea6a5   2 months ago   13.3kB<span class="token comment" spellcheck="true">#REPOSITORY 仓库源</span><span class="token comment" spellcheck="true">#TAG        镜像的标签</span><span class="token comment" spellcheck="true">#IMAGE ID   镜像id</span><span class="token comment" spellcheck="true">#CREATED    镜像创建时间</span><span class="token comment" spellcheck="true">#SIZE       镜像大小</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images --help</span>Usage:  docker images <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>List imagesOptions:  -a, --all             Show all images <span class="token punctuation">(</span>default hides intermediate images<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#所有镜像</span>      --digests         Show digests  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print images using a Go template      --no-trunc        Don't truncate output  -q, --quiet           Only show image IDs <span class="token comment" spellcheck="true">#只显示id</span></code></pre><blockquote><p><strong>docker search搜索镜像</strong></p></blockquote><p><img src="/2022/01/15/docker-wei-wan/image-20211204092314231.png" alt="image-20211204092314231"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#可选项 过滤</span>--filter<span class="token operator">=</span>STARS<span class="token operator">=</span>3000 <span class="token comment" spellcheck="true">#STARS大于3000的</span></code></pre><p><img src="/2022/01/15/docker-wei-wan/image-20211204092441801.png" alt="image-20211204092441801"></p><blockquote><p><strong>docker pull 下载镜像</strong></p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull --help</span>Usage:  docker pull <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span>Pull an image or a repository from a registryOptions:  -a, --all-tags                Download all tagged images <span class="token keyword">in</span> the repository      --disable-content-trust   Skip image verification <span class="token punctuation">(</span>default true<span class="token punctuation">)</span>      --platform string         Set platform <span class="token keyword">if</span> server is multi-platform capable  -q, --quiet                   Suppress verbose output</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#下载镜像 默认最新版</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql</span>Using default tag: latest <span class="token comment" spellcheck="true">#默认最新版</span>latest: Pulling from library/mysqlffbb094f4f9e: Pull complete  <span class="token comment" spellcheck="true"># 分层下载，docker image的核心 联合文件系统</span>df186527fc46: Pull complete fa362a6aa7bd: Pull complete 5af7cb1a200e: Pull complete 949da226cc6d: Pull complete bce007079ee9: Pull complete eab9f076e5a3: Pull complete 8a57a7529e8d: Pull complete b1ccc6ed6fc7: Pull complete b4af75e64169: Pull complete 3aed6a9cd681: Pull complete 23390142f76f: Pull complete Digest: sha256:ff9a288d1ecf4397967989b5d1ec269f7d9042a46fc8bc2c3ae35458c1a26727<span class="token comment" spellcheck="true">#签名</span>Status: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest<span class="token comment" spellcheck="true"># 真实地址</span><span class="token comment" spellcheck="true">#docker pull mysql  等价  docker pull mysql docker.io/library/mysql:latest</span><span class="token comment" spellcheck="true">#指定版本下载</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql:5.7</span>5.7: Pulling from library/mysqlffbb094f4f9e: Already exists df186527fc46: Already exists fa362a6aa7bd: Already exists 5af7cb1a200e: Already exists 949da226cc6d: Already exists bce007079ee9: Already exists eab9f076e5a3: Already exists c7b24c3f27af: Pull complete 6fc26ff6705a: Pull complete bec5cdb5e7f7: Pull complete 6c1cb25f7525: Pull complete Digest: sha256:d1cc87a3bd5dc07defc837bc9084f748a130606ff41923f46dec1986e0dc828dStatus: Downloaded newer image <span class="token keyword">for</span> mysql:5.7docker.io/library/mysql:5.7</code></pre><p><img src="/2022/01/15/docker-wei-wan/image-20211204093406822.png" alt="image-20211204093406822"></p><blockquote><p><strong>docker rmi 删除镜像</strong></p></blockquote><p><img src="/2022/01/15/docker-wei-wan/image-20211204093552184.png" alt="image-20211204093552184"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#根据id删除镜像 docker rmi -f id            #rmi：remove image</span><span class="token comment" spellcheck="true">#删除多个镜像 docker rmi -f id id id</span><span class="token comment" spellcheck="true">#批量删除镜像 docker rmi -f $(docker images -aq )#-qa所有镜像id</span></code></pre><h2><span id="容器命令">容器命令</span></h2><p><strong>说明：我们有了镜像才可以创建容器，下载一个centos镜像来测试学习</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull centos</span>Using default tag: latestlatest: Pulling from library/centosa1d0c7532777: Pull complete Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177Status: Downloaded newer image <span class="token keyword">for</span> centos:latestdocker.io/library/centos:latest</code></pre><p><strong>新建容器并启动</strong></p><pre class=" language-bash"><code class="language-bash">docker run<span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image<span class="token comment" spellcheck="true">#参数说明</span>--name<span class="token operator">=</span><span class="token string">"Name"</span> <span class="token comment" spellcheck="true">#容器名字 tomcat01 tomcat02 用来区分容器</span>-d  <span class="token comment" spellcheck="true">#后台方式运行</span>-i-t  <span class="token comment" spellcheck="true">#-i -t使用交互方式运行，进入容器查看内容</span>-p  <span class="token comment" spellcheck="true">#指定容器都端口</span>   -p ip:主机端口:容器端口   -p 主机端口:容器端口<span class="token punctuation">(</span>常用<span class="token punctuation">)</span>   -p 容器端口   容器端口-P  <span class="token comment" spellcheck="true">#随机指定端口</span></code></pre><p>启动进入容器</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED        SIZEcentos       latest    5d0da3dc9764   2 months ago   231MB<span class="token comment" spellcheck="true">#进入</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it centos /bin/bash </span><span class="token punctuation">[</span>root@7e56a6cea1e3 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>bin  etc   lib      lost+found  mnt  proc  run   srv  tmp  vardev  home  lib64  media       opt  root  sbin  sys  usr <span class="token comment" spellcheck="true">#退出</span><span class="token punctuation">[</span>root@7e56a6cea1e3 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit      </span><span class="token keyword">exit</span></code></pre><p>列出所有正在运行都容器</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#列出当前正在运行都容器</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps </span>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span class="token comment" spellcheck="true">#+曾经运行过的</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -a </span><span class="token comment" spellcheck="true">#-n=?  </span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -a -n=1 #显示一个</span>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                     PORTS     NAMES7e56a6cea1e3   centos    <span class="token string">"/bin/bash"</span>   4 minutes ago   Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> 4 minutes ago             objective_babbage<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -aq #曾经运行过的 id</span>7e56a6cea1e3e12f46d4a3ca2d927293a81ce4a2cf912c7a</code></pre><p>退出容器</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span>         <span class="token comment" spellcheck="true">#直接停止退出</span>ctrl+P+Q     <span class="token comment" spellcheck="true">#不停止退出 快捷键</span></code></pre><p>删除容器</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">rm</span> 容器id       <span class="token comment" spellcheck="true">#删除一个</span>docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span> <span class="token comment" spellcheck="true">#删除全部容器</span>docker <span class="token function">ps</span> -a -q <span class="token operator">|</span><span class="token function">xargs</span> docker <span class="token function">rm</span> <span class="token comment" spellcheck="true">#删除所有容器</span></code></pre><p><strong>启动停止容器的操作</strong></p><pre class=" language-bash"><code class="language-bash">docker start 容器id  <span class="token comment" spellcheck="true">#启动</span>docker restart      <span class="token comment" spellcheck="true">#重启</span>docker stop         <span class="token comment" spellcheck="true">#停止当前正在运行的容器</span>docker <span class="token function">kill</span>         <span class="token comment" spellcheck="true">#强制停止</span></code></pre><h2><span id="其他常用命令">其他常用命令</span></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#后台启动 -d</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d centos</span>bfc0b10e1406b7a54d58bc8e9a33a8fc07c722655a97491d96c4315e03e48eee<span class="token comment" spellcheck="true">#发现并没有正在运行</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps </span>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span class="token comment" spellcheck="true">#常见都坑：docker 容器使用后台运行 就必须要有一个前台进程，docker发现没有应用，就会自动停止</span><span class="token comment" spellcheck="true">#nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就没有程序了</span></code></pre><p><strong>查看日志</strong></p><pre class=" language-bash"><code class="language-bash">容器内输入：docker logs -tf --tail 条数 容器id <span class="token comment" spellcheck="true">#查看容器日志</span>docker logs -tf 容器id <span class="token comment" spellcheck="true">#全部</span></code></pre><p><strong>查看容器中进程信息</strong></p><p>docker top 容器id</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it centos /bin/bash</span><span class="token punctuation">[</span>root@93c5e4c77a8c /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES93c5e4c77a8c   centos    <span class="token string">"/bin/bash"</span>   9 seconds ago   Up 8 seconds             ecstatic_visvesvaraya<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker top 93c5e4c77a8c #查看信息</span>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                64999               64981               0                   10:33               ?                   00:00:00            /bin/bash</code></pre><p><strong>查看容器元数据</strong></p><p>==docker inspect== 容器id</p><p><img src="/2022/01/15/docker-wei-wan/image-20211204103624348.png" alt="image-20211204103624348"></p><p><strong>进入当前正在运行都容器</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#我们通常容器都是使用后台方式运行，需要进入容器，修改一些配置</span><span class="token comment" spellcheck="true">#命令</span>docker <span class="token function">exec</span> -it 容器id bashshell  <span class="token comment" spellcheck="true">#交互执行</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES93c5e4c77a8c   centos    <span class="token string">"/bin/bash"</span>   6 minutes ago   Up 6 minutes             ecstatic_visvesvaraya<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it 93c5e4c77a8c /bin/bash</span><span class="token punctuation">[</span>root@93c5e4c77a8c /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#方式二 直接进入当前命令行</span>docker attach 容器id<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES93c5e4c77a8c   centos    <span class="token string">"/bin/bash"</span>   8 minutes ago   Up 8 minutes             ecstatic_visvesvaraya<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker attach  93c5e4c77a8c </span><span class="token punctuation">[</span>root@93c5e4c77a8c /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#区别</span><span class="token comment" spellcheck="true">#docker exec 进入容器后开启一个新的终端 常用</span><span class="token comment" spellcheck="true">#docker attach 进入容器当前正在执行的终端！不会开启新的终端</span></code></pre><p><strong>拷贝容器文件到宿主机</strong></p><p>docker cp</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker attach f007d1d8f220 #进入容器</span><span class="token punctuation">[</span>root@f007d1d8f220 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token punctuation">[</span>root@f007d1d8f220 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd home/</span><span class="token punctuation">[</span>root@f007d1d8f220 home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token punctuation">[</span>root@f007d1d8f220 home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch test.java #创建文件</span><span class="token punctuation">[</span>root@f007d1d8f220 home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>test.java<span class="token punctuation">[</span>root@f007d1d8f220 home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit</span><span class="token keyword">exit</span><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker cp f007d1d8f220:/home/test.java /home #从容器中复制文件到宿主机</span><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll  #查看</span>总用量 4drwx------. 15 <span class="token function">lpc</span>  <span class="token function">lpc</span>  4096 11月  8 14:35 <span class="token function">lpc</span>-rw-r--r--.  1 root root    0 12月  4 10:47 test.java<span class="token comment" spellcheck="true">#现在手动，未来我们可以使用-v卷技术，可以实现自动</span></code></pre><h2><span id="小结">小结</span></h2><p><img src="/2022/01/15/docker-wei-wan/image-20211204090846807.png" alt="image-20211204090846807"></p><pre class=" language-shell"><code class="language-shell">attach      Attach to a running container            # 当前shell下attach连接指定运行镜像build       Build an image from a Dockerfile         # 通过Dockerfile定制镜像commit      Create a new image from a container changes   #提交当前容器为新镜像cp          Copy files/folders from the containers filesystem to the host path   # 从容器中拷贝指定文件或者目录到宿主机中create      Create a new container                   # 创建一个新的容器，同run，但不启动容器diff        Inspect changes on a container‘s filesystem   # 查看docker容器变化events      Get real time events from the server     # 从docker服务获取容器实时事件exec        Run a command in an existing container   # 在已存在的容器上运行命令export      Stream the contents of a container as a tar archive  # 导出容器的内容流作为一个tar归档文件[对应import]history     Show the history of an image             # 展示一个镜像形成历史images      List images                              # 列出系统当前镜像import      Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]info        Display system-wide information          # 显示系统相关信息inspect     Return low-level information on a container   # 查看容器详细信息kill        Kill a running container                 # kill指定docker容器load        Load an image from a tar archive         # 从一个tar包中加载一个镜像[对应save]login       Register or Login to the docker registry server  # 注册或者登陆一个docker源服务器logout      Log out from a Docker registry server    # 从当前Docker registry 退出logs        Fetch the logs of a container  # 输出当前容器日志信息port        Lookup the public-facting port which is NAT-ed to PRIVATE_PORT   # 查看映射端口对应的容器内部源端口pause       Pause all processes within a container   # 暂停容器ps          List containers                          # 列出容器列表pull        Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像push        Push an image or a repository to the docker registry server   # 推送指定镜像或者库镜像至docker源服务器restart     Restart a running container              # 重启运行的容器rm          Remove one or more containers            # 移除一个或者多个容器rmi         Remove one or more images                # 移除一个或者多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可以继续或 -f 强制删除]run         Run a command in a new container         # 创建一个新的容器并运行一个命令save        Save an image to a tar archive           # 保存一个镜像为一个tar包[对应load]search      Search for an image on the Docker Hub    # 在docker hub 中搜索镜像start       Start a stopped containers               # 启动容器stop        Stop a running containers                # 停止容器tag         Tag an image into a repository           # 给源中镜像大标签top         Lookup the running processes of a container   # 查看容器中运行的进程信息unpause     Unpause a paused container               # 取消暂停容器versiohn    Show the docker version information      # 查看docker版本号wait        Blocke until a container stops, then print its exit code # 截取容器停止时的退出状态值</code></pre><p>具体建议百度:<a href="https://www.baidu.com/s?tn=59044660_hao_pg&amp;ie=utf-8&amp;wd=docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8">docker命令</a></p><h2><span id="作业">作业</span></h2><blockquote><p>安装nginx</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#搜索nginx </span>docker search nginx<span class="token comment" spellcheck="true">#下载</span>docker pull nginx<span class="token comment" spellcheck="true">#启动</span><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d --name nginx01 -p 3344:80 nginx</span>b6c9414cfb3cb47c9998dc7f56c798cd88512f614ea53ceb80084f1bb3b2a4b8<span class="token comment" spellcheck="true">#测试</span><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl localhost:3344</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">#进入容器</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMESb6c9414cfb3c   nginx     <span class="token string">"/docker-entrypoint.…"</span>   6 minutes ago   Up 6 minutes   0.0.0.0:3344-<span class="token operator">></span>80/tcp, :::3344-<span class="token operator">></span>80/tcp   nginx01<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it nginx01 /bin/bash #进入容器</span>root@b6c9414cfb3c:/<span class="token comment" spellcheck="true"># whereis nginx</span>nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginxroot@b6c9414cfb3c:/<span class="token comment" spellcheck="true"># cd /etc/nginx/  </span>root@b6c9414cfb3c:/etc/nginx<span class="token comment" spellcheck="true"># ls   #开到nginx的配置</span>conf.d        mime.types  nginx.conf     uwsgi_paramsfastcgi_params    modules     scgi_params<span class="token comment" spellcheck="true">#停止容器</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMESb6c9414cfb3c   nginx     <span class="token string">"/docker-entrypoint.…"</span>   10 minutes ago   Up 10 minutes   0.0.0.0:3344-<span class="token operator">></span>80/tcp, :::3344-<span class="token operator">></span>80/tcp   nginx01<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker stop b6c9414cfb3c  #停止容器</span>b6c9414cfb3c</code></pre><p>记得开放端口</p><p><img src="/2022/01/15/docker-wei-wan/image-20211204112817196.png" alt="image-20211204112817196"></p><p>外面访问<a href="http://192.168.67.217:3344/">Welcome to nginx!</a></p><p><img src="/2022/01/15/docker-wei-wan/image-20211204112913741.png" alt="image-20211204112913741"></p><p>思考问题：我们每次改动nginx配合文件，都需要进入容器内部？十分麻烦</p><p>我们可以在容器外部提供一个映射路径，实现外部修改，内部自动同步？</p><p>-v卷技术</p><blockquote><p>安装tomcat</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#官方的使用</span>docker run -it --rm tomcat:9.0<span class="token comment" spellcheck="true">#我们之前的启动都是后台，停止之后，容器还可以查到，</span><span class="token comment" spellcheck="true">#docker run -it --rm ，一般用来测试，用完就删</span><span class="token comment" spellcheck="true">#下载</span>docker pull tomcat:9.0<span class="token comment" spellcheck="true">#启动</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 3355:8080 --name tomcat01 tomcat</span>de15b848175942fed8fd5c07b5b7e01aa984555a849ea10c37e686a1d8391076<span class="token comment" spellcheck="true">#访问网址发现404</span><span class="token comment" spellcheck="true">#进入容器</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat01 /bin/bash</span>root@de15b8481759:/usr/local/tomcat<span class="token comment" spellcheck="true"># cd webapps</span>root@de15b8481759:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># ls -l</span>total 0<span class="token comment" spellcheck="true">#webapps 没有东西 linux的命令也少了</span><span class="token comment" spellcheck="true">#原因：阿里云镜像原因，默认最小镜像，所有不必要的都剔除了，保证最小可运行的环境</span>root@de15b8481759:/usr/local/tomcat<span class="token comment" spellcheck="true"># cp -r webapps.dist webapps</span><span class="token comment" spellcheck="true">#再次访问 成功</span></code></pre><blockquote><p>部署es+kibana</p></blockquote><pre class=" language-shell"><code class="language-shell">#es 暴露的端口非常多#es 十分耗内存#es 的数据一般需要放置到安全的目录！挂载#--net somenetwork ? 网络配置#下载启动docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.6.2#查看[root@DTXG ~]# curl localhost:9200{  "name" : "a3f5c919d106",  "cluster_name" : "docker-cluster",  "cluster_uuid" : "e6PvfA7sSHaes8Afauxl_w",  "version" : {    "number" : "7.6.2",    "build_flavor" : "default",    "build_type" : "docker",    "build_hash" : "ef48eb35cf30adf4db14086e8aabd07ef6fb113f",    "build_date" : "2020-03-26T06:34:37.794943Z",    "build_snapshot" : false,    "lucene_version" : "8.4.0",    "minimum_wire_compatibility_version" : "6.8.0",    "minimum_index_compatibility_version" : "6.0.0-beta1"  },  "tagline" : "You Know, for Search"}#docker stats 查看docker容器内存消耗#增加内存限制 -e 环境配置docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.6.2</code></pre><p><img src="/2022/01/15/docker-wei-wan/image-20220122102704327.png" alt="image-20220122102704327"></p><p>加入限制后：</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122102617970.png" alt="image-20220122102617970"></p><blockquote><p>使用kibana连接es?</p></blockquote><p><img src="/2022/01/15/docker-wei-wan/image-20220122103051056.png" alt="image-20220122103051056"></p><h3><span id="可视化">可视化</span></h3><ul><li><p>portainer(先用)</p><pre class=" language-shell"><code class="language-shell">docker run -d -p 8088:9000 \--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</code></pre></li><li><p>Rancher(CI/CD再使用)</p></li></ul><h4><span id="什么是portainer">什么是portainer?</span></h4><p>Docker图形化界面管理工具！提供一个后台面板供我们操作！</p><p>访问测试：外网8088：<a href="http://192.168.67.217:8088/#/init/admin">http://192.168.67.217:8088/#/init/admin</a></p><p><img src="/2022/01/15/docker-wei-wan/image-20220122103803990.png" alt="image-20220122103803990"></p><p>设置密码12345678,选择本地</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122103903354.png" alt="image-20220122103903354"></p><p>进入</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122104034720.png" alt="image-20220122104034720"></p><h1><span id="docker镜像详解">Docker镜像详解</span></h1><h2><span id="镜像是什么">镜像是什么</span></h2><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件。</p><p>所有的应用，直接打包docker镜像，就可以直接跑起来！</p><p>如何得到镜像：</p><ul><li>从远程仓库下载</li><li>拷贝</li><li>自己制作一个镜像 DockerFile</li></ul><h2><span id="docker镜像加载原理">Docker镜像加载原理</span></h2><blockquote><p>UnionFs （联合文件系统)</p></blockquote><p>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像</p><p><strong>特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加 kernel, Linux刚启动时会加载bootfs文件系统，在 Docker镜像的最底层是 bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122104300326-16428194595391.png" alt="image-20220122104300326"></p><p>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122105349733.png" alt="image-20220122105349733"></p><p>对于一个精简的OS,rootfs可以很小，只需要包合最基本的命令，工具和程序库就可以了，因为底层直接用Host(本机)的kernel，自己只需要提供rootfs就可以了。</p><p>由此可见对于不同的Linux发行版， boots基本是一致的， rootfs会有差別，因此不同的发行版可以公用bootfs.</p><p>==虚拟机是分钟级别，容器是秒级！==</p><h2><span id="分层理解">分层理解</span></h2><blockquote><p>分层的镜像</p></blockquote><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122105650483.png" alt="image-20220122105650483"></p><p>思考：</p><p>为什么Docker镜像要采用这种分层的结构呢？</p><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层的方式可以通过<code>docker image inspect name</code>命令</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122110638465.png" alt="image-20220122110638465"></p><p><strong>理解：</strong></p><p> 所有的 Docker镜像都起始于一个基础镜像层，当进行修改或培加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，<br>就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创健第三个镜像层该像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122110814639.png" alt="image-20220122110814639"></p><p> 在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122110837407.png" alt="image-20220122110837407"></p><p> 上图中的镜像层跟之前图中的略有区別，主要目的是便于展示文件<br>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122110955319.png" alt="image-20220122110955319"></p><p> 这种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统</p><p>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于 Linux中对应的件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW [1]。</p><p>下图展示了与系统显示相同的三层镜像。所有镜像层堆并合井，对外提供统一的视图</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122111141470.png" alt="image-20220122111141470"></p><blockquote><p>特点</p></blockquote><p><strong>Docker 镜像都是只读的</strong>，当容器启动时，一个新的可写层加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！</p><h2><span id="commit镜像">commit镜像</span></h2><pre class=" language-shell"><code class="language-shell">docker commit 提交容器成为一个新的副本# 命令和git原理类似docker commit -m="描述信息" -a="作者" 容器id 目标镜像名:[TAG]</code></pre><p>实战测试</p><pre class=" language-shell"><code class="language-shell"># 1、启动一个默认的tomcatdocker run -d -p 8080:8080 tomcat# 2、发现这个默认的tomcat 是没有webapps应用，官方的镜像默认webapps下面是没有文件的！docker exec -it 容器id# 3、拷贝文件进去cp -r webapps.dist/* webapps# 4、将操作过的容器通过commit调教为一个镜像！我们以后就使用我们修改过的镜像即可，这就是我们自己的一个修改的镜像。#docker commit -m="描述信息" -a="作者" 容器id 目标镜像名:[TAG]docker commit -a="dtxg" -m="add webapps app" e2ac9f32a68a tomcat02:1.0</code></pre><p><img src="/2022/01/15/docker-wei-wan/image-20220122112311897.png" alt="image-20220122112311897"></p><h1><span id="容器数据卷">容器数据卷</span></h1><h2><span id="什么是容器数据卷">什么是容器数据卷?</span></h2><p>为了实现数据持久化，使容器之间可以共享数据。可以将容器内的目录，挂载到宿主机上或其他容器内，实现同步和共享的操作。即使将容器删除，挂载到本地的数据卷也不会丢失。</p><h2><span id="使用容器数据卷">使用容器数据卷</span></h2><p>使用命令：-v</p><pre class=" language-shell"><code class="language-shell">dokcer run -it -v #主机内目录:容器内目录 镜像名/id</code></pre><p>将容器内目录挂载到主机内目录上，通过<strong>docker inspect</strong>命令查看该容器即可以看到挂载信息：</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122114310193.png" alt="image-20220122114310193"></p><p>建立挂载关系后，只要使用命令在容器内内新建一个文件,主机的目录里也会有这个文件</p><p>从而实现了容器和主机的文件同步和共享</p><h2><span id="匿名挂载">匿名挂载</span></h2><p>没名字的挂载</p><pre class=" language-shell"><code class="language-shell">docker run -d  -v 容器内目录  镜像名/id  # 匿名挂载</code></pre><h2><span id="具名挂载">具名挂载</span></h2><p>有名字的挂载</p><pre class=" language-shell"><code class="language-shell">docker run -d  -v 卷名:容器内目录  镜像名/id  # 具名挂载</code></pre><p>指定路径挂载</p><pre class=" language-shell"><code class="language-shell">docker run -d  -v /主机路径:容器内目录  镜像名/id  # 具名挂载</code></pre><p><strong>docker volume</strong> </p><p><img src="/2022/01/15/docker-wei-wan/image-20220122134203652.png" alt="image-20220122134203652"></p><p><strong>docker volume ls</strong>命令查看所有挂载的卷：</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122134457402.png" alt="image-20220122134457402"></p><p><strong>docker volume inspect 卷名</strong>找到主机内目录：</p><p><img src="/2022/01/15/docker-wei-wan/image-20220122134537414.png" alt="image-20220122134537414"></p><p>所有docker容器内的卷，在未指定主机内目录时，都在：*/var/lib/Docker(未完)/volumes/卷名/_data* 下，可通过具名挂载可以方便的找到卷，因此广泛使用这种方式进行挂载。</p><h2><span id="数据卷容器">数据卷容器</span></h2><pre class=" language-shell"><code class="language-shell">docker run -it --name container02 --volumes from container01 镜像名/id  # 将两个容器进行挂载#容器2挂载到了容器1，现在容器1叫做数据卷容器</code></pre><p>container01里的某个文件挂载到外边(本机的一个目录)</p><p>container02的volumes来自container01(容器2挂载到容器1)</p><p>现在是三者互通，任何一个地方的文件发生改变，另外两个都能感应到</p><p>虽然容器2的卷挂载了容器1，但实际是所有容器都挂载到了本机，</p><p>尽管容器2挂载了容器1，容器1 删了容器2还挂载在本机</p><h1><span id="dockerfile">DockerFile</span></h1><p>Dockerfile是用来构建docker镜像的文件</p><h2><span id="构建步骤">构建步骤</span></h2><p>编写一个dockerfile文件,随后运行命令：</p><pre class=" language-shell"><code class="language-shell">docker build -f 文件路径 -t 标签 .  # 文件名为Dockerfile时可省略且最后的.不要忽略docker run     # 运行镜像docker push    # 发布镜像</code></pre><h2><span id="dockerfile命令">dockerfile命令</span></h2><table><thead><tr><th>命令</th><th>效果</th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像：Centos/Ubuntu</td></tr><tr><td>MAINTAINER</td><td>镜像作者+邮箱</td></tr><tr><td>RUN</td><td>镜像构建的时候需要运行的命令</td></tr><tr><td>ADD</td><td>为镜像添加内容（压缩包）</td></tr><tr><td>WORKDIR</td><td>镜像工作目录（进入容器时的目录）</td></tr><tr><td>VOLUME</td><td>挂载的目录</td></tr><tr><td>EXPOSE</td><td>暴露端口配置</td></tr><tr><td>CMD/ENTRYPOINT</td><td>指定这个容器启动时要运行的命令（CMD替代先前命令，ENTRYPOINT在先前命令后追加）</td></tr><tr><td>COPY</td><td>类似于ADD，将文件拷贝到镜像中</td></tr><tr><td>ENV</td><td>构建时设置环境变量</td></tr></tbody></table><h2><span id="构建过程">构建过程</span></h2><ul><li>每个保留关键字（指令）都必须是大写字母</li><li>从上到下顺序执行</li><li>“#” 表示注释</li><li>每一个指令都会创建提交一个新的镜像层并提交</li></ul><h2><span id="构建实例">构建实例</span></h2><p><a href="https://github.com/CentOS/sig-cloud-instance-images/blob/b2d195220e1c5b181427c3172829c23ab9cd27eb/Docker(%E6%9C%AA%E5%AE%8C)/Dockerfile">https://github.com/CentOS/sig-cloud-instance-images/blob/b2d195220e1c5b181427c3172829c23ab9cd27eb/Docker(未完)/Dockerfile</a></p><p><img src="/2022/01/15/docker-wei-wan/image-20220123141814543.png" alt="image-20220123141814543"></p><blockquote><p>自己创建一个镜像</p></blockquote><pre class=" language-shell"><code class="language-shell"># 1、编写脚本[root@DTXG dockerfile]# vim mydockerfile[root@DTXG dockerfile]# cat mydockerfile FROM centosMAINTAINER dtxg<xxx@qq.com>ENV MYPATH /usr/localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo "---end---"CMD /bin/bash# 2、构建 docker build -f 脚本 -t 镜像名:版本 .[root@DTXG dockerfile]# docker build -f mydockerfile -t mycentos:0.1 .[root@DTXG dockerfile]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED          SIZEmycentos              0.1       40d82e4f5718   40 seconds ago   326MB# 3、测试[root@DTXG dockerfile]# docker run -it mycentos:0.1[root@6a2a19d5ab6c local]# pwd/usr/local</xxx@qq.com></code></pre><p>查看构建过程<code>docker history</code></p><pre class=" language-shell"><code class="language-shell">[root@DTXG dockerfile]# docker history 40d82e4f5718IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT40d82e4f5718   5 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "/bin…   0B        44bd2084ef1b   5 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        07b80a57a87f   5 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        7887c8986ee8   5 minutes ago   /bin/sh -c #(nop)  EXPOSE 80                    0B        0cf57fd4c4e5   5 minutes ago   /bin/sh -c yum -y install net-tools             28.4MB    25aa75617da6   5 minutes ago   /bin/sh -c yum -y install vim                   66.3MB    8e9a6faf2ee5   5 minutes ago   /bin/sh -c #(nop) WORKDIR /usr/local            0B        afcc60bb6a03   5 minutes ago   /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B        d2271549fded   5 minutes ago   /bin/sh -c #(nop)  MAINTAINER dtxg<xxx@qq.co… 4 0b 5d0da3dc9764 months ago bin sh -c #(nop) cmd [" bash"] <missing>      4 months ago    /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        <missing>      4 months ago    /bin/sh -c #(nop) ADD file:805cb5e15fb6e0bb0…   231MB</missing></xxx@qq.co…></code></pre><blockquote><p>发布自己的镜像</p></blockquote><p>登录</p><pre class=" language-shell"><code class="language-shell">[root@DTXG dockerfile]# docker login --helpUsage:  docker login [OPTIONS] [SERVER]Log in to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username</code></pre><p>发布</p><pre class=" language-shell"><code class="language-shell">docker push 镜像名:版本</code></pre><h1><span id="docker网络">Docker网络</span></h1><h2><span id="理解doker0">理解Doker0</span></h2>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/2022/01/15/juc/"/>
      <url>/2022/01/15/juc/</url>
      
        <content type="html"><![CDATA[<h1><span id="什么是juc">什么是JUC？</span></h1><p>指的是java.util包下的三个工具类：</p><ol><li>java.util.concurrent</li><li>java.util.concurrent.atomic</li><li>java.util.concurrent.locks</li></ol><p>实现<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&amp;q=%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>的三种方式：</p><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li></ol><p><strong>Runnable</strong>没有返回值、效率相比于Callable相对较低！</p><p><strong>业务</strong>：普通的线程代码 Thread</p><p><strong>1.什么是JUC?（java util concurrent）</strong></p><p><strong>2.java线程和进程</strong></p><p><strong>3.Lock锁中的synchonized部分</strong></p><p><strong>4.8锁现象</strong></p><p><strong>5.不安全的集合类</strong></p><h1><span id="线程和进程">线程和进程</span></h1><p><strong>进程</strong>：是一个程序，一个进程包含多个线程，且至少包含一个。</p><p><strong>Java默认有两个线程：main 和 GC。</strong>Java是<strong>不能开启线程的</strong>，底层是调用start0()是一个native方法，由底层的C++方法编写。java无法直接操作硬件。</p><p><strong>并发：</strong>CPU单核，多个线程共用一个资源，快速交替方式达到并行的假象。本质-&gt;充分利用cpu资源。</p><p><strong>并行：</strong>CPU多核，多个线程同时执行</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取cpu核数*</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>线程有几个状态：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State<span class="token punctuation">{</span>      NEW<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//新生</span>      RUNNABLE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//运行</span>      BLOCKED<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//阻塞</span>      BLOCKED<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//等待</span>      TIMED_WAITING<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时等待</span>      TERMINATED<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止</span><span class="token punctuation">}</span></code></pre><h1><span id="wait和sleep的区别"><strong>wait和sleep的区别</strong></span></h1><p>wait:来自Object类，<strong>会释放锁</strong>，<strong>必须</strong>在同步代码块中使用，<strong>不需要</strong>捕获异常</p><p>让当前线程进入等待状态，当别的其他线程调用notify()或者notifyAll()方法时，当前线程进入就绪状态。wait方法必须在同步上下文中调用。也就是说，<strong>如果想要调用wait方法，前提是必须获取对象上的锁资源。当wait方法调用时，当前线程会释放已获取的对象锁资源，并进入等待队列</strong>，其他线程就可以尝试获取对象上的锁资源。</p><p>sleep：来自Thread类是一个静态方法，<strong>不会释放锁！</strong>（睡着了），可以在<strong>任何地方</strong>使用，<strong>必须</strong>要捕获异常</p><p>让当前线程休眠指定时间。休眠时间的准确性依赖于系统时钟和CPU调度机制。不释放以获取的锁资源，<strong>如果sleep方法在同步上下文中调用，那么其他线程是无法进入当前同步快或者同步方法中的</strong>。可通过interrupt()方法来唤醒休眠线程。</p><h1><span id="lock锁">Lock锁(*)</span></h1><h2><span id="传统的synchronized锁队列锁"><strong>传统的synchronized锁：队列锁</strong></span></h2><p><strong>sychronized的作用：</strong></p><p>在并发编程中会存在线程安全问题，主要原因是存在共享数据和多线程共同操作共享数据。关键字sychronized可以保证在同一时刻只有一个线程可以执行某个方法或某个代码块（临界区），同时synchronized可以保证一个线程的变化可见。</p><p>只有共享资源读写访问才需要同步化，如果不是共享资源就没有必要同步。</p><p><strong>三种应用方式</strong></p><ul><li>修饰<strong>实例</strong>方法，对当前实例进行加锁，进入同步代码前需获得当前<strong>实例的锁</strong></li><li>修饰<strong>静态</strong>方法，对类对象加锁，要先获得当前<strong>类对象的锁</strong></li><li>修饰<strong>代码块</strong>，指定加锁对象，对给定对象加锁，要先获得给定<strong>对象的锁</strong></li></ul><p><strong>同步方法（静态方法、实例方法）</strong></p><p><strong>用sychronized修饰的方法就叫做同步方法，保证A线程执行该方法的时候，其他线程只能在方法外等着。</strong></p><pre class=" language-JAVA"><code class="language-JAVA">synchronized public void doWorlk(){     ...}</code></pre><p>对于非静态类方法，同步锁就是this(实例对象)</p><p>对于静态类方法，同步锁是当前方法所在类的字节码对象（类对象）</p><p><strong>同步代码块</strong></p><pre class=" language-JAVA"><code class="language-JAVA">syschronized(同步锁){  ....}</code></pre><p><strong>同步锁：</strong>在任何时候最多只能有一个线程有同步锁，其他线程只能在代码块外等着。</p><p>为保证每个线程都能正常执行原子操作，Java引入了线程同步机制。java程序运行使用任何对象作为同步监听对象，但一般的，我们把<strong>当前并发访问的共同资源作为同步监听对象。</strong></p><p><strong>举个栗子：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>IF_ACMPEQ<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 12:31 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketDemo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    并发：多个线程同时操作同一个资源类，把资源类丢入线程</span>    Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"B"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"C"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//    票数</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  买票的方式</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了"</span> <span class="token operator">+</span> number<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"票，剩余"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当多个线程同时对一个对象的一个方法进行操作，只有一个线程能够抢到锁。因为一个对象只有一把锁，一个线程获取了该对象的锁之后，其他线程无法获取该对象的锁，就不能访问该对象的其他synchronized实例方法，但是可以访问非synchronized修饰的方法。</p><h2><span id="lock接口"><strong>Lock接口</strong></span></h2><p>Lock所是一个接口，其所有的实现类为</p><ul><li>ReentrantLock(可重入锁)</li><li>ReentrantReadWriteLock.ReadLock(可重入读写锁的读锁)</li><li>ReentrantReadWriteLock.WriteLock(可重入读写锁的写锁)</li></ul><p>Lock实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。Lock接口的实现允许锁在不同的作用范围内获取和释放，并允许以任何顺序获取和释放多个所。随着灵活的增加，也带来了更多的责任。不使用块结构锁就失去了使用synchronized方法和语句时会出现的锁自动释放功能。在大多数情况下，应使用以下语句：</p><pre class=" language-java"><code class="language-java">Lock l <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>      l<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加锁</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// access the resource protected by this lock</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         l<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解锁</span>     <span class="token punctuation">}</span></code></pre><p>加锁和解锁出现在不同作用范围中是，需谨慎确保锁定是所执行的所有代码用try-finally或try-catch保护，以确保在必要时释放锁。</p><p><strong>公平锁：</strong>十分公平，遵循先来后到</p><p><strong>非公平锁：</strong>十分不公平，出现插队现象</p><p><strong>可重入锁：</strong>如果锁具备可重入性，则称为可（可以）重（再次）入(进入同步域，即同步代码块/方法)锁(同步锁)。可重入就是指某个线程已经获得某个锁，可以再次获取相同的锁而不会出现死锁。</p><p><strong>举个栗子：</strong>修改栗子1使用lock</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.demo01;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * @author: lpc * @date: 28/11/2021 下午 12:31 * @describe: * @vision */public class SaleTicketDemo02 {  public static void main(String[] args) {    //    并发：多个线程同时操作同一个资源类，把资源类丢入线程      Ticket2 ticket2 = new Ticket2();      new Thread(() -> { for(int i = 0; i < 60; i++){ticket2.sale();} }, "A").start();      new Thread(() -> { for(int i = 0; i < 60; i++){ticket2.sale();} }, "B").start();      new Thread(() -> { for(int i = 0; i < 60; i++){ticket2.sale();} }, "C").start();    }}class Ticket2 {  //    票数  private int number = 50;  Lock lock = new ReentrantLock();  //  买票的方式  public  void sale() {    lock.lock(); // 加锁    try {      if (number > 0) {        System.out.println(Thread.currentThread().getName() + "卖出了" + number-- + "票，剩余" + number);      }    } catch (Exception e) {      e.printStackTrace();    } finally {      lock.unlock(); // 解锁    }  }}</code></pre><h2><span id="synchronized和lock锁的区别"><strong>synchronized和Lock锁的区别</strong></span></h2><p><strong>synchronized:</strong></p><ul><li>是java内置的关键字</li><li>无法获取锁的状态</li><li>会自动释放锁</li><li>线程一在获得锁的情况下阻塞了，第二个线程就只能傻傻的等着</li><li>是不可中断的、非公平的、<strong>可重入锁</strong></li><li>适合锁少量的同步代码</li><li>有代码块锁和方法锁</li></ul><p><strong>Lock:</strong></p><ul><li>是java的一个类</li><li>可判断是否获取了锁</li><li>需手动释放锁，如果不释放会造成死锁</li><li>线程一在获得锁的情况下阻塞了，可以使用tryLock()尝试获取锁</li><li>非公平的、可判断的、<strong>可重入锁</strong></li><li>适合锁大量的同步代码</li><li>只有代码块锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（拥有更多的子类）</li></ul><h2><span id="生产者和消费者"><strong>生产者和消费者</strong></span></h2><h3><span id="synchronized版">synchronized版</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pc<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 1:11 * @describe: * 线程之间通信问题：生产者和消费者问题？(口诀：等待，业务，唤醒) * 等待唤醒，通知唤醒 线程交替执行 * A B 操作同一个变量 num=0 * A num+1 * B num-1 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                  date<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                  date<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"B"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Date</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// +1</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 等待</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    number<span class="token operator">++</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知其他线程，我+1完毕了</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// -1</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 等待</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    number<span class="token operator">--</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知其他线程，我-1完毕了</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果有abcd4个线程2+2-，这时候就会出现问题：虚假唤醒</p><p><img src="/2022/01/15/juc/image-20211128133149073.png" alt="image-20211128133149073"></p><p><strong>if改为while</strong></p><h3><span id="juc版">JUC版</span></h3><p><img src="/2022/01/15/juc/image-20211128144543100.png" alt="image-20211128144543100"></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.pc;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * @author: lpc * @date: 28/11/2021 下午 1:11 * @describe:  * 线程之间通信问题：生产者和消费者问题？(口诀：等待，业务，唤醒)  * 等待唤醒，通知唤醒 线程交替执行  * A B 操作同一个变量  * num=0  * A num+1  * B num-1 * @vision */public class B {  public static void main(String[] args) {    Date2 date = new Date2();    new Thread(            () -> {              for (int i = 0; i < 10; i++) {                try {                  date.increment();                } catch (InterruptedException e) {                  e.printStackTrace();                }              }            },            "A")        .start();    new Thread(            () -> {              for (int i = 0; i < 10; i++) {                try {                  date.decrement();                } catch (InterruptedException e) {                  e.printStackTrace();                }              }            },            "B")        .start();    new Thread(            () -> {              for (int i = 0; i < 10; i++) {                try {                  date.increment();                } catch (InterruptedException e) {                  e.printStackTrace();                }              }            },            "C")            .start();    new Thread(            () -> {              for (int i = 0; i < 10; i++) {                try {                  date.decrement();                } catch (InterruptedException e) {                  e.printStackTrace();                }              }            },            "D")            .start();  }}class Date2 {  private int number = 0;  Lock lock = new ReentrantLock();  Condition condition = lock.newCondition();  //      condition.await(); 等待  //    condition.signalAll(); 唤醒全部  // +1  public  void increment() throws InterruptedException {    lock.lock();    try {      while (number != 0) {        // 等待        condition.await();      }      number++;      System.out.println(Thread.currentThread().getName() + "==>" + number);      // 通知其他线程，我+1完毕了      condition.signalAll();    } catch (InterruptedException e) {      e.printStackTrace();    } finally {      lock.unlock();    }  }  // -1  public  void decrement() throws InterruptedException {    lock.lock();    try {      while (number == 0) {        // 等待        condition.await();      }      number--;      System.out.println(Thread.currentThread().getName() + "==>" + number);      // 通知其他线程，我-1完毕了      condition.signalAll();    } catch (InterruptedException e) {      e.printStackTrace();    } finally {      lock.unlock();    }  }}</code></pre><p>无序</p><p><img src="/2022/01/15/juc/image-20211128145637224.png" alt="image-20211128145637224"></p><h4><span id="condition监视器顺序唤醒线程">Condition监视器（顺序唤醒线程）</span></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 1:11 * @describe: A 执行完调用B B 执行完调用C C 执行完调用A * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Date3 date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               date<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        date<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        date<span class="token punctuation">.</span><span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 资源类</span><span class="token keyword">class</span> <span class="token class-name">Date3</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Lock lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1A 2B 3C</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务，判断-->执行-->通知</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 等待</span>        condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>AAAAAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//      唤醒指定的人 B</span>      number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      condition2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通知监视器2</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务，判断-->执行-->通知</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//等待</span>        condition2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      number<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//      唤醒3</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>BBBBBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      condition3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务，判断-->执行-->通知</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//等待</span>        condition3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//通知1</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>CCCCCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      condition1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="8锁现象">8锁现象</span></h1><p>掌握8中锁的现象永远知道<strong>锁的是谁</strong>！</p><p><strong>深刻理解我们的锁</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 3:15 * @describe: * 8锁 就是关于锁的8个问题 * 1、标准情况下，两个线程，先打印发短信还是打电话?  1/发短信 2/打电话 * 2、sendSms延迟4秒，两个线程，先打印发短信还是打电话 ?  1/发短信 2/打电话 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>      Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//现象二时添加，让线程先睡4秒种</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现象一：两个方法都使用synchronized关键字，一个对象两个线程，先执行<strong>发短信</strong></p><p><strong>原因：synchronized 锁的对象是方法都调用者，两个方法是同一个所 ，谁先拿到谁执行</strong> </p><p>现象二：让线程先睡4秒，结果依然是先<strong>发短信</strong></p><p><strong>原因：synchronized 锁的对象是方法都调用者，两个方法是同一个所 ，谁先拿到谁执行</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 3:15 * @describe: * 8锁 就是关于锁的8个问题 * 3、增加了一个普通方法，先打印发短信，还是hello? * 4、两个对象，两个同步方法 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//两个对象</span>      Phone2 phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Phone2 phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone1<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone2</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// synchronized 锁的对象是方法都调用者</span><span class="token comment" spellcheck="true">// 两个方法是同一个所 ，谁先拿到谁执行</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//现象二时添加，让线程先睡4秒种</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这里没有所，不是同步方法，不受锁的影响</span>  <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现象三：在之前代码的基础上，新添加一个普通的方法，一个对象两个线程，此时先执行<strong>hello方法</strong></p><p><strong>原因：普通方法没有锁就不是同步方法不受锁的影响，又由于时间的延迟，所以先打印hello</strong></p><p>现象四：新实例化一个phone对象，使用不同的对象去调用方法，两个对象两个线程，此时先执行<strong>打电话</strong></p><p><strong>原因：使用了不同的对象，以至于是锁的对象不是同一个，因为延时所以先打电话</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 3:15 * @describe: * 8锁 就是关于锁的8个问题 * 5、两个方法增加了static，只用一个对象先打印打电话？发短信？ * 6、两个对象，两个同步方法 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Phone3 phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Phone3 phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone1<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone3</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// synchronized 锁的对象是方法都调用者</span><span class="token comment" spellcheck="true">// 两个方法是同一个所 ，谁先拿到谁执行</span><span class="token comment" spellcheck="true">// 加了static 类一加载就有了  锁的Class模板(Class唯一，所以锁也是唯一)</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//现象二时添加，让线程先睡4秒种</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现象五：在之前代码的基础上，方法前添加static关键字，一个对象两个线程，先执行<strong>发短信</strong></p><p><strong>原因：加入了static，锁的对象变成了Class(Class唯一，所以锁也是唯一)，谁拿到锁谁先执行</strong></p><p>现象六：再添加一个对象，使用不同的对象进行方法的打印，两个对象两个线程，依然是先执行<strong>发短信</strong></p><p><strong>原因：加入了static，锁的对象变成了Class(Class唯一，所以锁也是唯一)两个对象用一把锁，谁拿到锁谁先执行</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 3:15 * @describe: * 8锁 就是关于锁的8个问题 * 7、一个static方法一个普通方法，只用一个对象先打印打电话？发短信？ * 8、一个static方法一个普通方法，两个对象，两个线程，先打印打电话？发短信？ * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Phone4 phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Phone4 phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone1<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone4</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 静态同步方法</span><span class="token comment" spellcheck="true">//    锁的是Class模板</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  普通同步方法</span><span class="token comment" spellcheck="true">//    锁的调用者</span>  <span class="token keyword">public</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一个static方法一个普通方法，只用一个对象先打印打电话？发短信？<strong>打电话</strong></p><p><strong>原因：static synchronized锁的是Classs,ynchronized锁的是调用者，用的是Class都锁，因为延时4，所以打印打电话</strong></p><p>一个static方法一个普通方法，两个对象，两个线程，先打印打电话？发短信？<strong>打电话</strong></p><p><strong>原因：用的是Class都锁，因为延时4，所以打印打电话</strong></p><blockquote><p><strong>只有当锁的对象或模板时同一个的时候，才能借助调用的顺序来执行。</strong></p></blockquote><h1><span id="不安全的集合类"><strong>不安全的集合类</strong></span></h1><h2><span id="list"><strong>list</strong></span></h2><p><strong>不安全类是什么？</strong></p><p>不安全类是指在多线程并发的时候不能保证数据正确性的类，通常是由于这些类并没有加锁造成的。</p><p><strong>为什么不设计成加锁的？</strong></p><p>其实，在list之前有个集合类vector，它是内部加锁，它是一个线程安全类。不优先使用它的原因是加锁可以保证数据的正确性，但却降低了并发效率。list单线程安全，多线程不安全。并发条件下会产生<strong>ConcurrentModificationException异常（并发修改异常）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>unsafe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CopyOnWriteArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 4:10 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// java.util.ConcurrentModificationException 并发修改异常</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 解决方案     * 1、 List&lt;String> list = new Vector&lt;>();     * 2、 List&lt;String> list = Collections.synchronizedList(new ArrayList&lt;>());     * 3、 List&lt;String> list = new     * CopyOnWriteArrayList&lt;>();     */</span>    <span class="token comment" spellcheck="true">// CopyOnWrite写入时复制 COW 计算机程序设计领域都一种优化策略</span>    <span class="token comment" spellcheck="true">// 在写入都时候避免覆盖，造成数据问题</span>    <span class="token comment" spellcheck="true">// CopyOnWrite使用了lock</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>如何做到保证数据的正确性呢？</strong></p><ol><li>vector替代list（并发效率低）</li><li>用Collections.synchronizedList(list)包装list（有synchronized修饰的方法效率低）</li><li>使用juc里的<strong>CopyOnWriteArrayList</strong>替代list(推荐使用)写入时复制，读写分离的思想。</li></ol><p><strong>CopyOnWriteArrayList 写时复制，读写分离</strong></p><p>既能保证数据的正确性，又不会使并发效率变低。它的add源码：</p><p><img src="/2022/01/15/juc/image-20211128163846972.png" alt="image-20211128163846972"></p><ol><li>复制一个原来数组副本，在副本里“写入元素”，最后再用写完的副本替换原本的数组，即我们在</li><li>“写”时可以“读”，这两个操作所使用的不是一个数组，不会产生影响。</li></ol><p>这样写时复制实现了读写分离，我们不需要在读的时候加锁（之前读需要加锁是因为读写不能同时进行，但一旦给读加了锁，那么读也不能同时进行，就降低了并发效率）</p><p>但是，我们每“写入”一个元素就要复制扩容一次数组，是非常耗时耗资源的，所以当我们需要写入较多数据的时候，CopyOnArrayList就不那么合适了。</p><h2><span id="set">Set</span></h2><p>也是不安全的集合类</p><p>将不安全的集合变成安全集合的方法：</p><ul><li>使用Collections工具类的<strong>synchronized</strong>包装的Set类</li><li>使用CopyOnWriteArraySet 写入复制的<strong>JUC</strong>解决方案</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>unsafe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CopyOnWriteArraySet<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 4:41 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// java.util.ConcurrentModificationException</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetTest</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 解决方案</span>    <span class="token comment" spellcheck="true">// 1、Set&lt;String> set = Collections.synchronizedSet(new HashSet&lt;>());</span>    <span class="token comment" spellcheck="true">// 2、 Set&lt;String> set = new CopyOnWriteArraySet&lt;>();</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="hashset底层是什么">HashSet底层是什么？</span></h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认的空参初始化方法</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//使用HashSet的add方法，依然是调用HashMap的底层put方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>也就是说HashSet的底层就是HashMap</p><h2><span id="map"><strong>Map</strong></span></h2><p>默认<strong>加载因子是0.75</strong>,默认的<strong>初始容量是16</strong></p><p><img src="/2022/01/15/juc/image-20211128170110672.png" alt="image-20211128170110672"></p><p>同样的HashMap基础类也存在<strong>并发修改异常</strong>！</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.unsafe;import java.util.HashMap;import java.util.Map;import java.util.UUID;/** * @author: lpc * @date: 28/11/2021 下午 4:52 * @describe: * @vision *///java.util.ConcurrentModificationExceptionpublic class MapTest {  public static void main(String[] args) {    // map 是这样用的吗？  不是，工作中不使用这个    // 默认等价什么？ new HashMap<>(16,0.75);    /**     * 解决方案     * 1. Map<string, string> map = Collections.synchronizedMap(new HashMap<>());     * 2. Map<string, string> map = new ConcurrentHashMap<>();    */    Map<string, string> map = new ConcurrentHashMap<>();    // 加载因子、初始化容量    for (int i = 1; i < 100; i++) {      new Thread(()->{        map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(0,5));        System.out.println(map);      },String.valueOf(i)).start();    }  }}</string,></string,></string,></code></pre><p><strong>TODO:研究ConcurrentHashMap底层原理：</strong></p><h1><span id="callable">Callable</span></h1><p><strong>1、可以有返回值；<br>2、可以抛出异常；<br>3、方法不同，run()/call()</strong></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.callabel;import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.FutureTask;/** * @author: lpc * @date: 28/11/2021 下午 5:31 * @describe: * @vision */public class CallableTest {  public static void main(String[] args) throws ExecutionException, InterruptedException {    //放入Thread中使用，结果会被缓存    MyThread myThread = new MyThread();    FutureTask futureTask = new FutureTask(myThread);    new Thread(futureTask,"A").start();    new Thread(futureTask,"B").start();    // 这个get方法可能会被阻塞，如果在call方法中是一个耗时的方法，所以一般情况我们会把这个放在最后，或者使用异步通信    Integer integer = (Integer) futureTask.get();    System.out.println(integer);  }}class MyThread implements Callable<integer> {  @Override  public Integer call() throws Exception {    System.out.println("call");    return 1024;  }}</integer></code></pre><h1><span id="常用的辅助类">常用的辅助类</span></h1><h2><span id="countdownlatch">CountDownLatch</span></h2><p>减法计数器</p><p><img src="/2022/01/15/juc/image-20211128180749718.png" alt="image-20211128180749718"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>add<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 6:08 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// 计数器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 总数是6 必须要执行任务的时候 再使用</span>    CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"go out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// -1</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待计数器归0 在向下执行</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"close door"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主要方法：</p><ul><li>countDown 减一操作；</li><li>await 等待计数器归零</li></ul><p>await 等待计数器归零，就唤醒，再继续向下运行</p><h2><span id="cyclickbarrier">CyclickBarrier</span></h2><p>加法计数器</p><p><img src="/2022/01/15/juc/image-20211128181943651.png" alt="image-20211128181943651"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>add<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BrokenBarrierException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CyclicBarrier<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 6:20 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//    集齐7课龙珠召唤神龙</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 召唤龙珠的线程  第二个参数是线程</span>    CyclicBarrier cyclicBarrier <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span>            <span class="token number">7</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"召唤神龙成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//  Lambda能拿到i吗</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"拿到了"</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">"颗龙珠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="semaphore">Semaphore</span></h2><p>信号量</p><p><img src="/2022/01/15/juc/image-20211128182926615.png" alt="image-20211128182926615"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>add<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Semaphore<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 6:30 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 线程容量 限流</span>    Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//          acquire() 得到许可证</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                  semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"抢到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"离开车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// release() 释放许可证</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">1</span>抢到车位<span class="token number">3</span>抢到车位<span class="token number">2</span>抢到车位<span class="token number">1</span>离开车位<span class="token number">2</span>离开车位<span class="token number">3</span>离开车位<span class="token number">5</span>抢到车位<span class="token number">4</span>抢到车位<span class="token number">6</span>抢到车位<span class="token number">5</span>离开车位<span class="token number">4</span>离开车位<span class="token number">6</span>离开车位</code></pre><p>原理：</p><p><strong>semaphore.acquire()获得资源，如果资源已经使用完了，就等待资源释放后再进行使用！</strong></p><p><strong>semaphore.release()释放，会将当前的信号量释放+1，然后唤醒等待的线程！</strong></p><p>作用： 多个共享资源互斥的使用！ 并发限流，控制最大的线程数！</p><h1><span id="读写锁">读写锁</span></h1><p><img src="/2022/01/15/juc/image-20211128202611842.png" alt="image-20211128202611842"></p><p><strong>ReadWriteLock</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>rw<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantReadWriteLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 7:48 * @describe: * 独占锁(写锁) 一次只能被一个线程占有 * 共享锁(读锁) 多个线程可以同时占有 * ReadWriteLock * 读-读 可以共存 * 读-写 不能共存 * 写-写 不能共存 一次只有一个线程能写 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteLockDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MyCacheLock myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCacheLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写入</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        myCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//读取</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        myCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 自定义缓存 */</span><span class="token keyword">class</span> <span class="token class-name">MyCache</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存 写</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 取 读</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object o <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读入ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 自定义缓存加入锁 */</span><span class="token keyword">class</span> <span class="token class-name">MyCacheLock</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读写锁 更加细粒度都控制</span>  <span class="token keyword">private</span> ReentrantReadWriteLock readWriteLock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存 写，写入都时候，只希望同时只有一个线程写</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 取 读,多有人都可以读</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      Object o <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读入ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>没有使用锁</p><pre class=" language-tex"><code class="language-tex">1写入12写入23写入34写入43写入ok4写入ok2写入ok5写入51写入ok5写入ok1读取14读取44读入ok2读取21读入ok3读取33读入ok2读入ok5读取55读入ok</code></pre><p>使用读写锁</p><pre class=" language-tex"><code class="language-tex">1写入11写入ok2写入22写入ok4写入44写入ok3写入33写入ok5写入55写入ok1读取11读入ok3读取33读入ok5读取55读入ok2读取24读取44读入ok2读入ok</code></pre><p>所以如果我们不加锁的情况，多线程的读写会造成数据不可靠的问题。</p><p>我们也可以采用<strong>synchronized</strong>这种重量锁和轻量锁 <strong>lock</strong>去保证数据的可靠。</p><p>但是这次我们采用更细粒度的锁：<strong>ReadWriteLock</strong> 读写锁来保证</p><h1><span id="阻塞队列">阻塞队列</span></h1><img src="/2022/01/15/juc/image-20211128203800581.png" alt="image-20211128203800581"><p><img src="/2022/01/15/juc/image-20211128204139870.png" alt="image-20211128204139870"></p><h2><span id="blockqueue">BlockQueue</span></h2><p>是Collection的一个子类</p><p>什么情况下我们会使用阻塞队列：多线程并发处理、线程池</p><p><img src="/2022/01/15/juc/image-20211128205210583.png" alt="image-20211128205210583"></p><p>BlockingQueue 有四组api</p><table><thead><tr><th>方式</th><th>抛出异常</th><th>不会抛出异常，有返回值</th><th>阻塞，等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer</td><td>put</td><td>offer(timenum.timeUnit)</td></tr><tr><td>移出</td><td>remove</td><td>poll</td><td>take</td><td>poll(timenum,timeUnit)</td></tr><tr><td>判断队首元素</td><td>element</td><td>peek</td><td>-</td><td>-</td></tr></tbody></table><p>第一组add 、remove，会抛出异常</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//会抛出异常</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//      队列的大小</span>  ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    队列大小3，再次添加</span>  <span class="token comment" spellcheck="true">//    System.out.println(blockingQueue.add("d"));</span>  <span class="token comment" spellcheck="true">//    报错 IllegalStateException: Queue full 队列已满</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队首:"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    先进先移除</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    再次移除第四个</span>  <span class="token comment" spellcheck="true">//    报错 NoSuchElementException 没有元素</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二组offer、 poll，没有抛出异常</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//不抛出异常</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//      队列的大小</span>  ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false 没有抛出异常</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队首:"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 移除</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// null 没有抛出异常</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第三组put、take</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//等待/阻塞 (一直等待)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//      队列的大小</span>  ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// blockingQueue.put("d");//没有位置了，会一直等待</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有元素了，会一直等待</span><span class="token punctuation">}</span></code></pre><p>第四组offer(timenum.timeUnit)、poll(timenum,timeUnit)</p><pre class=" language-JAVA"><code class="language-JAVA">//等待/阻塞 (等待超时)  public static void test4() throws InterruptedException {    //      队列的大小    ArrayBlockingQueue blockingQueue = new ArrayBlockingQueue<>(3);    System.out.println(blockingQueue.offer("a"));    System.out.println(blockingQueue.offer("b"));    System.out.println(blockingQueue.offer("c"));//    等待2秒，然后退出    blockingQueue.offer("d",2, TimeUnit.SECONDS);    System.out.println("===");    System.out.println(blockingQueue.poll());    System.out.println(blockingQueue.poll());    System.out.println(blockingQueue.poll());    //超过2秒，就不取了    System.out.println(blockingQueue.poll(2, TimeUnit.SECONDS));  }</code></pre><h2><span id="同步队列">同步队列</span></h2><p>同步队列 没有容量，也可以视为<strong>容量为1的队列；</strong></p><p>进去一个元素，必须等待取出来之后，才能再往里面放入一个元素；</p><p><strong>put</strong>方法 和 <strong>take</strong>方法；</p><p><strong>Synchronized</strong> 和 其他的<strong>BlockingQueue</strong> 不一样 它不存储元素；</p><p>put了一个元素，就必须从里面先take出来，否则不能再put进去值！</p><p>并且SynchronousQueue 的take是使用了<strong>lock锁保证线程安全</strong>的。</p><h3><span id="synchronousqueue">SynchronousQueue</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>bq<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>SynchronousQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 上午 11:19 * @describe: * 和其他的BlockingQueue不一样，SynchronousQueue 不存储元素 * put了一个元素，必须取出来，才能再次put值 * @vision */</span><span class="token comment" spellcheck="true">// 同步队列</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronousQueueDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 同步队列</span>    SynchronousQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"put 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"put 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"put 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"T1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"T2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="线程池">线程池</span></h1><p><strong>线程池：三大方式、七大参数、四种拒绝策略（*）</strong></p><blockquote><p>池化技术</p></blockquote><p>程序的运行，本质：占用系统的资源！我们需要去优化资源的使用 ===&gt; 池化技术</p><p>线程池、JDBC的连接池、内存池、对象池 等等。。。。</p><p>资源的创建、销毁十分消耗资源</p><p><strong>池化技术</strong>：事先准备好一些资源，如果有人要用，就来我这里拿，用完之后还给我，以此来提高效率。</p><p><img src="/2022/01/15/juc/image-20211129115046821.png" alt="image-20211129115046821"></p><h2><span id="线程池的好处">线程池的好处：</span></h2><p>1、降低资源的消耗；</p><p>2、提高响应的速度；</p><p>3、方便管理；</p><p><strong>线程复用、可以控制最大并发数、管理线程；</strong></p><h2><span id="线程池三大方法">线程池：三大方法</span></h2><p>ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程<br>ExecutorService threadPool2 = Executors.newFixedThreadPool(5); //创建一个固定的线程池的大小<br>ExecutorService threadPool3 = Executors.newCachedThreadPool(); //可伸缩的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pool<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 上午 11:48 * @describe: Executors 工具类、有3大方法 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    ExecutorService threadPool = Executors.newSingleThreadExecutor(); // 单个线程</span>    <span class="token comment" spellcheck="true">//    ExecutorService threadPool = Executors.newFixedThreadPool(5);//固定的线程池</span>    ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可伸缩的池</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用了线程池后，用线程池来创建线程</span>        threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//    线程池用完后，程序结束，关闭线程池</span>      threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="七大参数">七大参数</span></h2><p>源码分析</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//三大方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>      <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                              0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                              <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                 0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                 <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                 60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                 <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//本质 ThreadPoolExecutor()</span><span class="token comment" spellcheck="true">//可以看到7大参数</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//核心线程池大小</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//最大核心线程池大小</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时了没有人调用就会释放</span>                              TimeUnit unit<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时单位</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//阻塞队列</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程工厂 创建线程都 一般不用动</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//拒绝策略</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>                null <span class="token operator">:</span>                AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>阿里巴巴的Java操作手册中明确说明：对于Integer.MAX_VALUE初始值较大，所以一般情况我们要使用底层的<strong>ThreadPoolExecutor</strong>来创建线程池。</p><p><img src="/2022/01/15/juc/image-20211129121147520.png" alt="image-20211129121147520"></p><h2><span id="四种拒绝策略">四种拒绝策略</span></h2><p><img src="/2022/01/15/juc/image-20211129121849457.png" alt="image-20211129121849457"></p><pre><code>1. new ThreadPoolExecutor.AbortPolicy()： //该拒绝策略为：银行满了，还有人进来，不处理这个人的，并抛出异常超出最大承载，就会抛出异常：队列容量大小+maxPoolSize2. new ThreadPoolExecutor.CallerRunsPolicy()： //该拒绝策略为：哪来的去哪里 main线程进行处理3. new ThreadPoolExecutor.DiscardPolicy(): //该拒绝策略为：队列满了,丢掉异常，不会抛出异常。4. new ThreadPoolExecutor.DiscardOldestPolicy()： //该拒绝策略为：队列满了，尝试去和最早的进程竞争，不会抛出异常</code></pre><h2><span id="手动创建线程池">手动创建线程池</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pool<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 12:12 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DIYPool</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>      ExecutorService threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                        <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//核心线程</span>                        <span class="token number">5</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//最大核心线程</span>                        <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//单位</span>              <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//阻塞队列</span>              Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//工厂</span>              <span class="token comment" spellcheck="true">//拒绝策略</span><span class="token comment" spellcheck="true">//              new ThreadPoolExecutor.AbortPolicy() //抛异常</span><span class="token comment" spellcheck="true">//              new ThreadPoolExecutor.CallerRunsPolicy()//哪来去哪</span><span class="token comment" spellcheck="true">//              new ThreadPoolExecutor.DiscardPolicy()//满了不抛异常</span>              <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//满了和第一个竞争不管是否失败，不抛异常</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//最大承载deque+max</span>          <span class="token comment" spellcheck="true">//超过报RejectedExecutionException异常</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 使用了线程池后，用线程池来创建线程</span>              threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>                      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//    线程池用完后，程序结束，关闭线程池</span>          threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="如何设置线程池的大小最大线程如何设置">如何设置线程池的大小/最大线程如何设置</span></h2><p><strong>1、CPU密集型：电脑的核数是几核就选择几；选择maximunPoolSize的大小</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取cpu 的核数</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService service <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token number">2</span><span class="token punctuation">,</span>                max<span class="token punctuation">,</span>                <span class="token number">3</span><span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2、I/O密集型：</strong></p><p>在程序中有15个大型任务，io十分占用资源；</p><p><strong>I/O密集型就是判断我们程序中十分耗I/O的线程数量，大约是最大I/O数的一倍到两倍之间。</strong></p><h1><span id="四大函数式接口">四大函数式接口(*)</span></h1><p>新时代的程序员：<strong>lambda表达式、链式编程、函数式接口、Stream流式计算</strong></p><p>函数式接口：只有一个方法的接口</p><p><img src="/2022/01/15/juc/image-20211129124442949.png" alt="image-20211129124442949"></p><p><strong>4大原生函数式接口</strong></p><p><img src="/2022/01/15/juc/image-20211129124815898.png" alt="image-20211129124815898"></p><h2><span id="function-函数型接口">Function 函数型接口</span></h2><p>函数式接口：有一个输入参数，有一个输出</p><p><img src="/2022/01/15/juc/image-20211129125547893.png" alt="image-20211129125547893"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 12:49 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1函数式接口：有一个输入参数，有一个输出</span>    <span class="token comment" spellcheck="true">//    Function function=new Function&lt;String,String>() {</span>    <span class="token comment" spellcheck="true">//        @Override</span>    <span class="token comment" spellcheck="true">//        public String apply(String s) {</span>    <span class="token comment" spellcheck="true">//            return s;</span>    <span class="token comment" spellcheck="true">//        }</span>    <span class="token comment" spellcheck="true">//    };</span>    <span class="token comment" spellcheck="true">//      2只要是函数式接口 就可用lambda表达式</span>    Function function <span class="token operator">=</span>        <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="predicate-断定型接口">Predicate 断定型接口</span></h2><p>断定型接口：有一个输入参数，返回值只能式boolean</p><p><img src="/2022/01/15/juc/image-20211129140346388.png" alt="image-20211129140346388"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Predicate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 2:00 *@describe: *@vision */</span><span class="token comment" spellcheck="true">//断定型接口：有一个输入参数，返回值只能式boolean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断字符串是否为空</span><span class="token comment" spellcheck="true">//      Predicate&lt;String> predicate = new Predicate&lt;String>(){</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//          @Override</span><span class="token comment" spellcheck="true">//          public boolean test(String str) {</span><span class="token comment" spellcheck="true">//              return str.isEmpty();</span><span class="token comment" spellcheck="true">//          }</span><span class="token comment" spellcheck="true">//      };</span>    Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> predicate<span class="token operator">=</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="consummer-消费型接口">Consummer 消费型接口</span></h2><p>消费型接口：只有输入，没有返回值</p><p><img src="/2022/01/15/juc/image-20211129141023291.png" alt="image-20211129141023291"></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.function;import java.util.function.Consumer;import java.util.function.Predicate;/** *@author: lpc *@date: 29/11/2021 下午 2:00 *@describe: *@vision *///消费型接口：只有输入，没有返回值public class Demo03 {  public static void main(String[] args) {//    Consumer<string> consumer =//        new Consumer<string>() {//          @Override//          public void accept(String str) {//            System.out.println(str);//          }//        };    Consumer<string> consumer =(str)->{      System.out.println(str);    };    consumer.accept("123");  }}</string></string></string></code></pre><h2><span id="suppier-供给型接口">Suppier 供给型接口</span></h2><p>供给型接口：没有参数，有返回值</p><p><img src="/2022/01/15/juc/image-20211129141127727.png" alt="image-20211129141127727"></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.function;import java.util.function.Consumer;import java.util.function.Supplier;/** *@author: lpc *@date: 29/11/2021 下午 2:00 *@describe: *@vision *///供给型接口：没有输入，有返回值public class Demo04 {  public static void main(String[] args) {//    Supplier<integer> supplier= new Supplier<integer>(){//      @Override//      public Integer get() {//        return 1024;//      }//    };    Supplier<integer> supplier=()->{ return 1024;};    System.out.println(supplier.get());  }}</integer></integer></integer></code></pre><h1><span id="stream-流式计算">Stream 流式计算</span></h1><blockquote><p>什么Stream 是流式计算</p></blockquote><p>存储+计算</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 2:18 * @describe: * * 题目要求： * 一分钟内完成此题，用一行代码实现 * 现有5个用户!筛选： * 1. Id 必须是偶数 * 2.年龄必须大于23 * 3. 用户名转为大写 * 4. 用户名倒序 * 5. 只能输出一个用户 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      User u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      User u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      User u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      User u4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      User u5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//集合就是存储</span>      List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> u3<span class="token punctuation">,</span> u4<span class="token punctuation">,</span> u5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//计算就交给stream</span>      <span class="token comment" spellcheck="true">//链式变成</span>      list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//过滤</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">23</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//转换</span>              <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uu1<span class="token punctuation">,</span>uu2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> uu2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>uu1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//排序</span>              <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//分页</span>              <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="forkjoin">ForkJoin</span></h1><p>分支合并</p><h2><span id="什么是forkjoin">什么是ForkJoin</span></h2><p>ForkJoin在jdk1.7，并行执行任务！提高效率。大数据量！</p><p>大数据：<strong>MapReduce 核心思想-&gt;把大任务拆分为小任务！</strong></p><p><img src="/2022/01/15/juc/image-20211129143700674.png" alt="image-20211129143700674"></p><h2><span id="forkjoin特点">ForkJoin特点</span></h2><p>工作窃取：B线程执行完了，偷A线程 一个任务来执行，提高效率！</p><p><img src="/2022/01/15/juc/image-20211129143834653.png" alt="image-20211129143834653"></p><p>实现原理是：<strong>双端队列</strong>！从上面和下面都可以去拿到任务进行执行！</p><h2><span id="如何使用forkjoin">如何使用ForkJoin?</span></h2><ul><li>1、通过<strong>ForkJoinPool</strong>来执行</li><li>2、计算任务 <strong>execute(ForkJoinTask&lt;?&gt; task)</strong></li><li>3、计算类要去继承ForkJoinTask；</li></ul><p>任务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>forkjoin<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinTask<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>RecursiveTask<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 2:42 * @describe: * 369等程序员 * 3000 6000(ForkJoin) 9000(Stream并行流) * 如何使用ForkJoin * 1、forkjoinPool 通过他来执行 * 2、执行任务forkjoinPool.execute(ForkJoinTask&lt;?> task) * @vision */</span><span class="token comment" spellcheck="true">// 求和计算任务!</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForkJoinDemo</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Long start<span class="token punctuation">;</span>  <span class="token keyword">private</span> Long end<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 临界值</span>  <span class="token keyword">private</span> Long temp <span class="token operator">=</span> 10000L<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">ForkJoinDemo</span><span class="token punctuation">(</span>Long start<span class="token punctuation">,</span> Long end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 计算方法</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> Long <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Long i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span>  sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      Long middle <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中间值</span>      <span class="token comment" spellcheck="true">//拆分任务</span>      ForkJoinDemo task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>      task1<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把任务压入线程队列</span>      ForkJoinDemo task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>      task2<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把任务压入线程队列</span>      <span class="token comment" spellcheck="true">// 结果</span>      <span class="token keyword">return</span> task1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>task2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>forkjoin<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinPool<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinTask<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>LongStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 3:11 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    test1();//5768</span><span class="token comment" spellcheck="true">//    test2(); // 3789</span>    <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 205</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 普通程序员</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Long i <span class="token operator">=</span> 1L<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> 10_0000_0000L<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 使用ForkJoin</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ForkJoinPool forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 任务</span>    ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 10_0000_0000L<span class="token punctuation">)</span><span class="token punctuation">;</span>    ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> submit <span class="token operator">=</span> forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 提交任务</span>    Long sum <span class="token operator">=</span> submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//Stream并行流</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> sum<span class="token operator">=</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 10_0000_0000L<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span> <span class="token operator">+</span>sum<span class="token operator">+</span> <span class="token string">"时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>.parallel().reduce(0, Long::sum)使用一个并行流去计算整个计算，提高效率。</strong></p><p><img src="/2022/01/15/juc/image-20211129153524654.png" alt="image-20211129153524654"></p><h1><span id="异步回调">异步回调</span></h1><blockquote><p>Future 设计的初衷：对将来的某个事件结果进行建模！</p></blockquote><p>其实就是前端 –&gt; 发送ajax异步请求给后端</p><p><img src="/2022/01/15/juc/image-20211129155214089.png" alt="image-20211129155214089"></p><p>但是我们平时都使用<strong>CompletableFuture</strong></p><h2><span id="没有返回值的runasync异步回调">没有返回值的runAsync异步回调</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>future<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CompletableFuture<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 3:46 *@describe: * 异步调用 CompletableFuture * 异步执行 * 成功回调 * 失败回调 *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 没有返回值的异步回调</span>    CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> completableFuture <span class="token operator">=</span>         CompletableFuture<span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"runAsync=>Void"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取执行结果 会阻塞(没有结果，会等待结果)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="有返回值的异步回调supplyasync">有返回值的异步回调supplyAsync</span></h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//有返回值的异步回调supplyAsync</span>CompletableFuture<span class="token operator">&lt;</span>Integer<span class="token operator">></span> completableFuture <span class="token operator">=</span>        CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>    completableFuture        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>t<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t = "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正常的返回结果</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u = "</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误信息</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token number">233</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误返回结果</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>whenComplete</strong>: 有两个参数，一个是t 一个是u</p><p>T：是代表的 <strong>正常返回的结果</strong>；</p><p>U：是代表的 <strong>抛出异常的错误信息</strong>；</p><p>如果发生了异常，get可以获取到<strong>exceptionally</strong>返回的值；</p><h1><span id="jmm">JMM</span></h1><h2><span id="对volatile-的理解">对Volatile 的理解</span></h2><p>Volatile 是 Java 虚拟机提供 轻量级的同步机制</p><p>1、保证可见性<br><strong>2、不保证原子性</strong><br>3、禁止指令重排</p><blockquote><p>如何实现可见性</p></blockquote><p>volatile变量修饰的共享变量在进行写操作的时候回多出一行汇编：</p><p>0x01a3de1d:movb $0×0，0×1104800（%esi）;0x01a3de24**:lock** addl $0×0,(%esp);</p><p>Lock前缀的指令在多核处理器下会引发两件事情。</p><p>1）将当前处理器缓存行的数据写回到系统内存。</p><p>2）这个写回内存的操作会使其他cpu里缓存了该内存地址的数据无效。</p><blockquote><p><strong>多处理器总线嗅探：</strong></p></blockquote><p>为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存后再进行操作，但操作不知道何时会写到内存。如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。但是在<strong>多处理器下</strong>，为了保证各个处理器的缓存是一致的，就会实现缓存缓存一致性协议，<strong>每个处理器通过嗅探在总线上传播的数据来检查自己的缓存值是不是过期了，如果处理器发现自己缓存行对应的内存地址呗修改，就会将当前处理器的缓存行设置无效状态</strong>，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据库读到处理器缓存中。</p><h2><span id="什么是jmm">什么是JMM？</span></h2><p>JMM：JAVA内存模型，不存在的东西，是一个概念，也是一个约定！</p><p><strong>关于JMM的一些同步的约定：</strong></p><p>1、线程解锁前，必须把共享变量<strong>立刻</strong>刷回主存；</p><p>2、线程加锁前，必须<strong>读取主存</strong>中的最新值到工作内存中；</p><p>3、加锁和解锁是同一把锁；</p><p>线程中分为 <strong>工作内存、主内存</strong></p><p><strong>8种操作:</strong></p><ul><li><p>Read（读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用；</p></li><li><p>load（载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中；</p></li><li><p>Use（使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令；</p></li><li><p>assign（赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中；</p></li><li><p>store（存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用；</p></li><li><p>write（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中；</p></li><li><p>lock（锁定）：作用于主内存的变量，把一个变量标识为线程独占状态；</p></li><li><p>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定；</p></li></ul><p><strong>线程A</strong></p><p>(图问题：先store在write)</p><p><img src="/2022/01/15/juc/image-20211129163421440.png" alt="image-20211129163421440"></p><p><strong>线程B</strong></p><p>(图问题：先store在write)</p><p><img src="/2022/01/15/juc/image-20211129163722185.png" alt="image-20211129163722185"></p><p><strong>JMM对这8种操作给了相应的规定</strong>：</p><ul><li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li><li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li><li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li><li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是对变量实施use、store操作之前，必须经过assign和load操作</li><li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li><li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li><li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li><li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li></ul><h2><span id="问题">问题</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>_volatile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 4:42 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线程1</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>我们发现运行后程序并没有结束？</strong></p><p>线程A并不知道main线程已经修改了num，此时线程A的num依旧等于0，所以线程A没有停止</p><p><img src="/2022/01/15/juc/image-20211129164629173.png" alt="image-20211129164629173"></p><h2><span id="volatile">volatile</span></h2><p><strong>volatile是JVM提供的轻量级的同步机制</strong></p><p>用来解决上面那个问题</p><h3><span id="保证可见性">保证可见性</span></h3><p>加入volatile关键子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>_volatile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 4:42 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不加volatile程序就会死循环</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="不保证原子性">不保证原子性</span></h3><p>原子性：不可分割；</p><p>线程A在执行任务的时候，不能被打扰的，也不能被分割的，要么同时成功，要么同时失败。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>_volatile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 4:59 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// volatile 不保证原子性</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo2</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    num<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 结果理论上是2万</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>如果不加lock和synchronized ，怎么样保证原子性？</strong></p><p>num++;不是一个原子性操作原因</p><p><img src="/2022/01/15/juc/image-20211129171735490.png" alt="image-20211129171735490"></p><p><strong>使用原子类</strong></p><p><img src="/2022/01/15/juc/image-20211129172026912.png" alt="image-20211129172026912"></p><p><strong>AtomicInteger类</strong></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc._volatile;import java.util.concurrent.atomic.AtomicInteger;/** * @author: lpc * @date: 29/11/2021 下午 4:59 * @describe: * @vision */// volatile 不保证原子性public class JMMDemo2 {  private static volatile AtomicInteger num = new AtomicInteger();  public static void add() {//    num++;不是一个原子性操作    num.getAndIncrement();//+1 CAS  }  public static void main(String[] args) {    // 结果理论上是2万    for (int i = 1; i <= 20; i++) { new thread( () -> {                for (int j = 0; j < 1000; j++) {                  add();                }              })          .start();    }    while (Thread.activeCount() > 2) {      Thread.yield();    }    System.out.println(Thread.currentThread().getName() + " " + num);  }}</=></code></pre><p>这些类的操作都直接和系统挂钩！在内存中修改</p><p>Unsafe类是一个很特殊的存在</p><h3><span id="禁止指令重排">禁止指令重排</span></h3><p><strong>什么是指令重排？</strong></p><p><strong>我们写的程序，计算机并不是按照我们自己写的那样去执行的</strong></p><p>源代码–&gt;编译器优化重排–&gt;指令并行也可能会重排–&gt;内存系统也会重排–&gt;执行</p><p><strong>处理器在进行指令重排的时候，会考虑数据之间的依赖性！</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>x<span class="token operator">=</span>x<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//3</span>y<span class="token operator">=</span>x<span class="token operator">*</span>x<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//4</span><span class="token comment" spellcheck="true">//我们期望的执行顺序是 1_2_3_4  可能执行的顺序会变成2134 1324</span><span class="token comment" spellcheck="true">//可不可能是 4123？ 不可能的</span></code></pre><p>可能造成的影响结果：前提：a b x y这四个值 默认都是0</p><table><thead><tr><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>x=a</td><td>y=b</td></tr><tr><td>b=1</td><td>a=2</td></tr></tbody></table><p><strong>正常的结果</strong>： x = 0; y =0;</p><table><thead><tr><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>b=1</td><td>a=2</td></tr><tr><td>x=a</td><td>y=b</td></tr></tbody></table><p>可能在线程A中会出现，先执行b=1,然后再执行x=a；</p><p>在B线程中可能会出现，先执行a=2，然后执行y=b；</p><p>那么就有可能结果如下：x=2; y=1.(<strong>指令重排导致的结果</strong>)</p><p><strong>volatile可以避免指令重排：</strong></p><p><strong>volatile中会加一道内存的屏障，这个内存屏障可以保证在这个屏障中的指令顺序。</strong></p><p>内存屏障：CPU指令。</p><p>内存屏障作用：</p><p>1、保证特定的操作的执行顺序；</p><p>2、可以保证某些变量的内存可见性（利用这些特性，就可以保证volatile实现的可见性）</p><p><img src="/2022/01/15/juc/image-20211129175023221.png" alt="image-20211129175023221"></p><h3><span id="总结">总结</span></h3><ul><li><strong>volatile可以保证可见性；</strong></li><li><strong>不能保证原子性</strong></li><li><strong>由于内存屏障，可以保证避免指令重排的现象产生</strong></li></ul><p>面试官：那么你知道在哪里用这个内存屏障用得最多呢？<strong>单例模式</strong></p><h1><span id="玩转单例模式">玩转单例模式</span></h1><p>饿汉式、DCL懒汉式(用到了volatile)</p><h2><span id="饿汉式">饿汉式</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>single<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 5:58 *@describe: *@vision */</span><span class="token comment" spellcheck="true">//饿汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一上来就加载 但我是想用的时候在创建 浪费空间</span>  <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Hungry Hungry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Hungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Hungry<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="dcl懒汉式">DCL懒汉式</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>single<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 6:02 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// 懒汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> key <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        key <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不要试图用反射破坏异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan lazyMan<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//双重检测模式的，懒汉式单利 DCL懒汉式</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyMan <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyMan <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          lazyMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不是一个原子性操作</span>          <span class="token comment" spellcheck="true">/**           * 1.分配空间           * 2.执行构造方法，初始化对象           * 3.把这个对象指向这个空间           *           * 123           * 132 A           *     B 此时layzMan还没有完成初始化           *     加入volatile避免指令重排           */</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lazyMan<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//反射</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    LazyMan instance = LazyMan.getInstance();</span>    Field key <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Constructor<span class="token operator">&lt;</span>LazyMan<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无视私有化构造</span>    LazyMan instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LazyMan instance3 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance3<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="静态内部类">静态内部类</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>single<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 6:37 *@describe: *@vision */</span><span class="token comment" spellcheck="true">//静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Holder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Holder <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>Holder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Holder Holder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="单例不安全-因为反射"><strong>单例不安全, 因为反射</strong></span></h2><h2><span id="枚举">枚举</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>single<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 7:00 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// enum 是一个什么？本身也是一个class类</span><span class="token keyword">public</span> <span class="token keyword">enum</span> EnumSingle <span class="token punctuation">{</span>  INSTANCE<span class="token punctuation">;</span>  <span class="token keyword">public</span> EnumSingle <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    EnumSingle instance <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    Constructor<span class="token operator">&lt;</span>EnumSingle<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EnumSingle instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用枚举，我们就可以防止反射破坏了。</p><p>枚举类型的最终反编译源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">EnumSingle</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EnumSingle<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>EnumSingle<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$VALUES<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EnumSingle <span class="token function">valueOf</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>EnumSingle<span class="token punctuation">)</span>Enum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>com<span class="token operator">/</span>ogj<span class="token operator">/</span>single<span class="token operator">/</span>EnumSingle<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">EnumSingle</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> EnumSingle <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EnumSingle INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EnumSingle $VALUES<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span>     <span class="token punctuation">{</span>        INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumSingle</span><span class="token punctuation">(</span><span class="token string">"INSTANCE"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $VALUES <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EnumSingle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            INSTANCE        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="深入理解cas">深入理解CAS</span></h1><h2><span id="什么是cas">什么是CAS？</span></h2><p><strong>CAS Compare and swap 比较和交换</strong></p><p>大厂必须深入研究底层！！！！<strong>修内功！操作系统、计算机网络原理、组成原理、数据结构</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>cas<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 7:17 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// CAS compareAndSet 比较并交换</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//        如果期望的值达到了 那么就更新 否则 就不更新</span>    <span class="token comment" spellcheck="true">// CAS 是cpu都并发原语</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为期望值是2020  实际值却变成了2021  所以会修改失败</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Unsafe类</p></blockquote><p><img src="/2022/01/15/juc/image-20211129192605731.png" alt="image-20211129192605731"></p><p>+1操作都背后：是一个内存操作</p><p><img src="/2022/01/15/juc/image-20211129193134675.png" alt="image-20211129193134675"></p><p>他也是个自旋锁</p><p><img src="/2022/01/15/juc/image-20211129193544640.png" alt="image-20211129193544640"></p><h2><span id="总结">总结</span></h2><p>CAS：比较当前工作内存中的值 和 主内存中的值，如果这个值是期望的，那么则执行操作！<strong>如果不是就一直循环</strong>，使用的是自旋锁。</p><p><strong>会阻塞</strong></p><p><strong>缺点：</strong></p><ul><li>循环会耗时；</li><li>一次性只能保证一个共享变量的原子性；</li><li>它会存在ABA问题</li></ul><h2><span id="casaba问题狸猫换太子">CAS：ABA问题？(狸猫换太子)</span></h2><p>一个线程期望A是1 然后把A改成2</p><p>另一个线程比他快，它把A换成了3然后又改成了1</p><p>第一个线程拿到A，现在A确实为1</p><p>(但这个A,还是原来都A么？)</p><p><img src="/2022/01/15/juc/image-20211129194315644.png" alt="image-20211129194315644"></p><p>线程1：期望值是1，要变成2；</p><p>线程2：两个操作：</p><ul><li>1、期望值是1，变成3</li><li>2、期望是3，变成1</li></ul><p>所以对于线程1来说，A的值还是1，所以就出现了问题，骗过了线程1；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>cas<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 7:17 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// CAS compareAndSet 比较并交换</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ===================捣乱的线程 =====================</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ===================期望的线程 =====================</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="原子引用">原子引用</span></h1><blockquote><p>解决ABA问题，对应的思想：就是使用了<strong>乐观锁~</strong></p><p>引用原子引用就解决了ABA问题:加入一个版本号</p></blockquote><h2><span id="带版本号的-原子操作">带版本号的 原子操作！</span></h2><p><strong>中途遇到问题</strong></p><p><strong>Integer 使用了对象缓存机制，默认范围是-128~127，推荐使用静态工厂方法valueOf获取对象实例，而不是new，因为valueOf使用缓存，而new一定会创建新的对象分配新的内存空间。</strong></p><p><img src="/2022/01/15/juc/image-20211129202415209.png" alt="image-20211129202415209"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>cas<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicStampedReference<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 7:17 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// CAS compareAndSet 比较并交换</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AtomicStampedReference<span class="token operator">&lt;</span>Integer<span class="token operator">></span> atomicStampedReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得版本号</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1=>"</span> <span class="token operator">+</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1："</span><span class="token operator">+</span>                  atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>                      <span class="token number">1</span><span class="token punctuation">,</span>                      <span class="token number">2</span><span class="token punctuation">,</span>                      atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a2=>"</span> <span class="token operator">+</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a2："</span><span class="token operator">+</span>                  atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>                      <span class="token number">2</span><span class="token punctuation">,</span>                      <span class="token number">1</span><span class="token punctuation">,</span>                      atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"a"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得版本号</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1=>"</span> <span class="token operator">+</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1："</span><span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"b"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="各种锁的理解">各种锁的理解</span></h1><h2><span id="公平锁非公平锁">公平锁，非公平锁</span></h2><ol><li><p>公平锁：非常公平，不能插队，必须先来后到</p></li><li><p>非公平锁：非常不公平，允许插队，可以改变顺序(默认都是非公平锁)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>   sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2><span id="可重入锁递归锁">可重入锁(递归锁)</span></h2><p><img src="/2022/01/15/juc/image-20211129204158822.png" alt="image-20211129204158822"></p><p>两者有区别：一个是一把锁，一个是两把锁</p><p><strong>synchronized</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 8:42 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// Synchronized</span><span class="token comment" spellcheck="true">// A执行完B才走?</span><span class="token comment" spellcheck="true">// A走到call才释放锁(包含拿到sms的锁，sms的锁包含call的锁),B才可以执行</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"B"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"sms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里也有锁</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>lock</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 8:48 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// lock锁</span><span class="token comment" spellcheck="true">// A线程先拿到sms锁，又拿了call的锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Phone2 phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"B"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone2</span> <span class="token punctuation">{</span>  Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"sms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里也有锁</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>lock锁必须配对，相当于lock和 unlock 必须数量相同；</li><li>在外面加的锁，也可以在里面解锁；在里面加的锁，在外面也可以解锁；</li></ul><h2><span id="自旋锁">自旋锁</span></h2><p><strong>spinlock</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> var5<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>自我设计自旋锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 9:28 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// 自旋锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpinlockDemo</span> <span class="token punctuation">{</span>  AtomicReference<span class="token operator">&lt;</span>Thread<span class="token operator">></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 加锁</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>mylock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果不是我期望的null就一直循环，如果是就把它变成我的线程</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 解锁</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>myUnlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果它是我期望的线程，就把他变成null</span>    atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 9:36 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpinLock</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    SpinlockDemo spinlockDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpinlockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>      spinlockDemo<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        spinlockDemo<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>      spinlockDemo<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        spinlockDemo<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>T1拿到锁后 T2一直在自旋(因为期望值不是null)</p><p>T1释放锁后 T2拿到锁又释放</p><p>拿到锁：把null变为线程(泛型)</p><p>释放锁：把线程变为null</p><h2><span id="死锁">死锁</span></h2><p><img src="/2022/01/15/juc/image-20211129214900507.png" alt="image-20211129214900507"></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.lock;import java.util.concurrent.TimeUnit;/** *@author: lpc *@date: 29/11/2021 下午 9:50 *@describe: *@vision */public class DeadLockDemo {  public static void main(String[] args) {    String lockA = "lockA";    String lockB = "lockB";    new Thread(new MyThread(lockA,lockB),"T1").start();    new Thread(new MyThread(lockB,lockA),"T2").start();  }}class MyThread implements Runnable{  private String lockA;  private String lockB;    public MyThread(String lockA, String lockB) {        this.lockA = lockA;        this.lockB = lockB;    }    @Override    public void run() {        synchronized(lockA){      System.out.println(Thread.currentThread().getName()+"lock:"+lockA+"=>get "+lockB);            try {                TimeUnit.SECONDS.sleep(2);            } catch (InterruptedException e) {                e.printStackTrace();            }            synchronized(lockB){                System.out.println(Thread.currentThread().getName()+"lock:"+lockB+"=>get "+lockA);            }        }    }}</code></pre><h3><span id="如何解开死锁">如何解开死锁</span></h3><p><strong>1、使用jps定位进程号，jdk的bin目录下： 有一个jps</strong></p><p>命令：<code>jps -l</code></p><p><img src="/2022/01/15/juc/image-20211129215816633.png" alt="image-20211129215816633"></p><p><strong>2、使用<code>jstack</code> 进程进程号 找到死锁信息</strong></p><p><img src="/2022/01/15/juc/image-20211129215931783.png" alt="image-20211129215931783"></p><p><strong>一般情况信息在最后：</strong></p><p><img src="/2022/01/15/juc/image-20211129220035433.png" alt="image-20211129220035433"></p>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2022/01/15/jvm/"/>
      <url>/2022/01/15/jvm/</url>
      
        <content type="html"><![CDATA[<h1><span id="jvm探究">JVM探究</span></h1><h2><span id="面试常见">面试常见：</span></h2><ul><li>请你谈谈你对JVM的理解? java8虚拟机和之前的变化更新?</li><li>什么是OOM，什么是栈溢出StackOverFlowError? 怎么分析? </li><li>JVM的常用调优参数有哪些? </li><li>内存快照如何抓取，怎么分析Dump文件？</li><li>谈谈JVM中，类加载器你的认识</li></ul><h2><span id="jvm的位置">JVM的位置</span></h2><p><img src="/2022/01/15/jvm/image-20211126152848661.png" alt="image-20211126152848661"></p><h2><span id="jvm的体系结构">JVM的体系结构</span></h2><p><img src="/2022/01/15/jvm/image-20211126154123790.png" alt="image-20211126154123790"></p><p>图 .java-&gt;.class的变化</p><p>百分之<strong>99的JVM调优都是在堆中调优</strong>，Java栈、本地方法栈、程序计数器是不会有垃圾存在的。</p><p><img src="/2022/01/15/jvm/image-20211126154421727.png" alt="image-20211126154421727"></p><h2><span id="类加载器">类加载器</span></h2><p><strong>作用：加载Class文件~</strong></p><p><img src="/2022/01/15/jvm/image-20211126160353174.png" alt="image-20211126160353174"></p><p>图 类在经过Class Loader之后的变化</p><ol><li>启动类(根)加载器  </li><li>扩展类加载器 </li><li>应用程序/系统加载器 </li><li>自定义类加载器</li></ol><h2><span id="双亲委派机制">双亲委派机制</span></h2><p>检查顺序从下至上，加载顺序从上到下。</p><p><img src="/2022/01/15/jvm/image-20211126163101723.png" alt="image-20211126163101723"></p><p>如果一个类加载器需要加载类，那么首先它会把这个类请求委派给父类加载器去完成，每一层都是如此。一直递归到顶层，当父加载器无法完成这个请求时，子类才会尝试去加载。</p><h2><span id="沙箱安全机制">沙箱安全机制</span></h2><p>Java安全模型的核心就是Java沙箱(sandbox) ,  什么是沙箱?沙箱是一个限制程序运行的环境。沙箱机制就是<strong>将Java代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问</strong>，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。  沙箱主要限制系统资源访问，那系统资源包括什么? CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。  所有的Java程序运行都可以指定沙箱，可以定制安全策略。  在Java中将执行程序分成本地代码和远程代码两种，本地代码默认视为可信任的，而远程代码则被看作是不受信的。对于授信的本地代码,可以访问一切本地资源。而对于非授信的远程代码在早期的Java实现中，安全依赖于沙箱Sandbox)机制。如下图所示JDK1.0安全模型</p><p><img src="/2022/01/15/jvm/image-20211126163559531.png" alt="image-20211126163559531"></p><p>图 JDK1.0安全模型</p><p> 但如此严格的安全机制也给程序的功能扩展带来障碍，比如当用户希望远程代码访问本地系统的文件时候，就无法实现。因此在后续的Java1.1版本中，针对安全机制做了改进，增加了安全策略，允许用户指定代码对本地资源的访问权限。如下图所示JDK1.1安全模型</p><p><img src="/2022/01/15/jvm/image-20211126163628041.png" alt="image-20211126163628041"></p><p>图 JDK1.1安全模型</p><p> 在Java1.2版本中，再次改进了安全机制，增加了代码签名。不论本地代码或是远程代码，都会按照用户的安全策略设定，由类加载器加载到虚拟机中权限不同的运行空间，来实现差异化的代码执行权限控制。如下图所示</p><p><img src="/2022/01/15/jvm/image-20211126163649772.png" alt="image-20211126163649772"></p><p>图 JDK1.6安全模型</p><p><strong>组成沙箱的基本组件</strong><br>●字节码校验器(bytecode verifier) :确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</p><p> ●类裝载器(class loader) :其中类装载器在3个方面对Java沙箱起作用  </p><ul><li><p> 它防止恶意代码去干涉善意的代码;  </p></li><li><p> 它守护了被信任的类库边界;  </p></li><li><p> 它将代码归入保护域,确定了代码可以进行哪些操作。  </p></li></ul><p>虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成， 每一个被装载的类将有一个名字，这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。  </p><p>类装载器采用的机制是双亲委派模式。  </p><p>1.从最内层JVM自带类加载器开始加载,外层恶意同名类得不到加载从而无法使用;  </p><p>2.由于严格通过包来区分了访问域,外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效。 </p><ul><li><p>存取控制器(access controller) :存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定,可以由用户指定。 </p></li><li><p>安全管理器(security manager) : 是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。 </p></li><li><p>安全软件包(security package) : java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括: </p></li></ul><ul><li><p> 安全提供者 </p></li><li><p> 消息摘要  </p></li><li><p>​    数字签名 </p></li><li><p>​    加密  </p></li><li><p>​    鉴别</p></li></ul><h2><span id="native">Native</span></h2><ul><li> native :凡是带了native关键字的，说明java的作用范围达不到了，回去调用底层c语言的库!</li><li> 会进入本地方法栈  调用本地方法本地接口 JNI (Java Native Interface)</li><li> JNI作用:开拓Java的使用，融合不同的编程语言为Java所用!最初: C、C++ </li><li> Java诞生的时候C、C++横行，想要立足，必须要有调用C、C++的程序 </li><li> 它在内存区域中专门开辟了一块标记区域: Native Method Stack，登记native方法 </li><li> 在最终执行的时候，加载本地方法库中的方法通过JNI </li><li> 例如：Java程序驱动打印机，管理系统，掌握即可，在企业级应用比较少  private native void start0(); </li><li> //调用其他接口:Socket. . WebService<del>. .http</del></li></ul><p><strong>Native Method Stack</strong><br> 它的具体做法是Native Method Stack中登记native方法，在( Execution Engine )执行引擎执行的时候加载Native Libraies。[本地库]</p><p><strong>Native Interface本地接口</strong><br> 本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序, Java在诞生的时候是C/C++横行的时候，想要立足，必须有调用C、C++的程序，于是就在内存中专门开辟了块区域处理标记为native的代码，它的具体做法是在Native Method Stack 中登记native方法,在( Execution Engine )执行引擎执行的时候加载Native Libraies。  目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间通信很发达，比如可以使用Socket通信,也可以使用Web Service等等，不多做介绍!</p><h2><span id="pc寄存器">PC寄存器</span></h2><p> 程序计数器: Program Counter Register </p><p> 每个线程都有一个程序计数器，是线程私有的，就是一个指针, 指向方法区中的方法字节码(用来存储指向像一条指令的地址， 也即将要执行的指令代码)，在执行引擎读取下一条指令, 是一个非常小的内存空间，几乎可以忽略不计</p><h2><span id="方法区method-area">方法区Method Area</span></h2><p>方法区是被所有线程共享,所有字段和方法字节码，以及一些特殊方法，如构造函数,接口代码也在此定义,简单说，所有定义的方法的信息都保存在该区域,此区域属于共享区间;  </p><p><strong>静态变量、常量、类信息(构造方法、接口定义)、运行时的常量池存在方法区中，但是实例变量存在堆内存中</strong></p><h2><span id="栈">栈</span></h2><p>栈:先进后出 </p><p>桶:后进先出 </p><p>队列:先进先出( FIFO : First Input First Output ) </p><p>栈:<strong>栈内存,主管程序的运行,生命周期和线程同步</strong>; <strong>线程结束，栈内存也就是释放,对于栈来说,不存在垃圾回收问题</strong> 一旦线程结束，栈就Over! </p><p>栈放什么东西：<strong>8大基本类型+对象引用+实例的方法</strong></p><p><strong>栈运行原理:栈帧</strong> 栈满了: StackOverflowError</p><p>栈帧图解 栈底部子帧指向上一个栈的方法 上一个栈的父帧指向栈底部方法：</p><p><img src="/2022/01/15/jvm/image-20211126200939380.png" alt="image-20211126200939380"></p><p>栈 堆 方法区交互关系：</p><p><img src="/2022/01/15/jvm/image-20211126195741076.png" alt="image-20211126195741076"></p><h2><span id="三种jvm">三种JVM</span></h2><ul><li><p>Sun公司HotSpot Java Hotspot™ 64-Bit Server VM (build 25.181-b13,mixed mode)</p><p><img src="/2022/01/15/jvm/image-20211126201732562.png" alt="image-20211126201732562"></p></li><li><p> BEA JRockit </p></li><li><p>IBM J9VM</p><p> 我们学习都是: Hotspot</p></li></ul><h2><span id="堆">堆</span></h2><p>Heap, <strong>一个JVM只有一个堆内存</strong>，堆内存的大小是可以调节的。 </p><p>类加载器读取了类文件后，一般会把什么东西放到堆中? 类, 方法，常量,变量~，保存我们所有引用类型的真实对象; </p><p>堆内存中还要细分为三个区域: </p><ul><li>新生区(伊甸园区) Young/New </li><li>养老区old </li><li>永久区Perm</li></ul><p>堆内存详细划分:</p><p><img src="/2022/01/15/jvm/image-20211126210515466.png" alt="image-20211126210515466"></p><p>GC垃圾回收,主要是在伊甸园区和养老区~ </p><p>假设内存满了,OOM,堆内存不够! java.lang.OutOfMemoryError:Java heap space </p><p>永久存储区里存放的都是Java自带的 例如lang包中的类 如果不存在这些，Java就跑不起来了 在JDK8以后，<strong>永久存储区改了个名字(元空间)</strong></p><p>堆内存溢出:</p><p><img src="/2022/01/15/jvm/image-20211126210758616.png" alt="image-20211126210758616"></p><h2><span id="新生区-老年区">新生区、老年区</span></h2><p>新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。</p><h3><span id="新生区">新生区</span></h3><ul><li>类:诞生和成长的地方，甚至死亡; </li><li>伊甸园，所有的对象都是在伊甸园区new出来的! </li><li>幸存者区(0,1)</li></ul><p> 重GC和轻GC：</p><p><img src="/2022/01/15/jvm/image-20211126211301542.png" alt="image-20211126211301542"></p><p><strong>伊甸园满了就触发轻GC，经过轻GC存活下来的就到了幸存者区，幸存者区满之后意味着新生区也满了，则触发重GC，经过重GC之后存活下来的就到了养老区。</strong> 真理:经过研究，99%的对象都是临时对象!|</p><h2><span id="永久区">永久区</span></h2><p><strong>这个区域常驻内存的。用来存放JDK自身携带的Class对象。Interface元数据，存储的是Java运行时的一些环境</strong>，这个区域不存在垃圾回收，关闭虚拟机就会释放内存</p><ul><li> jdk1.6之前:永久代,常量池是在方法区; </li><li>jdk1.7:永久代,但是慢慢的退化了，去永久代，常量池在堆中 </li><li>jdk1.8之后:无永久代,常量池在元空间</li></ul><p>JVM探究:</p><p><img src="/2022/01/15/jvm/image-20211126214302376.png" alt="image-20211126214302376"></p><p>元空间：逻辑上存在，物理上不存在 (因为存储在本地磁盘内) 所以最后并不算在JVM虚拟机内存中</p><h2><span id="堆内存调优">堆内存调优</span></h2><p>默认情况下: 分配的总内存 是电脑内存的1/4,而初始化的内存: 1/64</p><p>OOM:堆内存溢出</p><ol><li>尝试扩大堆内存看结果<ul><li>-Xms1024m -Xmx1024m -xx:+PrintGCDetails</li></ul></li><li>分析内存,看一下哪个地方出现了问题 (专业工具)</li></ol><p>在一个项目中,突然出现了OOM故障,那么该如何排除~研究为什么出错</p><ul><li>能够看到代码第几行出错:内存快照分析工具,MAT,Jprofiler</li><li>Dubug,一行行分析代码</li></ul><h3><span id="matjprogiler作用"><strong>MAT,Jprogiler作用:</strong></span></h3><ul><li>分析Dump内存文件,快速定位内存泄漏</li><li>获得堆中的数据</li><li>获得大的对象</li></ul><h3><span id="jprofiler安装过程"><strong>Jprofiler安装过程</strong></span></h3><p><a href="https://www.bilibili.com/video/BV1iJ411d7jS?p=9&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1iJ411d7jS?p=9&amp;spm_id_from=pageDriver</a></p><h3><span id="jprofiler使用"><strong>jprofiler使用</strong></span></h3><p>-Xms 设置初始化内存分配大小 1/64</p><p>-Xmx 设置最大分配内存,默认1/4</p><pre><code>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</code></pre><p><img src="/2022/01/15/jvm/image-20211126222814130.png" alt="image-20211126222814130"></p><p><img src="/2022/01/15/jvm/image-20211126222831181.png" alt="image-20211126222831181"></p><h2><span id="gc">GC</span></h2><p>GC:作用区域 堆+方法区</p><p>JVM在进行GC时，并不是对这三个区域统一回收。大部分时候，回收都是新生代~</p><ul><li>新生代</li><li>幸存区（form ， to）</li><li>老年区</li></ul><p>GC两种：轻GC（普通GC），重GC（全局GC）</p><p><strong>GC题目</strong></p><ul><li>JVM的内存模型和分区~详细到每个区放什么?</li><li>堆里面的分区有哪些? Eden,form,to,老年区,说说他们的特点?</li><li>GC的算法有哪些? 标记清除法 , 标记压缩 , 复制算法, 引用计数器, 怎么用的?</li><li>轻GC和重GC分别在什么时候发生?</li></ul><h2><span id="常用算法"><strong>常用算法</strong></span></h2><h3><span id="引用计数法"><strong>引用计数法</strong></span></h3><p><img src="/2022/01/15/jvm/image-20211126224431634.png" alt="image-20211126224431634"></p><h3><span id="复制算法"><strong>复制算法</strong></span></h3><p><img src="/2022/01/15/jvm/image-20211126225939278.png" alt="image-20211126225939278"></p><p><img src="/2022/01/15/jvm/image-20211126230421699.png" alt="image-20211126230421699"></p><ul><li>好处:没有内存的碎片</li><li>坏处:浪费了内存空间:多了一半空间永远是空 to.假设对象100%存活(极端情况)</li></ul><p><strong>复制算法最佳使用场景</strong>:对象存活度较低的时候:新生区;</p><h3><span id="标记清除算法"><strong>标记清除算法</strong></span></h3><p><img src="/2022/01/15/jvm/image-20211126230939034.png" alt="image-20211126230939034"></p><ul><li>优点:不需要额外的空间</li><li>缺点:两次扫描,严重浪费时间,会产生内存碎片</li></ul><h3><span id="标记压缩优化标记清除"><strong>标记压缩(优化标记清除)</strong></span></h3><p><img src="/2022/01/15/jvm/image-20211126231326610.png" alt="image-20211126231326610"></p><ul><li>三部曲:标记,清除.压缩</li></ul><h3><span id="如何选择四种算法">如何选择四种算法:</span></h3><p><strong>内存效率</strong>:复制算法&gt;标记清除算法&gt;标记压缩算法(时间复杂度)</p><p><strong>内存整齐度</strong>:复制算法=标记压缩算法&gt;标记清除算法</p><p><strong>内存利用率</strong>:标记压缩算法=标记清除算法&gt;复制算法</p><p>难道没有一个最优的算法吗?</p><p>答案:<strong>没有</strong>,没有最好的算法,只有最合适的算法—-&gt;GC:分带收集算法</p><p><strong>年轻代:</strong></p><ul><li>存活率低</li><li>复制算法</li></ul><p><strong>老年代：</strong></p><ul><li>区域大：存活率高</li><li>标记清除（内存碎片不是太多）+标记压缩混合实现</li></ul><h2><span id="jmm">JMM</span></h2><p><a href="https://blog.csdn.net/qq_33805483/article/details/104099089">JAVA面试题——JMM内存模型_Huntermax LC的博客-CSDN博客_jmm面试题</a></p><h3><span id="什么是jmm">什么是JMM？</span></h3><p>JMM ：（java Memory Model 缩写）java内存模型</p><h3><span id="他是干什么的">他是干什么的？</span></h3><p><img src="/2022/01/15/jvm/image-20211126232747637.png" alt="image-20211126232747637"></p><p>解决共享对象可见性的问题：volilate</p><h3><span id="他该如何学习">他该如何学习</span></h3><p>JMM ：抽象的概念，理论</p><p><img src="/2022/01/15/jvm/image-20211126232830203.png" alt="image-20211126232830203"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/01/15/redis/"/>
      <url>/2022/01/15/redis/</url>
      
        <content type="html"><![CDATA[<h1><span id="nosql概述">Nosql概述</span></h1><h2><span id="单机mysql时代">单机Mysql时代</span></h2><p>90年代,一个网站的访问量一般不会太大，单个数据库完全够用。</p><p><img src="/2022/01/15/redis/image-20211201141023679.png" alt="image-20211201141023679"></p><p>随着用户增多，网站出现以下问题：</p><ol><li>数据量增加到一定程度，单机数据库就放不下了</li><li>数据的索引（B+ Tree）,一个机器内存也存放不下</li><li>访问量变大后（读写混合），一台服务器承受不住。</li></ol><h2><span id="memcached缓存-mysql-垂直拆分读写分离">Memcached(缓存) + Mysql + 垂直拆分（读写分离）</span></h2><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以<strong>使用缓存</strong>来保证效率！</p><p><img src="/2022/01/15/redis/image-20211201141832117.png" alt="image-20211201141832117"></p><p>优化过程经历了以下几个过程：</p><ol><li>优化数据库的数据结构和索引(难度大)</li><li>文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了</li><li>MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。</li></ol><h2><span id="分库分表-水平拆分-mysql集群">分库分表 + 水平拆分 + Mysql集群</span></h2><p><img src="/2022/01/15/redis/image-20211201143245890.png" alt="image-20211201143245890"></p><h2><span id="如今最近的年代">如今最近的年代</span></h2><p>如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql数据库就能轻松解决这些问题。目前一个基本的互联网项目：</p><p><img src="/2022/01/15/redis/image-20211201144846693.png" alt="image-20211201144846693"></p><h2><span id="为什么要用nosql">为什么要用NoSQL ？</span></h2><p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！</p><h3><span id="什么是nosql">什么是Nosql</span></h3><p>NoSQL = Not Only SQL（不仅仅是SQL）</p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><h3><span id="nosql特点">Nosql特点</span></h3><p>1.方便扩展（数据之间没有关系，很好扩展！）</p><p>2.大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p><p>3.数据类型是多样型的！（不需要事先设计数据库，随取随用）</p><p>4.传统的 RDBMS 和 NoSQL</p><pre class=" language-tex"><code class="language-tex">传统的RDBMS(关系型数据库管理系统)- 结构化组织- SQL- 数据和关系都存在单独的表中 row col- 操作，数据定义语言- 严格的一致性- 基础的事务- ...</code></pre><pre class=" language-tex"><code class="language-tex">Nosql-不仅仅是数据-没有固定的查询语言-键值对存储，列存储，文档存储，图形数据库（社交关系）-最终一致性-CAP定理和BASE-高性能，高可用，高扩展-...</code></pre><h3><span id="3v3高">3v+3高</span></h3><p>大数据时代的3V ：主要是描述问题的</p><ol><li>海量Velume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高 ： 主要是对程序的要求</p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p><h2><span id="nosql的四大分类">NoSQL的四大分类</span></h2><p><strong>kv键值对:</strong></p><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+memecache</li></ul><p><strong>文档型数据库(bson格式和json一样)</strong></p><ul><li>MongDB(一般必须掌握)<ul><li>MongDB是一个基于分布式文件存储都数据库，c++编写，主要用来处理大量都文档</li><li>MongDB是一个基于关系型数据库和非关系型数据库都中间产品！MongDB是非关系型数据库中功能最丰富的，最像关系型数据库都数据库！</li></ul></li><li>ConthDB</li></ul><p><strong>列存储数据库</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图形关系数据库</strong></p><ul><li>不是存图形，放的是关系，比如：朋友圈社交网络，广告推荐</li><li>Neo4j，InfoGrid</li></ul><p><img src="/2022/01/15/redis/image-20211201155955038.png" alt="image-20211201155955038"></p><h1><span id="redis入门">Redis入门</span></h1><h2><span id="redis是什么">Redis是什么？</span></h2><p>Redis（Remote Dictionary Server )，即远程字典服务。</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><h2><span id="redis能干什么">Redis能干什么？</span></h2><ol><li>内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）</li><li>高效率、用于高速缓冲</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器(eg：浏览量)</li><li>。。。</li></ol><h2><span id="特性">特性</span></h2><ol><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事务</li><li>…</li></ol><h2><span id="环境搭建略">环境搭建（略）</span></h2><p><a href="https://blog.csdn.net/qq_36706878/article/details/105578816">Linux配置java环境变量_过客璇璇的博客-CSDN博客</a></p><p>windows:<a href="https://www.bilibili.com/video/BV1S54y1R7SB?p=8&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1S54y1R7SB?p=8&amp;spm_id_from=pageDriver</a></p><p>linux:<a href="https://www.bilibili.com/video/BV1S54y1R7SB?p=9&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1S54y1R7SB?p=9&amp;spm_id_from=pageDriver</a></p><h2><span id="性能测试">性能测试</span></h2><p><strong>redis-benchmark：</strong>Redis官方提供的性能测试工具，参数选项如下：</p><p><img src="/2022/01/15/redis/image-20211201170322732.png" alt="image-20211201170322732"></p><p>简单测试：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 测试：100个并发连接 100000请求</span>redis-benchmark -h localhost -p 6379 -c 100 -n 100000</code></pre><p><img src="/2022/01/15/redis/image-20211201171126927.png" alt="image-20211201171126927"></p><h2><span id="基础知识">基础知识*</span></h2><p>redis默认有16个数据库</p><p><img src="/2022/01/15/redis/image-20211201171529597.png" alt="image-20211201171529597"></p><p>默认使用的第0个;</p><p>16个数据库为：DB 0~DB 15 默认使用DB 0 ，可以使用<code>select n</code>切换到DB n，<code>dbsize</code>可以查看当前数据库的大小，与key数量相关。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">select</span> 3 <span class="token comment" spellcheck="true">#切换数据库</span>OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> DBSIZE <span class="token comment" spellcheck="true">#数据库大小</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">#不同数据库之间 数据是不能互通的，并且dbsize 是根据库中key的个数。</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">set</span> name DTXG <span class="token comment" spellcheck="true">#放入值</span>OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> dbsize<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 7OK127.0.0.1:6379<span class="token punctuation">[</span>7<span class="token punctuation">]</span><span class="token operator">></span> get name <span class="token comment" spellcheck="true">#不能获取到别的数据库的值</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>7<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 3OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> get name <span class="token comment" spellcheck="true">#根据key获取value</span><span class="token string">"DTXG"</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys * <span class="token comment" spellcheck="true">#获取数据所有的key</span>1<span class="token punctuation">)</span> <span class="token string">"name"</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> flushdb <span class="token comment" spellcheck="true">#清空当前数据库</span>OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys *<span class="token punctuation">(</span>empty list or set<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> FLUSHALL <span class="token comment" spellcheck="true">#清空所有数据库的数据</span>OK127.0.0.1:6379<span class="token operator">></span> keys *<span class="token punctuation">(</span>empty list or set<span class="token punctuation">)</span></code></pre><p><code>keys *</code> ：查看当前数据库中所有的key。</p><p><code>flushdb</code>：清空当前数据库中的键值对。</p><p><code>flushall</code>：清空所有数据库的键值对。</p><h2><span id="为什么redis使用6379端口">为什么Redis使用6379端口</span></h2><p><a href="https://www.zhihu.com/question/20084750">Redis 为什么要用 6379 作为默认端口？ - 知乎 (zhihu.com)</a></p><blockquote><p><strong>Redis是单线程的</strong>，Redis是基于内存操作的。</p></blockquote><p>所以Redis的性能瓶颈不是CPU,而是机器内存和网络带宽。</p><p>那么为什么Redis的速度如此快呢，性能这么高呢？QPS达到10W+</p><blockquote><p>Redis为什么单线程还这么快？</p></blockquote><ul><li>误区1：高性能的服务器一定是多线程的？</li><li>误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</li></ul><p>核心：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上的，在内存存储数据情况下，单线程就是最佳的方案。</p><h1><span id="五大数据类型">五大数据类型</span></h1><p> Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作<strong>数据库，高速缓存和消息队列</strong>代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。</p><h2><span id="redis-key">Redis-key*</span></h2><p>在redis中无论什么数据类型，在数据库中都是以key-value形式保存，通过进行对Redis-key的操作，来完成对数据库中数据的操作。</p><p>下面学习的命令：</p><ul><li><p><code>exists key</code>：判断键是否存在</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> exists name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1  <span class="token comment" spellcheck="true">#存在</span>127.0.0.1:6379<span class="token operator">></span> exists name1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre></li><li><p><code>del key</code>：删除键值对</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> del age<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> keys *<span class="token punctuation">(</span>empty list or set<span class="token punctuation">)</span></code></pre></li><li><p><code>move key db</code>：将键值对移动到指定数据库</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> move name 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">select</span> 1OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"name"</span></code></pre></li><li><p><code>expire key second</code>：设置键值对的过期时间</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> expire name 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl name <span class="token comment" spellcheck="true">#查看name的过期时间</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 8127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2 <span class="token comment" spellcheck="true">#没了</span>127.0.0.1:6379<span class="token operator">></span> get name<span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre></li><li><p><code>type key</code>：查看value的数据类型</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">type</span> agestring</code></pre></li></ul><p>关于TTL命令</p><p>Redis的key，通过TTL命令返回key的过期时间，一般来说有3种：</p><ol><li>当前key没有设置过期时间，所以会返回-1.</li><li>当前key有设置过期时间，而且key已经过期，所以会返回-2.</li><li>当前key有设置过期时间，且key还没有过期，故会返回key的正常剩余时间.</li></ol><p>关于重命名<code>RENAME</code>和<code>RENAMENX</code></p><ol><li><code>RENAME key newkey</code>修改 key 的名称</li><li><code>RENAMENX key newkey</code>仅当 newkey 不存在时，将 key 改名为 newkey 。</li></ol><h2><span id="string字符串">String(字符串)*</span></h2><p>普通的set、get直接略过。</p><p>常用命令及其示例：</p><p><code>APPEND key value</code>: 向指定的key的value后追加字符串/如果没有key就相当与新建一个kv</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> append key1 2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3 <span class="token comment" spellcheck="true">#字符串的长度</span>127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v12"</span></code></pre><p><code>STRLEN key</code>:    获取key保存值的字符串长度</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> strlen key1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3</code></pre><p><code>DECR/INCR key</code>:    将指定key的value数值进行+1/-1(仅对于数字)</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> views 0OK127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"0"</span>127.0.0.1:6379<span class="token operator">></span> incr views <span class="token comment" spellcheck="true">#+1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"1"</span>127.0.0.1:6379<span class="token operator">></span> decr views <span class="token comment" spellcheck="true">#-1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"0"</span></code></pre><p><code>INCRBY/DECRBY key n</code>:    按指定的步长对数值进行加减</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> incrby views 10 <span class="token comment" spellcheck="true">#+10</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"10"</span>127.0.0.1:6379<span class="token operator">></span> decrby views 1 <span class="token comment" spellcheck="true">#-1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"9"</span>127.0.0.1:6379<span class="token operator">></span> decrby views 4 <span class="token comment" spellcheck="true">#-4</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"5"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><p><code>INCRBYFLOAT key n</code>:    为数值加上浮点型数值</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> incrbyfloat views 0.1 <span class="token comment" spellcheck="true">#+0.1</span><span class="token string">"5.1"</span></code></pre><p><code>GETRANGE key start end</code>:    按起止位置获取字符串（闭区间，起止位置都取）</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> getrange key1 0 3 <span class="token comment" spellcheck="true">#获取0到3的字符</span><span class="token string">"hell"</span></code></pre><p><code>SETRANGE key offset value</code>:用指定的value 替换key中 offset开始的值</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> setrange key1 1 xx <span class="token comment" spellcheck="true">#从1t</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 14127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"hxxlo,everyone"</span></code></pre><p><code>SETNX key value</code>:    仅当key不存在时进行set</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> setnx key 123 <span class="token comment" spellcheck="true">#key不存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> get key<span class="token string">"123"</span>127.0.0.1:6379<span class="token operator">></span> setnx key 456 <span class="token comment" spellcheck="true"># key已存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get key<span class="token string">"123"</span></code></pre><p><code>SETEX key seconds value</code>:    set 键值对并设置过期时间</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> setex key2 6 123 <span class="token comment" spellcheck="true">#设置key2 值为 过期时间为6</span>OK127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2</code></pre><p><code>MSET key1 value1 [key2 value2..]</code>:    批量set键值对</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> mset k1 v1 k2 v2 k3 v3OK127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"k3"</span>2<span class="token punctuation">)</span> <span class="token string">"k2"</span>3<span class="token punctuation">)</span> <span class="token string">"k1"</span></code></pre><p><code>MGET key1 [key2..]</code>:    批量获取多个key保存的值</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> mget k1 k2 k31<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"v2"</span>3<span class="token punctuation">)</span> <span class="token string">"v3"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><p><code>MSETNX key1 value1 [key2 value2..]</code>:    批量设置键值对，仅当参数中所有的key都不存在时执行</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> msetnx k1 v1 k4 v4 <span class="token comment" spellcheck="true">#key都不存在才添加</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get key4 <span class="token comment" spellcheck="true">#k1存在 所以没有添加</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><p><code>GETSET key value</code>:    将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</p><pre class=" language-java"><code class="language-java"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> get key1<span class="token string">"v12"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> getset key1 <span class="token number">123</span> #将key1的的值设为<span class="token number">123</span> <span class="token string">"v12"</span> #返回旧值<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> get key1<span class="token string">"123"</span></code></pre><p><code>PSETEX key milliseconds value</code>:    和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间</p><p>String类似的使用场景：value除了是字符串还可以是数字，用途举例：</p><ul><li>计数器</li><li>统计多单位的数量：uid:123666：follow 0</li><li>粉丝数</li><li>对象存储缓存</li></ul><h2><span id="list列表">List(列表)</span></h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p><p>首先我们列表，可以经过规则定义将其变为队列、栈、双端队列等。</p><p><img src="/2022/01/15/redis/image-20211201195029982.png" alt="image-20211201195029982"></p><p>正如图Redis中List是可以进行双端操作的，所以命令也就分为了LXXX和RLLL两类，有时候L也表示List例如LLEN</p><ul><li><code>LPUSH/RPUSH key value1[value2..]</code>从左边/右边向列表中PUSH值(一个或者多个)。</li><li><code>LRANGE key start end</code>    获取list 起止元素==（索引从左往右 递增）==</li><li><code>LPUSHX/RPUSHX key value</code>    向已存在的列名中push值（一个或者多个）</li><li><code>LINSERT key BEFORE|AFTER pivot value</code>    在指定列表元素的前/后 插入value</li><li><code>LLEN key</code>    查看列表长度</li><li><code>LINDEX key index</code>    通过索引获取列表元素</li><li><code>LSET key index value</code>    通过索引为元素设值</li><li><code>LPOP/RPOP key</code>    从最左边/最右边移除值 并返回</li><li><code>RPOPLPUSH source destination</code>    将列表的尾部(右)最后一个值弹出，并返回，然后加到另一个列表的头部</li><li><code>LTRIM key start end</code>    通过下标截取指定范围内的列表</li><li><code>LREM key count value</code>    List中是允许value重复的 count &gt; 0：从头部开始搜索 然后删除指定的value 至多删除count个 count &lt; 0：从尾部开始搜索… count = 0：删除列表中所有的指定value。</li><li><code>BLPOP/BRPOP key1[key2] timout</code>    移出并获取列表的第一个/最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li><li><code>BRPOPLPUSH source destination timeout</code>    和RPOPLPUSH功能相同，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li></ul><p>代码示例：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lpush list one  <span class="token comment" spellcheck="true">#从左边push一个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lpush list two three <span class="token comment" spellcheck="true">#push多个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange list 0 -1 <span class="token comment" spellcheck="true">#获取从0到-1(全部)</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrange list 0 1 <span class="token comment" spellcheck="true">#获取从0到1 倒着获取</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> rpush list right<span class="token comment" spellcheck="true">#从右边push一个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> lrange list 0 -1 1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span></code></pre><p><img src="/2022/01/15/redis/image-20211201195952537.png" alt="image-20211201195952537"></p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span>127.0.0.1:6379<span class="token operator">></span> lpop list  <span class="token comment" spellcheck="true">#从左边弹出一个值 第一个(上左)</span><span class="token string">"three"</span>127.0.0.1:6379<span class="token operator">></span> rpop list <span class="token comment" spellcheck="true">#从右边弹出一个值 最后一个(下右)</span><span class="token string">"right"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lindex list 1 <span class="token comment" spellcheck="true">#获取下标1都值</span><span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> llen list <span class="token comment" spellcheck="true">#获取list都长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"one"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrem list 1 one <span class="token comment" spellcheck="true"># 移除1个one 从上到下</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrem list 2 three <span class="token comment" spellcheck="true">#移除2个three</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"one"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> rpush mylist hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> rpush mylist hello1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> rpush mylist hello2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> rpush mylist hello3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> ltrim mylist 1 2 <span class="token comment" spellcheck="true">#截取1到2</span>OK127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -1 1<span class="token punctuation">)</span> <span class="token string">"hello1"</span>2<span class="token punctuation">)</span> <span class="token string">"hello2"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> rpush mylist hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> rpush mylist hello1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> rpush mylist hello2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> rpoplpush mylist myotherlist <span class="token comment" spellcheck="true">#移除mylist右边 添加到myotherlist左边</span><span class="token string">"hello2"</span>127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello1"</span>127.0.0.1:6379<span class="token operator">></span> lrange myotherlist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello2"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> exists list <span class="token comment" spellcheck="true">#判断list是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> lpush list value1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"value1"</span>127.0.0.1:6379<span class="token operator">></span> lset list 0 item <span class="token comment" spellcheck="true">#将0索引都值设置为item</span>OK127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"item"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lpush mylist hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lpush mylist world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> linsert mylist before world other <span class="token comment" spellcheck="true"># 在mylist中world的前面添加一个other</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"other"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>3<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> linsert mylist after world new <span class="token comment" spellcheck="true">#在mylist中的world的后面添加一个new</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"other"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>3<span class="token punctuation">)</span> <span class="token string">"new"</span>4<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><h3><span id="小结">小结</span></h3><ul><li>list实际上是一个链表，before Node after , left, right 都可以插入值</li><li>如果key不存在，则创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在</li><li>在两边插入或者改动值，效率最高！修改中间元素，效率相对较低</li></ul><p>应用：</p><p>消息排队！消息队列（Lpush Rpop）,栈（Lpush Lpop）</p><h2><span id="set集合">Set(集合）</span></h2><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><ul><li><code>SADD key member1[member2..]</code>    向集合中无序增加一个/多个成员</li><li><code>SMEMBERS key</code>    返回集合中所有的成员</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd myset hello <span class="token comment" spellcheck="true">#往set集合放入hello</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset love <span class="token comment" spellcheck="true">#往set集合放入love</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token function">lpc</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smembers myset <span class="token comment" spellcheck="true">#返回集合中所有的成员</span>1<span class="token punctuation">)</span> <span class="token string">"love"</span>2<span class="token punctuation">)</span> <span class="token string">"lpc"</span>3<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> sismember myset hello <span class="token comment" spellcheck="true">#set中是否存在hello</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1  <span class="token comment" spellcheck="true">#存在</span>127.0.0.1:6379<span class="token operator">></span> sismember myset world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre><ul><li><code>SCARD key</code>    获取集合的成员数</li><li><code>SREM key member1[member2..]</code>    移除集合中一个/多个成员</li><li><code>SRANDMEMBER key [count]</code>    随机返回集合中count个成员，count缺省值为1</li><li><code>SPOP key [count]</code>    随机移除并返回集合中count个成员，count缺省值为1</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> scard myset <span class="token comment" spellcheck="true">#返回set集合的个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> srem myset hello <span class="token comment" spellcheck="true">#移除一个元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> scard myset<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"love"</span>2<span class="token punctuation">)</span> <span class="token string">"lpc"</span>127.0.0.1:6379<span class="token operator">></span> srandmember myset <span class="token comment" spellcheck="true"># 随机获取一个元素 默认一个</span><span class="token string">"love"</span>127.0.0.1:6379<span class="token operator">></span> srandmember myset<span class="token string">"lpc"</span>127.0.0.1:6379<span class="token operator">></span> spop myset <span class="token comment" spellcheck="true">#随机移除一个元素</span><span class="token string">"love"</span>127.0.0.1:6379<span class="token operator">></span> spop myset<span class="token string">"lpc2"</span>127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"lpc"</span></code></pre><ul><li><code>SMOVE source destination member</code>    将source集合的成员member移动到destination集合</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd myset hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token function">lpc</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset2 set2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smove myset myset2 <span class="token function">lpc</span> <span class="token comment" spellcheck="true">#myset移除lpc到myset2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> smembers myset21<span class="token punctuation">)</span> <span class="token string">"set2"</span>2<span class="token punctuation">)</span> <span class="token string">"lpc"</span></code></pre><ul><li><code>SDIFF key1[key2..]</code>    返回所有集合的差集 key1- key2 - …</li><li><code>SDIFFSTORE destination key1[key2..]</code>    在SDIFF的基础上，将结果保存到集合中==(覆盖)==。不能保存到其他类型key噢！</li><li><code>SINTER key1 [key2..]</code>    返回所有集合的交集</li><li><code>SINTERSTORE destination key1[key2..]</code>    在SINTER的基础上，存储结果到集合中。覆盖</li><li><code>SUNION key1 [key2..]</code>    返回所有集合的并集</li><li><code>SUNIONSTORE destination key1 [key2..]</code>    在SUNION的基础上，存储结果到及和张。覆盖</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd key1 a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key1 b<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key1 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key2 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key2 d<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key2 e<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> <span class="token function">sdiff</span> key1 key2<span class="token comment" spellcheck="true">#key1和key2的差集 key1-key2</span>1<span class="token punctuation">)</span> <span class="token string">"a"</span>2<span class="token punctuation">)</span> <span class="token string">"b"</span>127.0.0.1:6379<span class="token operator">></span> sinter key1 key2<span class="token comment" spellcheck="true">#key1和key2的交集</span>1<span class="token punctuation">)</span> <span class="token string">"c"</span>127.0.0.1:6379<span class="token operator">></span> sunion key1 key2 <span class="token comment" spellcheck="true">#key1和key2的并集</span>1<span class="token punctuation">)</span> <span class="token string">"b"</span>2<span class="token punctuation">)</span> <span class="token string">"c"</span>3<span class="token punctuation">)</span> <span class="token string">"a"</span>4<span class="token punctuation">)</span> <span class="token string">"e"</span>5<span class="token punctuation">)</span> <span class="token string">"d"</span></code></pre><ul><li><code>SSCAN KEY [MATCH pattern] [COUNT count]</code>    在大量数据环境下，使用此命令遍历集合中元素，每次遍历部分</li></ul><h2><span id="hash哈希">Hash（哈希）</span></h2><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>Set就是一种简化的Hash,只变动key,而value使用默认值填充。可以将一个Hash表作为一个对象进行存储，表中存放对象的信息。</p><p>key value (k-v)</p><ul><li><code>HSET key field value</code>    将哈希表 key 中的字段 field 的值设为 value 。重复设置同一个field会覆盖,返回0</li><li><code>HMSET key field1 value1 [field2 value2..]</code>    同时将多个 field-value (域-值)对设置到哈希表 key 中。</li><li><code>HGET key field value</code>    获取存储在哈希表中指定字段的值</li><li><code>HMGET key field1 [field2..]</code>    获取所有给定字段的值</li><li><code>HGETALL key</code>    获取在哈希表key 的所有字段和值</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hset myhash field <span class="token function">lpc</span> <span class="token comment" spellcheck="true">#set一个hash类型的表 key为myhash value为field lpc</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hget myhash field <span class="token comment" spellcheck="true">#获取一个元素 </span><span class="token string">"lpc"</span>127.0.0.1:6379<span class="token operator">></span> hmset myhash field hello field2 world <span class="token comment" spellcheck="true">#插入多个元素</span>OK127.0.0.1:6379<span class="token operator">></span> hmget myhash field field2 <span class="token comment" spellcheck="true">#获取多个元素</span>1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> hgetall myhash <span class="token comment" spellcheck="true">#获取myhash表全部元素</span>1<span class="token punctuation">)</span> <span class="token string">"field"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span>3<span class="token punctuation">)</span> <span class="token string">"field2"</span>4<span class="token punctuation">)</span> <span class="token string">"world"</span></code></pre><ul><li><code>HDEL key field1 [field2..]</code>    删除哈希表key中一个/多个field字段</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hdel myhash field <span class="token comment" spellcheck="true">#删除一个key中的元素的值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hget myhash field<span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><ul><li><code>HLEN key</code>    获取哈希表中字段的数量</li><li><code>HEXISTS key field</code>    查看哈希表 key 中，指定的字段是否存在。</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hlen myhash<span class="token comment" spellcheck="true">#获取myhash表中的元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1 127.0.0.1:6379<span class="token operator">></span> hexists myhash field3 <span class="token comment" spellcheck="true">#判断myhash中field3是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre><ul><li><code>HKEYS key</code>    获取哈希表key中所有的字段</li><li><code>HVALS key</code>    获取哈希表中所有值</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hkeys myhash <span class="token comment" spellcheck="true">#获取myhash表中的所有key</span>1<span class="token punctuation">)</span> <span class="token string">"field2"</span>2<span class="token punctuation">)</span> <span class="token string">"field1"</span>127.0.0.1:6379<span class="token operator">></span> hvals myhash <span class="token comment" spellcheck="true">#获取myhash中所有的values</span>1<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span></code></pre><ul><li><code>HINCRBY key field n</code>    为哈希表 key 中的指定字段的整数值加上增量n，并返回增量后结果 一样只适用于整数型字段</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hset myhash field3 5<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hincrby myhash field3 5 <span class="token comment" spellcheck="true">#给myhash表中field3增加5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> hget myhash field3<span class="token string">"10"</span>127.0.0.1:6379<span class="token operator">></span> hsetnx myhash field4 nihao <span class="token comment" spellcheck="true">#myhash中如果不存在就添加一个field4 nihao</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hsetnx myhash field4 nihao<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre><ul><li><p><code>HINCRBYFLOAT key field n</code>    为哈希表 key 中的指定字段的浮点数值加上增量 n。</p></li><li><p><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code>    迭代哈希表中的键值对。</p></li></ul><p> Hash变更的数据user name age，尤其是用户信息之类的，经常变动的信息！Hash更适合于对象的存储，Sring更加适合字符串存储！</p><h2><span id="zset有序集合">Zset（有序集合）</span></h2><p>不同的是每个元素都会关联一个double类型的分数（score）。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>score相同：按字典顺序排序</p><p>有序集合的成员是唯一的,但分数(score)却可以重复。</p><ul><li><code>ZADD key score member1 [score2 member2]</code>    向有序集合添加一个或多个成员，或者更新已存在成员的分数</li><li><code>ZRANGE key start end</code>    通过索引区间返回有序集合成指定区间内的成员</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zadd myset 1 one <span class="token comment" spellcheck="true">#添加一个元素分数为1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd myset 2 two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd myset 3 three 4 four<span class="token comment" spellcheck="true">#多次添加元素指定分数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> zrange myset 0 -1 <span class="token comment" spellcheck="true">#获取myset的0到-1的元素</span>1<span class="token punctuation">)</span> <span class="token string">"one"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"three"</span>4<span class="token punctuation">)</span> <span class="token string">"four"</span></code></pre><ul><li><code>ZRANGEBYSCORE key min max</code>    通过分数返回有序集合指定区间内的成员==-inf 和 +inf分别表示最小最大值，只支持开区间()==</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zadd salary 25000 xiaohong<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd salary 5000 zhangsan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd salary 500 <span class="token function">lpc</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zrangebyscore salary -inf +inf <span class="token comment" spellcheck="true">#从小到大根据分数排序</span>1<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"xiaohong"</span>127.0.0.1:6379<span class="token operator">></span> zrangebyscore salary -inf +inf withscores<span class="token comment" spellcheck="true">#从小到大根据分数排序，显示分数</span>1<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"500"</span>3<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>4<span class="token punctuation">)</span> <span class="token string">"5000"</span>5<span class="token punctuation">)</span> <span class="token string">"xiaohong"</span>6<span class="token punctuation">)</span> <span class="token string">"25000"</span>127.0.0.1:6379<span class="token operator">></span> zrangebyscore salary -inf 2500 withscores<span class="token comment" spellcheck="true">#从小到2500根据分数排序，显示分数</span>1<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"500"</span></code></pre><ul><li><code>ZREM key member1 [member2..]</code>    移除有序集合中一个/多个成员</li><li><code>ZCARD key</code>    获取有序集合的成员数</li><li><code>ZREVRANGE key start end</code>    返回有序集中指定区间内的成员，通过索引，分数从高到底</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">clear</span>127.0.0.1:6379<span class="token operator">></span> zrange salary 0 -11<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"xiaohong"</span>127.0.0.1:6379<span class="token operator">></span> zrem salary xiaohong <span class="token comment" spellcheck="true">#移除一个元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zrange salary 0 -11<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>127.0.0.1:6379<span class="token operator">></span> zcard salary <span class="token comment" spellcheck="true">#大小</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> zrevrange salary 0 -1<span class="token comment" spellcheck="true">#从大到小</span>1<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>2<span class="token punctuation">)</span> <span class="token string">"lpc"</span></code></pre><ul><li><code>ZCOUNT key min max</code>    计算在有序集合中指定区间score的成员数</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zadd myset 1 hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd myset 2 word 3 <span class="token function">lpc</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> zcount myset 1 3<span class="token comment" spellcheck="true">#获取1到3的数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> zcount myset 1 2<span class="token comment" spellcheck="true">#获取1到2的数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2</code></pre><p>更多api访问<a href="https://www.cnblogs.com/kylinxxx/p/13770063.html">https://www.cnblogs.com/kylinxxx/p/13770063.html</a></p><p>应用案例：</p><ol><li>set排序 存储班级成绩表 工资表排序！</li><li>普通消息，1.重要消息 2.带权重进行判断</li><li>排行榜应用实现，取Top N测试</li></ol><h1><span id="三种特殊数据类型">三种特殊数据类型</span></h1><h2><span id="geospatial地理位置">Geospatial(地理位置)</span></h2><p>朋友的定位，附近的人，打车计算距离？</p><p>Redis的Geo在3.2版本就推出了！这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人！</p><p>经纬度查询：<a href="http://www.jsons.cn/lngcode/">http://www.jsons.cn/lngcode/</a></p><p><img src="/2022/01/15/redis/image-20211202163115193.png" alt="image-20211202163115193"></p><h3><span id="有效经纬度">有效经纬度</span></h3><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul><blockquote><h2><span id="geoadd">geoadd</span></h2></blockquote><p>使用经纬度定位地理坐标并用一个有序集合zset保存，所以zset命令也可以使用</p><ul><li><code>geoadd key longitud(经度) latitude(纬度) member [..]</code>    将具体经纬度的坐标存入一个有序集合</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geoadd china:city 116.40 39.90 beijing<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 121.47 31.23 shanghai<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 106.50 29.53 chongqing<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 114.08 22.54 shenzhen<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1</code></pre><blockquote><h2><span id="geopos">GEOPOS</span></h2></blockquote><ul><li><code>geopos key member [member..]</code>    获取集合中的一个/多个成员坐标</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geopos china:city beijing shanghai chongqing shenzhen<span class="token comment" spellcheck="true">#获取key得经度和纬度</span>1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"116.39999896287918091"</span>   2<span class="token punctuation">)</span> <span class="token string">"39.90000009167092543"</span>2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"121.47000163793563843"</span>   2<span class="token punctuation">)</span> <span class="token string">"31.22999903975783553"</span>3<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>   2<span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span>4<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"114.08000081777572632"</span>   2<span class="token punctuation">)</span> <span class="token string">"22.53999903789756587"</span></code></pre><blockquote><h2><span id="geodist">GEODIST</span></h2></blockquote><p>指定单位的参数 unit 必须是以下单位的其中一个：</p><p>m 表示单位为米。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><ul><li><code>geodist key member1 member2 [unit]</code>    返回两个给定位置之间的距离。默认以米作为单位。</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geodist china:city beijing chongqing <span class="token string">"1464070.8051"</span>127.0.0.1:6379<span class="token operator">></span> geodist china:city beijing shanghai km<span class="token string">"1067.3788"</span></code></pre><blockquote><h2><span id="georadius">GEORADIUS</span></h2></blockquote><p>我附近都人？(获得附近的人的地址，定位！)通过半径查询！</p><h3><span id="关于georadius的参数">关于GEORADIUS的参数</span></h3><p>通过georadius就可以完成 附近的人功能</p><p>withcoord:带上坐标</p><p>withdist:带上距离，单位与半径单位相同</p><p>COUNT n : 只显示前n个(按距离递增排序)</p><ul><li><code>georadius key longitude latitude radius m|km|mi|ft [WITHCOORD][WITHDIST] [WITHHASH] [COUNT count]</code>    以给定的经纬度为中心， 返回集合包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</li></ul><p>指定地点定位：用于个人</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 1000 km<span class="token comment" spellcheck="true">#以110 30经纬度为中心1000km为半径查询所有</span>1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 500 km1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 1000 km withdist withcoord count 1<span class="token comment" spellcheck="true">#指定1个</span>1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   2<span class="token punctuation">)</span> <span class="token string">"341.9374"</span>   3<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      2<span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 1000 km withdist withcoord count 21<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   2<span class="token punctuation">)</span> <span class="token string">"341.9374"</span>   3<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      2<span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span>2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>   2<span class="token punctuation">)</span> <span class="token string">"923.9364"</span>   3<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"114.08000081777572632"</span>      2<span class="token punctuation">)</span> <span class="token string">"22.53999903789756587"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><h2><span id="georadiusbymember">GEORADIUSBYMEMBER</span></h2></blockquote><ul><li><code>GEORADIUSBYMEMBER key member radius...</code>    功能与GEORADIUS相同，只是中心位置不是具体的经纬度，而是使用结合中已有的成员作为中心点。</li></ul><p>城市定位</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> georadiusbymember china:city beijing 1000 km1<span class="token punctuation">)</span> <span class="token string">"beijing"</span>127.0.0.1:6379<span class="token operator">></span> georadiusbymember china:city beijing 5000 km1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>3<span class="token punctuation">)</span> <span class="token string">"shanghai"</span>4<span class="token punctuation">)</span> <span class="token string">"beijing"</span></code></pre><blockquote><h2><span id="geohash">GEOHASH</span></h2></blockquote><ul><li><code>geohash key member1 [member2..]</code>    返回一个或多个位置元素的Geohash表示。使用Geohash位置52点整数编码。</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geohash china:city beijing chongqing <span class="token comment" spellcheck="true">#将经纬转为字符串</span><span class="token comment" spellcheck="true">#两个字符串越接近 两地越近</span>1<span class="token punctuation">)</span> <span class="token string">"wx4fbxxfke0"</span>2<span class="token punctuation">)</span> <span class="token string">"wm5xzrybty0"</span></code></pre><blockquote><p>GEO底层实现原理其实就是zset，我们可以使用zset来操作GEO!</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zrange china:city 0 -11<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>3<span class="token punctuation">)</span> <span class="token string">"shanghai"</span>4<span class="token punctuation">)</span> <span class="token string">"beijing"</span>127.0.0.1:6379<span class="token operator">></span> zrem china:city beijing <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zrange china:city 0 -11<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>3<span class="token punctuation">)</span> <span class="token string">"shanghai"</span></code></pre><h2><span id="hyperloglog基数统计">Hyperloglog(基数统计)</span></h2><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。</p><p>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>其底层使用string数据类型。</p><h3><span id="什么是基数">什么是基数？</span></h3><p>数据集中不重复的元素的个数。</p><h3><span id="应用场景">应用场景：</span></h3><p>网页的访问量（UV）：一个用户多次访问，也只能算作一个人。</p><p>传统实现，存储用户的id,然后每次进行比较。当用户变多之后这种方式及其浪费空间，而我们的目的只是计数，Hyperloglog就能帮助我们利用最小的空间完成。</p><ul><li><p><code>PFADD key element1 [elememt2..]</code>    添加指定元素到 HyperLogLog中</p></li><li><p><code>PFCOUNT key [key]</code>    返回给定 HyperLogLog 的基数估算值。</p></li><li><p><code>PFMERGE destkey sourcekey [sourcekey..]</code>    将多个 HyperLogLog 合并为一个 HyperLogLog</p><pre class=" language-bash"><code class="language-bash">----------pfadd--pfcount---------------------127.0.0.1:6379<span class="token operator">></span> pfadd mykey a  b c d e f g h i j <span class="token comment" spellcheck="true">#添加元素到mykey</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey <span class="token comment" spellcheck="true">#统计数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> pfadd mykey2 i j z x c <span class="token function">v</span> b n m<span class="token comment" spellcheck="true">#添加元素到mykey2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey2<span class="token comment" spellcheck="true">#统计数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9----------------pfmerge-----------------------127.0.0.1:6379<span class="token operator">></span> pfmerge mykey3 mykey mykey2 <span class="token comment" spellcheck="true">#把mykey，mykey2的元素添加到mykey3</span>OK127.0.0.1:6379<span class="token operator">></span> pfcount mykey3 <span class="token comment" spellcheck="true">#统计数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 15 <span class="token comment" spellcheck="true">#交集 mykey和mykey2右4个重复</span></code></pre></li></ul><h2><span id="bitmap位图">BitMap(位图)</span></h2><p>使用位存储，信息状态只有 0 和 1</p><p>Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为偏移(offset)，在bitmap上可执行AND,OR,XOR,NOT以及其它位操作。</p><p>应用场景: 签到统计、状态统计</p><ul><li><code>setbit key offset value</code>    为指定key的offset位设置值</li><li><code>getbit key offset</code>    获取offset位的值</li><li><code>bitcount key [start end]</code>    统计字符串被设置为1的bit数，也可以指定统计范围按字节</li></ul><pre class=" language-bash"><code class="language-bash">------------setbit--getbit--------------127.0.0.1:6379<span class="token operator">></span> setbit sign 0 1<span class="token comment" spellcheck="true">#周一打卡了</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 1 0<span class="token comment" spellcheck="true">#周二没有打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 2 0<span class="token comment" spellcheck="true">#周二没有打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 3 1<span class="token comment" spellcheck="true">#周四打卡了</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 4 1<span class="token comment" spellcheck="true">#周五打卡了</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 5 0<span class="token comment" spellcheck="true">#周六没有打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 6 0<span class="token comment" spellcheck="true">#周日没有打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">#获取offset位的值</span>127.0.0.1:6379<span class="token operator">></span> getbit sign 4<span class="token comment" spellcheck="true">#获取周五是否打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1-----------bitcount----------------------------127.0.0.1:6379<span class="token operator">></span> bitcount sign <span class="token comment" spellcheck="true">#打卡天数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3</code></pre><ul><li><code>bitop operration destkey key[key..]</code>    对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</li><li><code>BITPOS key bit [start] [end]</code>    返回字符串里面第一个被设置为1或者0的bit位。start和end只能按字节,不能按位</li></ul><h1><span id="事务">事务</span></h1><p>Redis的单条命令是保证原子性的，<strong>但是redis事务不能保证原子性</strong></p><pre class=" language-tex"><code class="language-tex">Redis事务本质：一组命令的集合。----------------- 队列 set set set 执行 -------------------事务中每条命令都会被序列化，执行过程中按顺序执行，不允许其他命令进行干扰。一次性顺序性排他性Redis事务没有隔离级别的概念Redis单条命令是保证原子性的，但是redis事务不保证原子性！</code></pre><p>Redis事务操作过程</p><ul><li>开启事务（multi）</li><li>命令入队</li><li>执行事务（exec）</li></ul><p>所以事务中的命令在加入时都没有被执行，直到提交时才会开始执行(Exec)一次性完成。</p><h2><span id="正常执行">正常执行</span></h2><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multi<span class="token comment" spellcheck="true"># 开启事务</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1<span class="token comment" spellcheck="true"># 命令入队</span>QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> get k2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span><span class="token comment" spellcheck="true"># 事务执行</span>1<span class="token punctuation">)</span> OK2<span class="token punctuation">)</span> OK3<span class="token punctuation">)</span> <span class="token string">"v2"</span>4<span class="token punctuation">)</span> OK</code></pre><h2><span id="取消事务discurd">取消事务(discurd)</span></h2><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multi<span class="token comment" spellcheck="true"># 开启事务</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k4 v4QUEUED127.0.0.1:6379<span class="token operator">></span> discard<span class="token comment" spellcheck="true"># 放弃事务</span>OK127.0.0.1:6379<span class="token operator">></span> get key4 <span class="token comment" spellcheck="true"># 被放弃事务中命令并未执行</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><h2><span id="事务错误">事务错误</span></h2><blockquote><p>编译型异常：代码语法错误（编译时异常）所有的命令都不执行</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> getset k3<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">'getset'</span> <span class="token function">command</span><span class="token comment" spellcheck="true">#错误的命令</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k4 v4QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> EXECABORT Transaction discarded because of previous errors.<span class="token comment" spellcheck="true">#执行也报错了</span>127.0.0.1:6379<span class="token operator">></span> get k4<span class="token comment" spellcheck="true">#所有的命令都没有执行</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><blockquote><p>运行时异常(1/0)：代码逻辑错误 (运行时异常) **其他命令可以正常执行 ** &gt;&gt;&gt; 所以不保证事务原子性</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> incr k1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>1<span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range<span class="token comment" spellcheck="true">#执行失败</span>2<span class="token punctuation">)</span> OK<span class="token comment" spellcheck="true">#执行成功</span>3<span class="token punctuation">)</span> OK<span class="token comment" spellcheck="true">#执行成功</span>127.0.0.1:6379<span class="token operator">></span> get k2<span class="token comment" spellcheck="true">#虽然第一条命令报错但其他的执行成功了</span><span class="token string">"v2"</span>127.0.0.1:6379<span class="token operator">></span> get k3<span class="token comment" spellcheck="true">#所以说Redis单条指令保证原子性，但是Redis事务不能保证原子性。</span><span class="token string">"v3"</span></code></pre><h2><span id="监控watch">监控watch</span></h2><p>悲观锁：</p><ul><li>很悲观，认为什么时候都会出现问题，无论做什么都会加锁</li></ul><p>乐观锁：</p><ul><li>很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><p>使用watch key监控指定数据，相当于乐观锁加锁。</p><blockquote><p>正常执行</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> money 100 <span class="token comment" spellcheck="true"># 设置余额:100</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> out 0<span class="token comment" spellcheck="true"># 支出使用:0</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token function">watch</span> money <span class="token comment" spellcheck="true">#监视money (上锁)</span>OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> decrby money 20QUEUED127.0.0.1:6379<span class="token operator">></span> incrby out 20QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span><span class="token comment" spellcheck="true">#监视值没有被中途修改，事务正常结束</span>1<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 802<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 20</code></pre><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作（相当于getversion）</p><p>我们启动另外一个客户端模拟插队线程。</p><blockquote><p>不正常</p></blockquote><p>线程1</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">watch</span> money<span class="token comment" spellcheck="true">#监控money</span>OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> decrby money 10QUEUED127.0.0.1:6379<span class="token operator">></span> incrby out 10<span class="token comment" spellcheck="true">#没有执行</span>QUEUED</code></pre><p>线程2</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> get money<span class="token string">"80"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> money 1000<span class="token comment" spellcheck="true">#修改了线程一中监视的money</span>OK</code></pre><p>回到线程1，执行事务：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span><span class="token comment" spellcheck="true">#执行失败</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><p>解锁获取最新值，然后再加锁进行事务。</p><p>unwatch进行解锁。</p><p>注意：每次提交执行exec后都会自动释放锁，不管是否成功</p><h1><span id="jedis">Jedis</span></h1><blockquote><p>什么是Jedis？</p><p>是 官方推荐的java连接开发工具，使用java操作redis的中间件</p></blockquote><p>1.导入依赖</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <!--导入jredis的包-->    <dependency>        <groupid>redis.clients</groupid>        <artifactid>jedis</artifactid>        <version>3.2.0</version>    </dependency>    <!--fastjson-->    <dependency>        <groupid>com.alibaba</groupid>        <artifactid>fastjson</artifactid>        <version>1.2.70</version>    </dependency></dependencies></code></pre><p>2.编码测试</p><blockquote><p>连接数据库<br>操作命令<br>断开连接</p></blockquote><p>代码示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 2/12/2021 下午 10:39 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPing</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1 new Jedis对象</span>    Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// jedis 所有的命令就是我们学习的所有指令</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/01/15/redis/image-20211202230132106.png" alt="image-20211202230132106"></p><h2><span id="常用的api">常用的API</span></h2><p>string、list、set、hash、zset</p><p>所有的api命令，就是我们对应的上面学习的指令，一个都没有变化！</p><blockquote><p>key</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 2/12/2021 下午 11:09 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestKey</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清空数据库："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断某个键是否存在："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'k1','v1'>键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'k2','v2'>键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统中所有的键如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除键k2："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断键k2是否存在："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查看键 k1 所存储的数据类型："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机返回 key 空间的一个："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">randomKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重命名 key ："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"newk1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出改后的 newk1 ："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"newk1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按索引查询："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除当前选择数据库中的所有键："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回当前数据库中 key 的数量："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">dbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除所有数据库中的所有 key ："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>string</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========增加数据==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除键key2:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取键key2:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改key1:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1Changed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取key1的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在key3后面加入值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key3的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mset</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"value01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"value02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">,</span><span class="token string">"value03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">,</span><span class="token string">"key04"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========新增键值对防止覆盖原先值=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2-new"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========新增键值对并设置有效时间============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========获取原值，更新为新值=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"key2GetSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得key2的值的字串："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">getrange</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>list</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========添加一个list==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"ArrayList"</span><span class="token punctuation">,</span> <span class="token string">"Vector"</span><span class="token punctuation">,</span> <span class="token string">"Stack"</span><span class="token punctuation">,</span> <span class="token string">"HashMap"</span><span class="token punctuation">,</span> <span class="token string">"WeakHashMap"</span><span class="token punctuation">,</span> <span class="token string">"LinkedHashMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"HashSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"TreeSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"TreeMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1代表倒数第一个元素，-2代表倒数第二个元素,end为-1表示查询全部</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections区间0-3的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除列表指定的值 ，第二个参数为删除的个数（有重复时），后add进去的值先被删，类似于出栈</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除指定元素个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrem</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"HashMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除下表0-3区间之外的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">ltrim</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections列表出栈（左端）："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections添加元素，从列表右端，与lpush相对应："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"EnumMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections列表出栈（右端）："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改collections指定下标1的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lset</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LinkedArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的长度："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取collections下标为2的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lindex</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sortedList排序前："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sortedList排序后："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>set</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本类型之Set</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============向集合中添加元素（不重复）============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">,</span><span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个元素e0："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除两个元素e7和e6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机的移除集合中的一个元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">spop</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机的移除集合中的一个元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">spop</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet中包含元素的个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">scard</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e3是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e1是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e1是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">,</span><span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet2"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将eleSet1中删除e1并存入eleSet3中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smove</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span> <span class="token string">"eleSet3"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移到集合元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将eleSet1中删除e2并存入eleSet3中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smove</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span> <span class="token string">"eleSet3"</span><span class="token punctuation">,</span> <span class="token string">"e2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet3中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============集合运算================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet2中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1和eleSet2的交集:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sinter</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1和eleSet2的并集:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sunion</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1和eleSet2的差集:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sdiff</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//eleSet1中有，eleSet2中没有</span>        jedis<span class="token punctuation">.</span><span class="token function">sinterstore</span><span class="token punctuation">(</span><span class="token string">"eleSet4"</span><span class="token punctuation">,</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求交集并将交集保存到dstkey的集合</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet4中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>hash</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本类型之Hash</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHash</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span><span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key4"</span><span class="token punctuation">,</span><span class="token string">"value4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加名称为hash（key）的hash元素</span>        jedis<span class="token punctuation">.</span><span class="token function">hmset</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向名称为hash的hash中添加key为key5，value为value5元素</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key5"</span><span class="token punctuation">,</span> <span class="token string">"value5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return Map&lt;String,String></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hkeys</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return Set&lt;String></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有值为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hvals</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return List&lt;String></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将key6保存的值加上一个整数，如果key6不存在则添加key6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key6"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将key6保存的值加上一个整数，如果key6不存在则添加key6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key6"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个或者多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hdel</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash中键值对的个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hlen</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断hash中是否存在key2："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hexists</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断hash中是否存在key3："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hexists</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取hash中的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hmget</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取hash中的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hmget</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">,</span><span class="token string">"key4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>事务</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Transaction<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 3/12/2021 上午 9:05 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTX</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JSONObject jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lpc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//      开启事务</span>    Transaction multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String result <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//制造异常</span>      multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行事务</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      multi<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放弃事务</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      关闭链接</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="springboot整合">SpringBoot整合</span></h1><p>SpringBoot 操作数据：spring-data jpa jdbc mongodb redis！</p><p>SpringData 也是和 SpringBoot 齐名的项目！</p><p>说明： 在 SpringBoot2.x 之后，原来使用的jedis 被替换为了 lettuce?</p><p><img src="/2022/01/15/redis/image-20211203095113115.png" alt="image-20211203095113115"></p><p>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接池！ 更像 BIO 模式</p><p>lettuce : 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据了，更像 NIO 模式</p><p>源码分析：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span>RedisConnectionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 我们可以自己定义一个redisTemplate来替换这个默认的！</span><span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化！</span>   <span class="token comment" spellcheck="true">// 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 &lt;String, Object></span>    RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span>RedisConnectionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 由于 String 是redis中最常使用的类型，所以说单独提出来了一个bean！</span><span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们在学习SpringBoot自动配置的原理时，整合一个组件并进行配置一定会有一个自动配置类xxxAutoConfiguration,并且在spring.factories中也一定能找到这个类的完全限定名。Redis也不例外。</p><h2><span id="整合测试">整合测试</span></h2><p>1.导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--操作redis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2.编写配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#redis的配置</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.67.217</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span></code></pre><p>3.使用RedisTemplate</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Redis02SpringbootApplicationTests</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    redisTemplate操作不同的类型，和我们redis的指令是一样的</span>    <span class="token comment" spellcheck="true">//    opsForValue：操作string</span>    <span class="token comment" spellcheck="true">//    opsForList： 操作list</span>    <span class="token comment" spellcheck="true">//    opsForSet</span>    <span class="token comment" spellcheck="true">//    opsForHash</span>    <span class="token comment" spellcheck="true">//    opsForZSet</span>    <span class="token comment" spellcheck="true">//    opsForHash</span>    <span class="token comment" spellcheck="true">//    除了特殊的操作，我们常用的方法都可以通过redisTemplate操作</span>    <span class="token comment" spellcheck="true">//    获取连接</span>    <span class="token comment" spellcheck="true">//    redisTemplate.getConnectionFactory();</span>         redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试结果</p><p><img src="/2022/01/15/redis/image-20211203103438995.png" alt="image-20211203103438995"></p><p>此时我们回到Redis查看数据时候，惊奇发现全是乱码，可是程序中可以正常输出。这时候就关系到存储对象的序列化问题，在网络中传输的对象也是一样需要序列化，否者就全是乱码。</p><p>RedisTemplate内部的序列化配置是这样的</p><p><img src="/2022/01/15/redis/image-20211203103744213.png" alt="image-20211203103744213"></p><p>默认的序列化器是采用JDK序列化器(我们能回使用json转义)</p><p><img src="/2022/01/15/redis/image-20211203103941685.png" alt="image-20211203103941685"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 3/12/2021 上午 10:44 *@describe: *@vision */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    真实的开发一般用json传递</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lpc"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    String jsonUser = new ObjectMapper().writeValueAsString(user);</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><img src="/2022/01/15/redis/image-20211203105343593.png" alt="image-20211203105343593"></p><p>数据必须序列化才能传输，我们可以通过jackson序列化也可以实现Serializable接口序列化</p><p>后续我们定制RedisTemplate就可以对其进行修改。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 3/12/2021 上午 10:41 * @describe: * @vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//    编写我们自己都redistemplate</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我们为了自己开发方便，一般直接使用 &lt;String, Object></span>    RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Json序列化配置</span>    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// String 的序列化</span>    StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>    template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>    template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>    template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>    template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> template<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再次测试(User去掉Serializable)</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    真实的开发一般用json传递</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lpc2"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    String jsonUser = new ObjectMapper().writeValueAsString(user);</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><img src="/2022/01/15/redis/image-20211203110353250.png" alt="image-20211203110353250"></p><p>所有的redis操作，其实对于java开发人员来说，十分的简单，更重要是要去理解redis的思想和每一种数据结构的用处和作用场景！</p><h1><span id="redisconf">Redis.conf</span></h1><blockquote><h2><span id="单位">单位</span></h2></blockquote><p>容量单位不区分大小写，G和GB有区别</p><p><img src="/2022/01/15/redis/image-20211203111447734.png" alt="image-20211203111447734"></p><blockquote><h2><span id="包含">包含</span></h2></blockquote><p>可以使用 include 组合多个配置问题</p><p><img src="/2022/01/15/redis/image-20211203112129510.png" alt="image-20211203112129510"></p><blockquote><h2><span id="网络配置">网络配置</span></h2></blockquote><p><img src="/2022/01/15/redis/image-20211203112450805.png" alt="image-20211203112450805"></p><blockquote><h2><span id="通用">通用</span></h2></blockquote><pre class=" language-tex"><code class="language-tex">daemonize yes//默认是no 启动守护进程启动pidfile /var/run/redis_6379.pid #如果以后台方式启动，我们就需要指定一个pid文件</code></pre><p>日志</p><p><img src="/2022/01/15/redis/image-20211203112844433.png" alt="image-20211203112844433"></p><p>notice生产环境</p><p>logfile日志文件位置</p><p>默认16个数据库</p><p><img src="/2022/01/15/redis/image-20211203112953880.png" alt="image-20211203112953880"></p><p>是否显示logo</p><p><img src="/2022/01/15/redis/image-20211203113020843.png" alt="image-20211203113020843"></p><blockquote><h2><span id="快照">快照</span></h2></blockquote><p>在规定的时间内，执行了多少操作，则会持久化到.rdb.aof</p><p>redis是内存数据库，断电即失</p><p><img src="/2022/01/15/redis/image-20211203113150974.png" alt="image-20211203113150974"></p><pre class=" language-tex"><code class="language-tex">如果900秒内，如果至少有1个key进行了修改，我们就进行持久化如果300秒内，如果至少有10个key进行了修改，我们就进行持久化如果60秒内，如果至少有10000个key进行了修改，我们就进行持久化</code></pre><p><img src="/2022/01/15/redis/image-20211203113401853.png" alt="image-20211203113401853"></p><p>如果持久化出错，是否还继续工作</p><p><img src="/2022/01/15/redis/image-20211203113431935.png" alt="image-20211203113431935"></p><p>是否压缩rdb文件</p><p><img src="/2022/01/15/redis/image-20211203113517559.png" alt="image-20211203113517559"></p><p>保存rdb文件的时候进行错误校验</p><p><img src="/2022/01/15/redis/image-20211203113545697.png" alt="image-20211203113545697"></p><p>rdb保存的目录</p><blockquote><h2><span id="replication-主从复制讲">REPLICATION 主从复制讲</span></h2></blockquote><blockquote><h2><span id="security">SECURITY</span></h2></blockquote><p><img src="/2022/01/15/redis/image-20211203113809537.png" alt="image-20211203113809537"></p><p>设置密码(默没有密码)</p><p><img src="/2022/01/15/redis/image-20211203113852352.png" alt="image-20211203113852352"></p><p>设置密码</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> config get requirepass<span class="token comment" spellcheck="true">#获取redis的密码</span>1<span class="token punctuation">)</span> <span class="token string">"requirepass"</span>2<span class="token punctuation">)</span> <span class="token string">""</span>127.0.0.1:6379<span class="token operator">></span> config <span class="token keyword">set</span> requirepass 123456<span class="token comment" spellcheck="true">#设置密码</span>OK127.0.0.1:6379<span class="token operator">></span> config get requirepass<span class="token comment" spellcheck="true">#发现命令不能用了</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.127.0.0.1:6379<span class="token operator">></span> <span class="token function">ping</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.127.0.0.1:6379<span class="token operator">></span> auth 123456<span class="token comment" spellcheck="true">#密码登录</span>OK127.0.0.1:6379<span class="token operator">></span> config get requirepass1<span class="token punctuation">)</span> <span class="token string">"requirepass"</span>2<span class="token punctuation">)</span> <span class="token string">"123456"</span></code></pre><blockquote><h2><span id="限制clients">限制CLIENTS</span></h2></blockquote><p><img src="/2022/01/15/redis/image-20211203114233959.png" alt="image-20211203114233959"></p><p><img src="/2022/01/15/redis/image-20211203114307483.png" alt="image-20211203114307483"></p><p><img src="/2022/01/15/redis/image-20211203114406452.png" alt="image-20211203114406452"></p><p>maxmemory-policy noviction (内存到达上限后的处理策略)　　</p><pre class=" language-tex"><code class="language-tex">1、volatile-lru：只对设置了过期时间的key进行LRU（默认值）2、allkeys-lru：删除LRU算法的key3、volatile-random：随机删除即将过期的key4、allkeys-random：随机删除5、volatile-ttl：删除即将过期的6、noeviction：永不过期，返回错误</code></pre><blockquote><h2><span id="append-only-mode">APPEND ONLY MODE</span></h2></blockquote><p><img src="/2022/01/15/redis/image-20211203114710148.png" alt="image-20211203114710148"></p><p>默认rdb够用</p><p><img src="/2022/01/15/redis/image-20211203114745040.png" alt="image-20211203114745040"></p><p><img src="/2022/01/15/redis/image-20211203114902012.png" alt="image-20211203114902012"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># appendfsync always  #每次修改都会sync 消耗性能</span>appendfsync everysec  <span class="token comment" spellcheck="true">#每秒执行一次sync同步 可能会丢失这一秒的数据</span><span class="token comment" spellcheck="true"># appendfsync no      #不同步</span></code></pre><h1><span id="redis持久化rdb">Redis持久化——RDB</span></h1><p>面试和工作，持久化都是重点！<br>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p><h2><span id="什么是rdbredis-database">什么是RDB（Redis DataBase）</span></h2><blockquote><p>在指定时间间隔后，将内存中的数据集快照写入数据库 ；在恢复时候，直接读取快照文件，进行数据的恢复 ；<br>默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。文件名可以在配置文件中进行自定义。</p></blockquote><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。<br>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。<br>这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置！ </p><p>有时候在生产环境我们会将这个文件进行备份！<br>==rdb保存的文件是dump.rdb 都是在我们的配置文件中快照中进行配置的！==</p><h2><span id="工作原理">工作原理</span></h2><p>在进行 RDB 的时候，redis 的主线程是不会做 io 操作的，主线程会 fork 一个子线程来完成该操作；</p><ol><li>Redis 调用forks。同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li></ol><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益(因为是使用子进程进行写操作，而父进程依然可以接收来自客户端的请求。)</p><p><img src="/2022/01/15/redis/image-20211203123322632.png" alt="image-20211203123322632"></p><h2><span id="触发机制">触发机制</span></h2><ol><li>save的规则满足的情况下，会自动触发rdb原则</li><li>执行flushall命令，也会触发我们的rdb原则</li><li>退出redis，也会自动产生rdb文件</li></ol><h3><span id="save">save</span></h3><p>使用 save 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了；</p><blockquote><p>由于 save 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，save命令执行速度会非常慢，阻塞所有客户端的请求。</p></blockquote><p>示意图</p><p><img src="/2022/01/15/redis/image-20211203123416789.png" alt="image-20211203123416789"></p><h3><span id="flushall命令">flushall命令</span></h3><p>flushall 命令也会触发持久化 ；</p><p>触发持久化规则<br>满足配置条件中的触发条件 ；</p><blockquote><p>可以通过配置文件对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动进行数据集保存操作。</p></blockquote><h3><span id="bgsave">bgsave</span></h3><p>bgsave 是异步进行，进行持久化的时候，redis 还可以将继续响应客户端请求 ；</p><p><img src="/2022/01/15/redis/image-20211203123937796.png" alt="image-20211203123937796"></p><p>bgsave和save对比</p><table><thead><tr><th align="left">命令</th><th align="left">save</th><th align="left">bgsave</th></tr></thead><tbody><tr><td align="left">IO类型</td><td align="left">同步</td><td align="left">异步</td></tr><tr><td align="left">阻塞？</td><td align="left">是</td><td align="left">是（阻塞发生在fock()，通常非常快）</td></tr><tr><td align="left">复杂度</td><td align="left">O(n)</td><td align="left">O(n)</td></tr><tr><td align="left">优点</td><td align="left">不会消耗额外的内存</td><td align="left">不阻塞客户端命令</td></tr><tr><td align="left">缺点</td><td align="left">阻塞客户端命令</td><td align="left">需要fock子进程，消耗内存</td></tr></tbody></table><h2><span id="如果恢复rdb文件">如果恢复rdb文件！</span></h2><p>1、只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb 恢复其中的数据！<br>2、查看需要存在的位置</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> config get <span class="token function">dir</span>1<span class="token punctuation">)</span> <span class="token string">"dir"</span>2<span class="token punctuation">)</span> <span class="token string">"/usr/local/bin"</span> <span class="token comment" spellcheck="true"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></code></pre><blockquote><p>几乎它默认的配置就够用了，但是我们还是需要学习！</p></blockquote><h2><span id="优缺点">优缺点</span></h2><blockquote><p>优点：</p></blockquote><ol><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ol><blockquote><p>缺点：</p></blockquote><ol><li>需要一定的时间间隔进行操作，如果redis意外宕机了，这个最后一次修改的数据就没有了。</li><li>fork进程的时候，会占用一定的内容空间。</li></ol><h1><span id="redis持久化aof">Redis持久化——AOF</span></h1><p>Append Only File</p><p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍</p><p><img src="/2022/01/15/redis/image-20211203130013039.png" alt="image-20211203130013039"></p><p><strong>以日志的形式来记录每个写的操作</strong>，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p>==AOF保存的是appendonly.aof文件==</p><h2><span id="什么是aof">什么是AOF</span></h2><p> 快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p><p>appendonly no yes则表示启用AOF</p><p><strong>默认是不开启的，我们需要手动配置，然后重启redis，就可以生效了！</strong></p><pre class=" language-bash"><code class="language-bash">appendonly <span class="token function">yes</span>  <span class="token comment" spellcheck="true"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分的情况下，rdb完全够用</span>appendfilename <span class="token string">"appendonly.aof"</span>appendfsync always <span class="token comment" spellcheck="true"># 每次修改都会sync 消耗性能</span>appendfsync everysec <span class="token comment" spellcheck="true"># 每秒执行一次 sync 可能会丢失这一秒的数据</span>appendfsync no <span class="token comment" spellcheck="true"># 不执行 sync ,这时候操作系统自己同步数据，速度最快</span></code></pre><p>如果这个aof文件有错误，这时候redis是启动不起来的，我需要修改这个aof文件</p><p>redis给我们提供了一个工具<code>redis-check-aof  --fix</code></p><pre class=" language-bash"><code class="language-bash">redis-check-aof  --fix appendonly.aof<span class="token comment" spellcheck="true">#修复文件</span></code></pre><blockquote><p>重写规则</p></blockquote><p>aof默认文件无限追加！文件会越来越大</p><p>如果aof文件大于64m(定制的策略)，太大了！会fork一个新的线程来将我们的文件重写</p><h2><span id="优缺点">优缺点</span></h2><p>优点</p><ol><li>每一次修改都会同步，文件的完整性会更加好</li><li>没秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ol><p>缺点</p><ol><li>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！</li><li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ol><h2><span id="扩展">扩展：</span></h2><p>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储<br>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。<br>3、==只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化==<br>4、同时开启两种持久化方式</p><ul><li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li></ul><p>5、性能建议</p><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</li></ul><h2><span id="如何选择使用哪种持久化方式">如何选择使用哪种持久化方式？</span></h2><p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。</p><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</p><p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p><h1><span id="redis发布订阅">Redis发布订阅</span></h1><p>Redis 发布订阅(pub/sub)是一种==消息通信模式==：发送者(pub)发送消息，订阅者(sub)接收消息。微信、 微博、关注系统！</p><p>Redis 客户端可以订阅任意数量的频道。 </p><p>订阅/发布消息图： 第一个：消息发送者， 第二个：频道、 第三个：消息订阅者！</p><p><img src="/2022/01/15/redis/image-20211203152500160.png" alt="image-20211203152500160"></p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="/2022/01/15/redis/image-20211203152602865.png" alt="image-20211203152602865"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="/2022/01/15/redis/image-20211203152935113.png" alt="image-20211203152935113"></p><blockquote><p>命令</p></blockquote><p>这些命令被广泛用于构建即时通讯的通信应用，比如聊天室和实时广播、实时提醒等。</p><p><img src="/2022/01/15/redis/image-20211203153059435.png" alt="image-20211203153059435"></p><blockquote><p>测试</p></blockquote><pre class=" language-bash"><code class="language-bash">------------订阅端----------------------127.0.0.1:6379<span class="token operator">></span> subscribe kuangshenshuo <span class="token comment" spellcheck="true"># 订阅kuangshenshuo频道</span>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>        <span class="token comment" spellcheck="true"># 订阅成功的消息</span>2<span class="token punctuation">)</span> <span class="token string">"kuangshenshuo"</span>  3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"message"</span>     <span class="token comment" spellcheck="true"># 接收到来自kuangshenshuo频道的消息 "hello,kuangshen"</span>2<span class="token punctuation">)</span> <span class="token string">"kuangshenshuo"</span>   <span class="token comment" spellcheck="true">#那个频道</span>3<span class="token punctuation">)</span> <span class="token string">"hello,kuangshen"</span>   <span class="token comment" spellcheck="true">#发布了啥</span>1<span class="token punctuation">)</span> <span class="token string">"message"</span>     <span class="token comment" spellcheck="true"># 接收到来自kuangshenshuo频道的消息 "hello,redis"</span>2<span class="token punctuation">)</span> <span class="token string">"kuangshenshuo"</span>3<span class="token punctuation">)</span> <span class="token string">"hello,redis"</span>--------------消息发布端-------------------127.0.0.1:6379<span class="token operator">></span> publish kuangshenshuo hello,kuangshen<span class="token comment" spellcheck="true"># 发布消息到kuangshenshuo频道</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> publish kuangshenshuo hello,redis<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1</code></pre><h2><span id="原理">原理</span></h2><p>Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解。</p><p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p><p>每个 Redis 服务器进程都维持着一个表示服务器状态的 redis.h/redisServer 结构， 结构的 pubsub_channels 属性是一个字典， 这个字典就用于保存订阅频道的信息，其中，字典的键为正在被订阅的频道， 而字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端。</p><p><img src="/2022/01/15/redis/image-20211203154507647.png" alt="image-20211203154507647"></p><p>客户端订阅，就被链接到对应频道的链表的尾部，退订则就是将客户端节点从链表中移除。</p><h2><span id="缺点">缺点</span></h2><ol><li>如果一个客户端订阅了频道，但自己读取消息的速度却不够快的话，那么不断积压的消息会使redis输出缓冲区的体积变得越来越大，这可能使得redis本身的速度变慢，甚至直接崩溃。</li><li>这和数据传输可靠性有关，如果在订阅方断线，那么他将会丢失所有在短线期间发布者发布的消息。</li></ol><h2><span id="应用">应用</span></h2><ol><li>消息订阅：公众号订阅，微博关注等等（起始更多是使用消息队列来进行实现）</li><li>多人在线聊天室。</li></ol><p>稍微复杂的场景，我们就会使用消息中间件MQ处理。</p><h1><span id="redis主从复制">Redis主从复制</span></h1><h2><span id="概念">概念</span></h2><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（Master/Leader）,后者称为从节点（Slave/Follower）， 数据的复制是单向的！只能由主节点复制到从节点（主节点以写为主、从节点以读为主）。</p><p>==默认情况下，每台Redis服务器都是主节点==，一个主节点可以有0个或者多个从节点，但每个从节点只能由一个主节点。</p><h2><span id="作用">作用</span></h2><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余的方式。</li><li>故障恢复：当主节点故障时，从节点可以暂时替代主节点提供服务，是一种服务冗余的方式</li><li>负载均衡：在主从复制的基础上，配合读写分离，由主节点进行写操作，从节点进行读操作，分担服务器的负载；尤其是在多读少写的场景下，通过多个从节点分担负载，提高并发量。</li><li>高可用基石：主从复制还是哨兵和集群能够实施的基础。</li></ol><h2><span id="为什么使用集群">为什么使用集群</span></h2><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机），原因如下：</p><p>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</p><p>2、从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。</p><p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p><p>对于这种场景，我们可以使如下这种架构：</p><p><img src="/2022/01/15/redis/image-20211203155140014.png" alt="image-20211203155140014"></p><p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！</p><p>架构中经常使用！ 一主二从！</p><p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用Redis！</p><p><strong>总结</strong></p><ol><li>单台服务器难以负载大量的请求</li><li>单台服务器故障率高，系统崩坏概率大</li><li>单台服务器内存容量有限。</li></ol><h2><span id="环境配置">环境配置</span></h2><p>只配置从库，不用配置主库！</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> info replication <span class="token comment" spellcheck="true">#查看当前库的信息</span><span class="token comment" spellcheck="true"># Replication</span>role:master  <span class="token comment" spellcheck="true">#角色</span>connected_slaves:0 <span class="token comment" spellcheck="true">#从机</span>master_replid:095c10fdbaefd02f09b5d93be7ade52f9967394emaster_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0</code></pre><p>复制3个配置文件，然后修改对应的信息</p><ol><li>端口</li><li>pid名字</li><li>log文件名</li><li>dump.rdb名字</li></ol><p>启动单机多服务集群：</p><p><img src="/2022/01/15/redis/image-20211203181502026.png" alt="image-20211203181502026"></p><h2><span id="一主二从配置">一主二从配置</span></h2><p>==默认情况下，每台Redis服务器都是主节点==；我们一般情况下只用配置从机就好了！</p><p>认老大！一主（79）二从（80，81）</p><p>使用SLAVEOF host port就可以为从机配置主机了。</p><p><img src="/2022/01/15/redis/image-20211203182234933.png" alt="image-20211203182234933"></p><p><strong>说明</strong></p><ul><li><code>SLAVEOF host 6379</code> 找谁当自己的老大！</li><li><code>role:slave</code> # 当前角色是从机</li><li><code>master_host:127.0.0.1</code> # 可以的看到主机的信息</li></ul><p>然后主机上也能看到从机的状态：</p><p><img src="/2022/01/15/redis/image-20211203182417295.png" alt="image-20211203182417295"></p><p><strong>说明</strong></p><ul><li><code>connected_slaves:1</code> # 多了从机的配置</li><li><code>slave0:ip=127.0.0.1,port=6380,state=online,offset=42,lag=1</code> # 多了从机的配置</li></ul><p>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的！</p><h2><span id="使用规则">使用规则</span></h2><p>1.从机只能读，不能写，主机可读可写但是多用于写。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1OK127.0.0.1:6379<span class="token operator">></span> get k1<span class="token string">"v1"</span>--从机可以读取主节点的key，但不能写--127.0.0.1:6380<span class="token operator">></span> get k1<span class="token string">"v1"</span>127.0.0.1:6380<span class="token operator">></span> <span class="token keyword">set</span> k2 v2<span class="token punctuation">(</span>error<span class="token punctuation">)</span> READONLY You can<span class="token string">'t write against a read only replica.127.0.0.1:6381> get k1"v1"127.0.0.1:6381> set k2 v2(error) READONLY You can'</span>t <span class="token function">write</span> against a <span class="token function">read</span> only replica.</code></pre><p>2.==当主机断电宕机后，默认情况下从机的角色不会发生变化==，集群中只是失去了写操作，当主机恢复以后，又会连接上从机恢复原状。</p><p>3.当从机断电宕机后，若不是使用配置文件配置的从机，再次启动后作为主机是无法获取之前主机的数据的，若此时重新配置称为从机，又可以获取到主机的所有数据。这里就要提到一个同步原理。</p><p>4.第二条中提到，默认情况下，主机故障后，不会出现新的主机，有两种方式可以产生新的主机：</p><ul><li>从机手动执行命令slaveof no one,这样执行以后从机会独立出来成为一个主机</li><li>使用哨兵模式（自动选举）</li></ul><h2><span id="复制原理">复制原理</span></h2><p>==Slave 启动成功连接到 master 后会发送一个sync同步命令==(全量复制)</p><p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p><p><strong>全量复制</strong>：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p><p><strong>增量复制</strong>：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步</p><p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中看到！</p><blockquote><p>层层链路</p></blockquote><p>79 - 80 - 81</p><p>79是80的主节点</p><p>80是81的主节点</p><p>80是主还是从？</p><p>从</p><blockquote><p>如果没有老大了，这个时候能不能选择出来一个老大?</p></blockquote><p>原始手动：</p><p>谋权篡位：如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code>让自己变成主机！其他的节点就可以手动连接到最新的主节点（手动）！如果这个时候老大修复了，那么就重新连接！</p><h1><span id="哨兵模式">哨兵模式</span></h1><p>（自动选举老大的模式）</p><h2><span id="概述">概述</span></h2><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</p><p>Redis从2.8开始正式提供了Sentinel（哨兵） 架构来解决这个问题。<strong>能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</strong></p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><p><img src="/2022/01/15/redis/image-20211203191620201.png" alt="image-20211203191620201"></p><p>哨兵的作用：</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了<strong>多哨兵模式</strong>。</p><p><img src="/2022/01/15/redis/image-20211203192053063.png" alt="image-20211203192053063"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</p><h2><span id="测试">测试</span></h2><p>目前状态是：一主二从</p><p>1、配置哨兵配置文件 sentinel.conf</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sentinel monitor 被监控的名称 host port 1</span>sentinel monitor myredis 127.0.0.1 6379 1</code></pre><p>后面的这个数字1，代表有一个哨兵认为它挂了，他就挂了，就开始选举</p><p>2、启动哨兵！</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-sentinel kconfig/sentinel.conf </span></code></pre><p><img src="/2022/01/15/redis/image-20211203193232196.png" alt="image-20211203193232196"></p><p>3、此时哨兵监视着我们的主机6379，当我们断开主机后：</p><p><img src="/2022/01/15/redis/image-20211203193827419.png" alt="image-20211203193827419"></p><p>如果此时主机回来了，那他也只能归并到新的主机下，当作从机，这就是哨兵模式的规则！</p><h2><span id="哨兵模式优缺点">哨兵模式优缺点</span></h2><p>优点：</p><ol><li>哨兵集群，基于主从复制模式，所有主从复制的优点，它都有</li><li>主从可以切换，故障可以转移，系统的可用性更好</li><li>哨兵模式是主从模式的升级，手动到自动，更加健壮 缺点：</li></ol><p>缺点：</p><ol><li>Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多配置项</li></ol><h2><span id="哨兵模式的全部配置">哨兵模式的全部配置</span></h2><p>完整的哨兵模式配置文件 sentinel.conf</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Example sentinel.conf</span><span class="token comment" spellcheck="true">#哨兵sentinel实例运行的端口 默认26379</span>port 26379<span class="token comment" spellcheck="true">#哨兵sentinel的工作目录</span><span class="token function">dir</span> /tmp<span class="token comment" spellcheck="true">#哨兵sentinel监控的redis主节点的 ip port</span><span class="token comment" spellcheck="true">#master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span><span class="token comment" spellcheck="true">#quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><span class="token comment" spellcheck="true">#sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum></span>sentinel monitor mymaster 127.0.0.1 6379 2<span class="token comment" spellcheck="true">#当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><span class="token comment" spellcheck="true">#设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><span class="token comment" spellcheck="true">#sentinel auth-pass &lt;master-name> &lt;password></span>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd<span class="token comment" spellcheck="true">#指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><span class="token comment" spellcheck="true">#sentinel down-after-milliseconds &lt;master-name> &lt;milliseconds></span>sentinel down-after-milliseconds mymaster 30000<span class="token comment" spellcheck="true">#这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span><span class="token comment" spellcheck="true">#这个数字越小，完成failover所需的时间就越长，</span><span class="token comment" spellcheck="true">#但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><span class="token comment" spellcheck="true">#可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><span class="token comment" spellcheck="true">#sentinel parallel-syncs &lt;master-name> &lt;numslaves></span>sentinel parallel-syncs mymaster 1<span class="token comment" spellcheck="true">#故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span><span class="token comment" spellcheck="true">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><span class="token comment" spellcheck="true">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><span class="token comment" spellcheck="true">#3.当想要取消一个正在进行的failover所需要的时间。</span><span class="token comment" spellcheck="true">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><span class="token comment" spellcheck="true">#默认三分钟</span><span class="token comment" spellcheck="true">#sentinel failover-timeout &lt;master-name> &lt;milliseconds></span>sentinel failover-timeout mymaster 180000<span class="token comment" spellcheck="true">#SCRIPTS EXECUTION</span><span class="token comment" spellcheck="true">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><span class="token comment" spellcheck="true">#对于脚本的运行结果有以下规则：</span><span class="token comment" spellcheck="true">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><span class="token comment" spellcheck="true">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><span class="token comment" spellcheck="true">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><span class="token comment" spellcheck="true">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><span class="token comment" spellcheck="true">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><span class="token comment" spellcheck="true">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。</span><span class="token comment" spellcheck="true">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><span class="token comment" spellcheck="true">#通知脚本</span><span class="token comment" spellcheck="true">#sentinel notification-script &lt;master-name> &lt;script-path></span>sentinel notification-script mymaster /var/redis/notify.sh<span class="token comment" spellcheck="true">#客户端重新配置主节点参数脚本</span><span class="token comment" spellcheck="true">#当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><span class="token comment" spellcheck="true">#以下参数将会在调用脚本时传给脚本:</span><span class="token comment" spellcheck="true">#&lt;master-name> &lt;role> &lt;state> &lt;from-ip> &lt;from-port> &lt;to-ip> &lt;to-port></span><span class="token comment" spellcheck="true">#目前&lt;state>总是“failover”,</span><span class="token comment" spellcheck="true">#&lt;role>是“leader”或者“observer”中的一个。</span><span class="token comment" spellcheck="true">#参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><span class="token comment" spellcheck="true">#这个脚本应该是通用的，能被多次调用，不是针对性的。</span><span class="token comment" spellcheck="true">#sentinel client-reconfig-script &lt;master-name> &lt;script-path></span>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</code></pre><h1><span id="缓存穿透与雪崩">缓存穿透与雪崩</span></h1><h2><span id="缓存穿透即查询不到">缓存穿透（即查询不到）</span></h2><h3><span id="概念">概念</span></h3><p>在默认情况下，用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再在数据库中进行查找，数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）缓存都没有命中的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。网络安全中也有人恶意使用这种手段进行攻击被称为洪水攻击。</p><p><img src="/2022/01/15/redis/image-20211203200028925.png" alt="image-20211203200028925"></p><h3><span id="解决方案">解决方案</span></h3><p><strong>布隆过滤器</strong></p><p>对所有可能查询的参数以Hash的形式存储，以便快速确定是否存在这个值，在控制层先进行拦截校验，校验不通过直接打回，减轻了存储系统的压力。</p><p><img src="/2022/01/15/redis/image-20211203200333546.png" alt="image-20211203200333546"></p><p><strong>缓存空对象</strong></p><p>一次请求若在缓存和数据库中都没找到，就在缓存中方一个空对象用于处理后续这个请求。</p><p><img src="/2022/01/15/redis/image-20211203200527253.png" alt="image-20211203200527253"></p><p>这样做有一个缺陷：存储空对象也需要空间，大量的空对象会耗费一定的空间，存储效率并不高。解决这个缺陷的方式就是设置较短过期时间</p><p>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p><h2><span id="缓存击穿即量太大缓存过期">缓存击穿（即量太大，缓存过期）</span></h2><h3><span id="概念">概念</span></h3><p>相较于缓存穿透，缓存击穿的目的性更强，一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。这就是缓存被击穿，只是针对其中某个key的缓存不可用而导致击穿，但是其他的key依然可以使用缓存响应。</p><p> 比如热搜排行上，一个热点新闻被同时大量访问就可能导致缓存击穿。</p><h3><span id="解决方案">解决方案</span></h3><p>1.设置热点数据永不过期</p><p>这样就不会出现热点数据过期的情况，但是当Redis内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。</p><p>2.加互斥锁(分布式锁)</p><p>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。</p><h2><span id="缓存雪崩">缓存雪崩</span></h2><h3><span id="概念">概念</span></h3><p>大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。</p><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机！</p><p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p><img src="/2022/01/15/redis/image-20211203201418097.png" alt="image-20211203201418097"></p><p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p><h3><span id="解决方案">解决方案</span></h3><blockquote><p>redis高可用</p></blockquote><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</p><blockquote><p>限流降级</p></blockquote><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><blockquote><p>数据预热</p></blockquote><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2022/01/15/vue/"/>
      <url>/2022/01/15/vue/</url>
      
        <content type="html"><![CDATA[<h1><span id="笔记">笔记</span></h1><h2><span id="脚手架文件结构">脚手架文件结构</span></h2><pre class=" language-tex"><code class="language-tex">├── node_modules  项目依赖├── public  放置静态资源│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源（多个组件gong）│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2><span id="于不同版本的vue">于不同版本的Vue</span></h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2><span id="vueconfigjs配置文件">vue.config.js配置文件</span></h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2><span id="ref属性">ref属性</span></h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref="xxx"&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref="xxx"&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2><span id="props配置项">props配置项</span></h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name="xxx"/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:['name'] </code></p></li><li><p>第二种方式（限制类型）：<code>props:{name:String}</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><pre class=" language-js"><code class="language-js">props<span class="token punctuation">:</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span>String<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型</span>    required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//必要性</span>    <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'老王'</span> <span class="token comment" spellcheck="true">//默认值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><h2><span id="mixin混入">mixin(混入)</span></h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p> 第一步定义混合：</p><pre class=" language-tex"><code class="language-tex">{    data(){....},    methods:{....}    ....}</code></pre><p> 第二步使用混入：</p><p> ​    全局混入：<code>Vue.mixin(xxx)</code><br> ​    局部混入：<code>mixins:['xxx']    </code></p></li></ol><h2><span id="插件">插件</span></h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><pre class=" language-js"><code class="language-js">对象<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 添加全局过滤器</span>    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 添加全局指令</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3. 配置全局混入(合)</span>    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4. 添加实例方法</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myMethod <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myProperty <span class="token operator">=</span> xxxx<span class="token punctuation">}</span></code></pre></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2><span id="scoped样式">scoped样式</span></h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2><span id="总结todolist案例">总结TodoList案例</span></h2><ol><li><p>组件化编码流程：</p><p> ​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p> ​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p> ​            1).一个组件在用：放在组件自身即可。</p><p> ​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p> ​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p> ​    (1).父组件 ==&gt; 子组件 通信</p><p> ​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2><span id="webstorage">webStorage</span></h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem('key', 'value');</code></p><pre class=" language-markdown"><code class="language-markdown">该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem('person');</code></p><p> ​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem('key');</code></p><p> ​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p> ​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2><span id="组件的自定义事件">组件的自定义事件</span></h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu="test"/&gt;</code>  或 <code>&lt;Demo v-on:atguigu="test"/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Demo ref<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'atguigu'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit('atguigu',数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off('atguigu')</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on('atguigu',回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2><span id="全局事件总线globaleventbus">全局事件总线（GlobalEventBus）</span></h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">//安装全局事件总线，$bus就是当前应用的vm</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><pre class=" language-js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">demo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>提供数据：<code>this.$bus.$emit('xxxx',数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2><span id="消息订阅与发布pubsub">消息订阅与发布（pubsub）</span></h2><ol><li><p>  一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from 'pubsub-js'</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><pre class=" language-js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">demo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//订阅消息</span><span class="token punctuation">}</span></code></pre></li><li><p>提供数据：<code>pubsub.publish('xxx',数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2><span id="nexttick">nextTick</span></h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2><span id="vue封装的过度与动画">Vue封装的过度与动画</span></h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>transition name<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">></span>你好啊！<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span></code></pre></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2><span id="vue脚手架配置代理">vue脚手架配置代理</span></h2><h3><span id="方法一">方法一</span></h3><p>​    在vue.config.js中添加如下配置：</p><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>  proxy<span class="token punctuation">:</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">}</span></code></pre><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3><span id="方法二">方法二</span></h3><p>​    编写vue.config.js配置具体代理规则：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>      proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api1'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 匹配所有以 '/api1'开头的请求路径</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 代理目标的基础路径</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'^/api1'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">'/api2'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 匹配所有以 '/api2'开头的请求路径</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 代理目标的基础路径</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'^/api2'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080   changeOrigin默认值为true*/</span></code></pre><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2><span id="插槽">插槽</span></h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><pre class=" language-js"><code class="language-js">父组件中：        <span class="token operator">&lt;</span>Category<span class="token operator">></span>           <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中：        <span class="token operator">&lt;</span>template<span class="token operator">></span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>               <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义插槽 <span class="token operator">--</span><span class="token operator">></span>               <span class="token operator">&lt;</span>slot<span class="token operator">></span>插槽默认内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre></li><li><p>具名插槽：</p><pre class=" language-js"><code class="language-js">父组件中：        <span class="token operator">&lt;</span>Category<span class="token operator">></span>            <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>            <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>footer<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中：        <span class="token operator">&lt;</span>template<span class="token operator">></span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>               <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义插槽 <span class="token operator">--</span><span class="token operator">></span>               <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>插槽默认内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>               <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>插槽默认内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><pre class=" language-js"><code class="language-js">父组件中：        <span class="token operator">&lt;</span>Category<span class="token operator">></span>            <span class="token operator">&lt;</span>template scope<span class="token operator">=</span><span class="token string">"scopeData"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生成的是ul列表 <span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>ul<span class="token operator">></span>                    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"g in scopeData.games"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>g<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>        <span class="token operator">&lt;</span>Category<span class="token operator">></span>            <span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"scopeData"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生成的是h4标题 <span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h4 v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"g in scopeData.games"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>g<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中：        <span class="token operator">&lt;</span>template<span class="token operator">></span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>slot <span class="token punctuation">:</span>games<span class="token operator">=</span><span class="token string">"games"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>                <span class="token operator">&lt;</span>script<span class="token operator">></span>            <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span><span class="token string">'Category'</span><span class="token punctuation">,</span>                props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//数据在子组件自身</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>                        games<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'红色警戒'</span><span class="token punctuation">,</span><span class="token string">'穿越火线'</span><span class="token punctuation">,</span><span class="token string">'劲舞团'</span><span class="token punctuation">,</span><span class="token string">'超级玛丽'</span><span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ol></li></ol></li></ol><h2><span id="vuex">Vuex</span></h2><h3><span id="1概念">1.概念</span></h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3><span id="2何时使用">2.何时使用？</span></h3><p>​        多个组件需要共享数据时</p><h3><span id="3搭建vuex环境">3.搭建vuex环境</span></h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//准备actions对象——响应组件中用户的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//准备mutations对象——修改state中的数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//准备state对象——保存具体的数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    state<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><pre class=" language-js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token comment" spellcheck="true">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment" spellcheck="true">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>    store<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol><h3><span id="4基本使用">4.基本使用</span></h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//响应组件中加的动作</span>    <span class="token function">jia</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('actions中的jia被调用了',miniStore,value)</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行加</span>    <span class="token function">JIA</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('mutations中的JIA被调用了',state,value)</span>        state<span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>   sum<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    state<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch('action中的方法名',数据)</code> 或 <code>$store.commit('mutations中的方法名',数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3><span id="5getters的使用">5.getters的使用</span></h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><pre class=" language-js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    getters<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3><span id="6四个map方法的使用">6.四个map方法的使用</span></h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//借助mapState生成计算属性：sum、school、subject（对象写法）</span>     <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sum<span class="token punctuation">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span>school<span class="token punctuation">:</span><span class="token string">'school'</span><span class="token punctuation">,</span>subject<span class="token punctuation">:</span><span class="token string">'subject'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//借助mapState生成计算属性：sum、school、subject（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//借助mapGetters生成计算属性：bigSum（对象写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bigSum<span class="token punctuation">:</span><span class="token string">'bigSum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//借助mapGetters生成计算属性：bigSum（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>incrementOdd<span class="token punctuation">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token punctuation">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//靠mapActions生成：increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>increment<span class="token punctuation">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token punctuation">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//靠mapMutations生成：JIA、JIAN（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3><span id="7模块化命名空间">7.模块化+命名空间</span></h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//开启命名空间</span>  state<span class="token punctuation">:</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//开启命名空间</span>  state<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment" spellcheck="true">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre></li><li><p>开启命名空间后，组件中读取getters数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//方式二：借助mapGetters读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中调用dispatch</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>incrementOdd<span class="token punctuation">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token punctuation">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中调用commit</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>increment<span class="token punctuation">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token punctuation">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre></li></ol><h2><span id="路由">路由</span></h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3><span id="1基本使用">1.基本使用</span></h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">//引入Luyou 组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token comment" spellcheck="true">//创建router实例对象，去管理一组一组的路由规则</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>About        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>Home        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//暴露router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre></li><li><p>实现切换（active-class可配置高亮样式）</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"active"</span> to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre></li><li><p>指定展示位置</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span></code></pre></li></ol><h3><span id="2几个注意点">2.几个注意点</span></h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3><span id="3多级路由多级路由">3.多级路由（多级路由）</span></h3><ol><li><p>配置路由规则，使用children配置项：</p><pre class=" language-js"><code class="language-js">routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>About<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>Home<span class="token punctuation">,</span>        children<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//通过children配置子级路由</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span><span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//此处一定不要写：/news</span>                component<span class="token punctuation">:</span>News            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//此处一定不要写：/message</span>                component<span class="token punctuation">:</span>Message            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>跳转（要写完整路径）：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/home/news"</span><span class="token operator">></span>News<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre><h3><span id="4路由的query参数">4.路由的query参数</span></h3></li></ol><p>1、传递参数</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带query参数，to的字符串写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"/home/message/detail?id=666&amp;title=你好"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带query参数，to的对象写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link     <span class="token punctuation">:</span>to<span class="token operator">=</span>"<span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'/home/message/detail'</span><span class="token punctuation">,</span>        query<span class="token punctuation">:</span><span class="token punctuation">{</span>           id<span class="token punctuation">:</span><span class="token number">666</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span><span class="token string">'你好'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>"<span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre><p>2、接收参数：</p><pre class=" language-js"><code class="language-js">$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title</code></pre><h3><span id="5命名路由">5.命名路由</span></h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Demo<span class="token punctuation">,</span>    children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'test'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>Test<span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>                      name<span class="token punctuation">:</span><span class="token string">'hello'</span> <span class="token comment" spellcheck="true">//给路由命名</span>                    path<span class="token punctuation">:</span><span class="token string">'welcome'</span><span class="token punctuation">,</span>                    component<span class="token punctuation">:</span>Hello<span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>简化跳转：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>简化前，需要写完整的路径 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/demo/test/welcome"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>简化后，直接通过名字跳转 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"{name:'hello'}"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>简化写法配合传递参数 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link     <span class="token punctuation">:</span>to<span class="token operator">=</span>"<span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>        query<span class="token punctuation">:</span><span class="token punctuation">{</span>           id<span class="token punctuation">:</span><span class="token number">666</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span><span class="token string">'你好'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>"<span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre></li></ol></li></ol><h3><span id="6路由的params参数">6.路由的params参数</span></h3><ol><li><p>配置路由，声明接收params参数</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Home<span class="token punctuation">,</span>    children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>News        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            component<span class="token punctuation">:</span>Message<span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>                    path<span class="token punctuation">:</span><span class="token string">'detail/:id/:title'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//使用占位符声明接收params参数</span>                    component<span class="token punctuation">:</span>Detail                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>传递参数</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带params参数，to的字符串写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"/home/message/detail/666/你好"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带params参数，to的对象写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link     <span class="token punctuation">:</span>to<span class="token operator">=</span>"<span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>        params<span class="token punctuation">:</span><span class="token punctuation">{</span>           id<span class="token punctuation">:</span><span class="token number">666</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span><span class="token string">'你好'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>"<span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><pre class=" language-js"><code class="language-js">$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>title</code></pre><h3><span id="7路由的props配置">7.路由的props配置</span></h3></li></ol><p>​    作用：让路由组件更方便的收到参数</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Detail<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span>    <span class="token comment" spellcheck="true">// props:{a:900}</span>    <span class="token comment" spellcheck="true">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span>    <span class="token comment" spellcheck="true">// props:true</span>        <span class="token comment" spellcheck="true">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span>    <span class="token function">props</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            title<span class="token punctuation">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="8ltrouter-linkgt的replace属性">8.<code>&lt;router-link&gt;</code>的replace属性</span></h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3><span id="9编程式路由导航">9.编程式路由导航</span></h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   name<span class="token punctuation">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>   params<span class="token punctuation">:</span><span class="token punctuation">{</span>      id<span class="token punctuation">:</span>xxx<span class="token punctuation">,</span>      title<span class="token punctuation">:</span>xxx   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   name<span class="token punctuation">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>   params<span class="token punctuation">:</span><span class="token punctuation">{</span>      id<span class="token punctuation">:</span>xxx<span class="token punctuation">,</span>      title<span class="token punctuation">:</span>xxx   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//后退</span><span class="token comment" spellcheck="true">//-3后退3步</span><span class="token comment" spellcheck="true">//3前进退3步</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//可前进也可后退</span></code></pre></li></ol><h3><span id="10缓存路由组件">10.缓存路由组件</span></h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive include<span class="token operator">=</span><span class="token string">"News"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span></code></pre><h3><span id="11两个新的生命周期钩子">11.两个新的生命周期钩子</span></h3></li><li><p>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</p></li><li><p>具体名字：</p><ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3><span id="12路由守卫">12.路由守卫</span></h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:【写在路由组件里】</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全局前置守卫：初始化时执行、每次路由切换前执行</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断当前路由是否需要进行权限控制</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//权限控制的具体规则</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//放行</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// next({name:'guanyu'})</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//放行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//全局后置守卫：初始化时执行、每次路由切换后执行</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>         document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title <span class="token comment" spellcheck="true">//修改网页的title</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'vue_test'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>独享守卫:【写在路由组件的路由里】</p><pre class=" language-js"><code class="language-js"><span class="token function">beforeEnter</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEnter'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断当前路由是否需要进行权限控制</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// next({name:'guanyu'})</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>组件内守卫：【写在普通组件里，是一个函数】</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//进入守卫：通过路由规则，进入该组件时被调用</span>beforeRouteEnter <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//离开守卫：通过路由规则，离开该组件时被调用</span>beforeRouteLeave <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3><span id="13路由器的两种工作模式">13.路由器的两种工作模式</span></h3></li><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2022/01/15/shu-ju-jie-gou-he-suan-fa-wei-wan/"/>
      <url>/2022/01/15/shu-ju-jie-gou-he-suan-fa-wei-wan/</url>
      
        <content type="html"><![CDATA[<h1><span id="结构分类">结构分类</span></h1><p>存储结构：顺序结构、链式结构</p><p>逻辑结构：集合、线性、树形、图形</p><h1><span id="线性结构">线性结构</span></h1><h2><span id="数组结构">数组结构</span></h2><h3><span id="二分法查找">二分法查找</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>数组<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 5:23 * @describe: 二分法查找:不断查找中间位置的值 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">"在数组的"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"索引！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 开始位置</span>      <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 结束位置</span>      <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 中间位置</span>      <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 4、结束条件：数组里没有该元素</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 1、判断中间元素之是不是目标</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2、不是</span>            <span class="token comment" spellcheck="true">// 2.1、中间元素大于target，则它就在数组前边</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 调整end，结束位置</span>               end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 2.2、 小于target，则目标元素在数组后边</span>               <span class="token comment" spellcheck="true">// 调整begin，开始位置</span>               begin <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 3、调整中间值</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="栈结构">栈结构</span></h2><p>栈的底层就是数组：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span>   <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>   <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//vector是集合中的一个线程安全的类，它是用数组实现的</span>   <span class="token keyword">protected</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>数组模拟</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>栈<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 5:51 * @describe: 模拟栈结构：先进后出 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//栈</span>    Stack stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 压栈</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 栈的状态</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出栈</span>    <span class="token keyword">int</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出栈顶元素："</span><span class="token operator">+</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 栈的状态</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 栈的底层使用数组来存储</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 压栈</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建新数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 复制原来的数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加新加入的元素</span>    array<span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 替换旧数组</span>    elements <span class="token operator">=</span> array<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 出栈</span>  <span class="token keyword">public</span>  <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"stack is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 取出最后一个元组(栈顶元素)</span>    <span class="token keyword">int</span> element <span class="token operator">=</span> elements<span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建新数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 复制元素组，除了最后一个</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 替换旧数组</span>    elements <span class="token operator">=</span> array<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 查看栈的全部元素</span>  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> elements<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="队列结构">队列结构</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>队列<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 6:19 * @describe: 队列 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 队列</span>    Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 入队</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出队</span>    <span class="token keyword">int</span> poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出头元素"</span><span class="token operator">+</span>poll<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 队列，使用数组来存储</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 入队 ，和栈的入栈一样</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建新数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 复制原来的数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加新加入的元素</span>    array<span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 替换旧数组</span>    elements <span class="token operator">=</span> array<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 出队，返回队列头部数据(和栈相反)</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"queue is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 头元素</span>    <span class="token keyword">int</span> element <span class="token operator">=</span> elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 其他元素在组成一个队列</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 替换旧数组</span>    elements <span class="token operator">=</span> array<span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 查看栈的全部元素</span>  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> elements<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="单链表">单链表</span></h2><p>一个节点连接着一个节点，每个节点的存储位置不同</p><p>节点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>单链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 6:55 * @describe: 节点:节点内容 下一个节点 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 节点内容</span>  <span class="token keyword">int</span> data<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 下一个节点</span>  Node next<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 追加节点,找到最后的一个节点，添加，再返回添加的这个节点</span>  <span class="token keyword">public</span> Node <span class="token function">append</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取下一个节点</span>  <span class="token keyword">public</span> Node <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取当前节点内容</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除这个节点的下一个节点,并返回被删除的节点</span>  <span class="token keyword">public</span> Node <span class="token function">removeNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node next1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    Node next2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next2<span class="token punctuation">;</span>    <span class="token keyword">return</span> next1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 显示所有节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 在这个节点后边插入一个节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Node{"</span> <span class="token operator">+</span> <span class="token string">"data="</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">", next="</span> <span class="token operator">+</span> next <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>单链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 6:57 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建节点</span>    Node n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node n4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加了n1、n2、n3节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 追加节点</span>    n1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 显示链表所有节点数据</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"所有节点的数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取某一个节点的数据</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1节点存储的内容是："</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n2节点存储的内容是："</span> <span class="token operator">+</span> n2<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n3节点存储的内容是："</span> <span class="token operator">+</span> n3<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//移除一个节点</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除n2节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node node <span class="token operator">=</span> n2<span class="token punctuation">.</span><span class="token function">removeNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除的节点是"</span> <span class="token operator">+</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"所有节点的数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入n4节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>n4<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"所有节点的数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果</p><pre class=" language-tex"><code class="language-tex">添加了n1、n2、n3节点所有节点的数据:1 3 5 n1节点存储的内容是：1n2节点存储的内容是：3n3节点存储的内容是：5删除n2节点删除的节点是Node{data=5, next=null}所有节点的数据:1 3 插入n4节点所有节点的数据:1 7 3 </code></pre><h2><span id="循环链表">循环链表</span></h2><p>把单链表的最后一个元素的下一个元素设置为头元素，形成循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>循环链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 9:03 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoopNode</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 节点内容</span>  <span class="token keyword">int</span> data<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 下一个节点</span>  LoopNode next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">LoopNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取下一个节点</span>  <span class="token keyword">public</span> LoopNode <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取当前节点内容</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除这个节点的下一个节点,并返回被删除的节点</span>  <span class="token keyword">public</span> LoopNode <span class="token function">removeNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LoopNode next1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    LoopNode next2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next2<span class="token punctuation">;</span>    <span class="token keyword">return</span> next1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 在这个节点后边插入一个节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>LoopNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LoopNode next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>循环链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 1/2/2022 上午 9:11 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建节点</span>      LoopNode loopNode1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LoopNode loopNode2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LoopNode loopNode3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//增加节点</span>      loopNode1<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>loopNode2<span class="token punctuation">)</span><span class="token punctuation">;</span>      loopNode2<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>loopNode3<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loopNode3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="双向循环链表">双向循环链表</span></h2><p>节点:指向上一个节点和下一个节点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>双向循环链表<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>RET<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 9:32 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleNode</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 上一个节点</span>  DoubleNode pre<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 下一个节点</span>  DoubleNode next<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 节点数据</span>  <span class="token keyword">int</span> data<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">DoubleNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//  增加节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>DoubleNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 原来的下一个节点</span>    DoubleNode next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 现在的下一个节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个新节点的前一个节点</span>    node<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个新节点的下一个节点</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个新节点的下一个节点的前一个节点</span>    next<span class="token punctuation">.</span>pre <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 需要修改的有三个节点：这个节点(next属性) (pre属性)新节点(next属性) (pre属性)这个节点的下一个节点</span>    <span class="token comment" spellcheck="true">// 这个节点的前一个节点会自动改变，新节点的下一个节点设置为next,next=this 连带this.pre也修改了值为新节点</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 下一个节点</span>  <span class="token keyword">public</span> DoubleNode <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 上一个节点</span>  <span class="token keyword">public</span> DoubleNode <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pre<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取节点数据</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>双向循环链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 9:47 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建节点</span>    DoubleNode n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DoubleNode n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DoubleNode n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的上一个节点的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的下一个节点的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加n2节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    n2.after(n3);</span><span class="token comment" spellcheck="true">//    System.out.println("添加n3节点");</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的上一个节点的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的下一个节点的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="递归">递归</span></h2><p>斐波那契数列</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>递归<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 10:16 * @describe: 斐波那契数列 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Febonacci</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 斐波那契额数列:1 1 2 3 5 8 每一项是前两项的和</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一项或第二项的值为1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这一项的前两项的和</span>    <span class="token keyword">return</span> <span class="token function">show</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">show</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>汉诺塔</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>递归<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 10:34 * @describe: 汉诺塔 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hanoi</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * @param n 盘子   * @param from 开始的柱子   * @param in 中间的柱子   * @param to 目标的柱子    只有两个盘子：一个底部的和一个上部的，   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> from<span class="token punctuation">,</span> <span class="token keyword">char</span> in<span class="token punctuation">,</span> <span class="token keyword">char</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个盘子从"</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">"移动到"</span> <span class="token operator">+</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 移动上面的盘子到中间位置</span>      <span class="token function">show</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 移动下面的盘子</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>n<span class="token operator">+</span><span class="token string">"个盘子从"</span><span class="token operator">+</span>from<span class="token operator">+</span><span class="token string">"移动到"</span><span class="token operator">+</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 把上面的盘子从中间位置移动到目标位置</span>      <span class="token function">show</span><span class="token punctuation">(</span>n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="排序算法5类8种">排序算法（5类8种）</span></h1><h2><span id="选择排序">选择排序</span></h2><h3><span id="1-冒泡">1、冒泡</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">.</span>交换排序<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 11:13 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 冒泡排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 比较长度-1轮</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 每轮比较 长度-1-确定的位数</span>      <span class="token comment" spellcheck="true">// 第一轮比较 长度-1，后面每次-1，因为每次一轮比较后确定一位最大数</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="2-快速排序">2、快速排序</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">.</span>交换排序<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 11:23 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 快速排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 从开始start排到结尾end   *   * @param arr   * @param start   * @param end   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 把数组中的第0个数字作为标准数</span>      <span class="token keyword">int</span> stard <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 记录需要排序的下标</span>      <span class="token keyword">int</span> low <span class="token operator">=</span> start<span class="token punctuation">;</span>      <span class="token keyword">int</span> high <span class="token operator">=</span> end<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 循环找比标准数大的数和小的数，进行分类</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 右边数字比标准数大，下标向前，移动下标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> stard <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          high<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 右边数字比标准数小，使用右边的数字替换左边的数字</span>        arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 左边数字倍比标准数小，就移动下标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> stard<span class="token punctuation">)</span> <span class="token punctuation">{</span>          low<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//替换</span>        arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 标准数在中间</span>      arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> stard<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 处理左边</span>      <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 处理右边</span>      <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="插入排序">插入排序</span></h2><h3><span id="3-直接插入排序">3、直接插入排序</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">.</span>插入排序<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 下午 1:26 * @describe: 确定左边的数，左边的都是小的，从右边拿一个依次和前边比 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 直接插入排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历当前数字的前方的数字</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//给后面的赋值</span>          arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//给前面的赋值。注意j--</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="4-希尔排序">4、希尔排序</span></h3><pre class=" language-JAVA"><code class="language-JAVA">package 排序算法.插入排序;import java.util.Arrays;/** * @author: lpc * @date: 1/2/2022 下午 3:23 * @describe: * @vision */public class 希尔排序 {  public static void main(String[] args) {    int[] arr = {55, 1, 3, 5, 2, 4, 99, 66, 77, 44, 33};    System.out.println(Arrays.toString(arr));    show(arr);    System.out.println(Arrays.toString(arr));  }  public static void show(int[] arr) {    // 遍历步长    for (int d = arr.length / 2; d > 0; d /= 2) {      // 遍历d后边所有元素      for (int i = d; i < arr.length; i++) {        // 遍历d前边的所有元素        for (int j = i - d; j >= 0; j -= d) {          if (arr[j] > arr[j + d]) {            int temp = arr[j];            arr[j] = arr[j + d];            arr[j + d] = temp;          }        }      }    }  }}</code></pre><h2><span id="选择排序">选择排序</span></h2><h3><span id="5-简单选择排序">5、简单选择排序</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">.</span>选择排序<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 下午 4:20 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 简单选择排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          index <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//本身就是最小的，就不需要交换了</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="6-堆排序">6、堆排序</span></h3><h2><span id="7-归并排序">7、归并排序</span></h2><pre class=" language-JAVA"><code class="language-JAVA">package 排序算法;import java.util.Arrays;/** * @author: lpc * @date: 1/2/2022 下午 7:04 * @describe: * @vision */public class 归并排序 {  public static void main(String[] args) {    int[] arr = {55, 1, 3, 5, 2, 4, 99, 66, 77, 44, 33};    System.out.println(Arrays.toString(arr));    showSort(arr, 0, arr.length - 1);    System.out.println(Arrays.toString(arr));  }  public static void showSort(int[] arr, int low, int high) {    int middle = (high + low) / 2;    if (low < high) {      // 处理左边      showSort(arr, low, middle);      // 处理右边      showSort(arr, middle + 1, high);      // 归并      show(arr, low, middle, high);    }  }  /**   * 用middle拆分为两个数组   *   * @param arr   * @param low 开始位置   * @param middle 中间位置   * @param high 结束位置   */  public static void show(int[] arr, int low, int middle, int high) {    // 临时数组，high-low+1=元素个数/长度(这一组的长度)    int[] temp = new int[high - low + 1];    // 第一个数组的开始位置    int i = low;    // 第二个数组的开始位置    int j = middle + 1;    // 记录临时数组下标    int index = 0;    // 遍历两个数组取出小的放入临时数组    while (i <= middle && j <="high)" { 第一个数组小 if (arr[i] temp[index]="arr[i];" index++; i++; } else 第二个数组小 j++; 某一个数组下标超出了,就把另一个数组的数全部加到临时数组 while (j (i 临时数组从新存入原数组 for (int k="0;" temp.length; k++) arr[k + low]="temp[k];" code></=></code></pre><h2><span id="8-基数排序">8、基数排序</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 下午 7:37 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 基数排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 找出最大的数字存数组中</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最大数是几位数</span>    <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建二维数组，存储数据(例:个位是1，存1号数组，百位是2存2号数组)</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 临时数组，记录二维数组中每位存入数字的个数</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据几位数确定比较次数(99是两位数，就比较2次,比较个位和十位)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> n <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 遍历每一个数字，</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取出每一位的数字(关键)</span>        <span class="token keyword">int</span> ys <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前数字放入二维数组中指定的位置</span>        temp<span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token punctuation">[</span>counts<span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 个数++</span>        counts<span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 取出数字</span>      <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> counts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 遍历个数</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> counts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取出元素,放回arr</span>            arr<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            w<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 记录个数置为0，下次要用</span>          counts<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="优化加入队列">优化加入队列</span></h3><pre class=" language-JAVA"><code class="language-JAVA">package 排序算法;import 线性结构.队列.Queue;import java.util.Arrays;/** * @author: lpc * @date: 1/2/2022 下午 7:37 * @describe: * @vision */public class 基数排序加入队列 {  public static void main(String[] args) {    int[] arr = {55, 1, 3, 5, 2, 4, 99, 66, 77, 44, 33};        System.out.println(Arrays.toString(arr));    show(arr);        System.out.println(Arrays.toString(arr));  }  public static void show(int[] arr) {    // 找出最大的数字存数组中    int max = Integer.MIN_VALUE;    for (int i = 0; i < arr.length; i++) {      if (arr[i] > max) {        max = arr[i];      }    }    // 最大数是几位数    int maxLength = (max + "").length();    // 创建10个队列    Queue[] temp = new Queue[10];    // 为队列数组赋值    for (int i = 0; i < temp.length; i++) {      temp[i] = new Queue();    }    // 根据几位数确定比较次数(99是两位数，就比较2次,比较个位和十位)    for (int i = 0, n = 1; i < maxLength; i++, n *= 10) {      // 遍历每一个数字，      for (int j = 0; j < arr.length; j++) {        // 取出每一位的数字(关键)        int ys = arr[j] / n % 10;        // 当前数字放入指定的队列        temp[ys].add(arr[j]);      }      // 取出数字      int w = 0;      for (int j = 0; j < temp.length; j++) {        // 遍历每个队列的所有元素        while (temp[j].status().length != 0) {          // 取出元素,放回arr          arr[w] = temp[j].poll();          w++;        }      }    }  }}</code></pre><h1><span id="树形结构">树形结构</span></h1><h2><span id="链式存储的二叉树">链式存储的二叉树</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 树结构<span class="token punctuation">.</span>二叉树<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 2/2/2022 上午 11:19 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 链式存储的二叉树 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建树</span>    BinaryTree tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建根节点</span>    TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把根节点赋给树</span>    tree<span class="token punctuation">.</span><span class="token function">setRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建两个节点</span>    TreeNode rootL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode rootR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置为根节点的子节点</span>    root<span class="token punctuation">.</span><span class="token function">setLeftNode</span><span class="token punctuation">(</span>rootL<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span><span class="token function">setRightNode</span><span class="token punctuation">(</span>rootR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建子节点，给子节点添加子节点</span>    rootL<span class="token punctuation">.</span><span class="token function">setLeftNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//          1</span>    rootL<span class="token punctuation">.</span><span class="token function">setRightNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//     2        3</span>    rootR<span class="token punctuation">.</span><span class="token function">setLeftNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//    4   5    6   7</span>    rootR<span class="token punctuation">.</span><span class="token function">setRightNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  前序遍历 根左右</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前中后遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  中序遍历 左根右</span>    tree<span class="token punctuation">.</span><span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  后序遍历 左右根</span>    tree<span class="token punctuation">.</span><span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前序查找"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode result <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token function">frontSearch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除一个节点</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 树</span><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span> <span class="token punctuation">{</span>  TreeNode root<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置根节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoot</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取根节点</span>  <span class="token keyword">public</span> TreeNode <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 前序遍历</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 中序遍历</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 后序遍历</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 前序查找</span>  <span class="token keyword">public</span> TreeNode <span class="token function">frontSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">frontSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除一个节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 节点</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 权</span>  <span class="token keyword">int</span> value<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左节点</span>  TreeNode leftNode<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右节点</span>  TreeNode rightNode<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置左节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeftNode</span><span class="token punctuation">(</span>TreeNode leftNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>leftNode <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置右节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRightNode</span><span class="token punctuation">(</span>TreeNode rightNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rightNode <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 前序遍历 根左右</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 遍历字自己</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 左</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftNode<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 右</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      rightNode<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 中序遍历 左根右</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 左</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftNode<span class="token punctuation">.</span><span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历字自己</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 右</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      rightNode<span class="token punctuation">.</span><span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 后序遍历 左右根</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 左</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftNode<span class="token punctuation">.</span><span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 右</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      rightNode<span class="token punctuation">.</span><span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历字自己</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 前序查找</span>  <span class="token keyword">public</span> TreeNode <span class="token function">frontSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    TreeNode target <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对比当前节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 对比左节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> leftNode<span class="token punctuation">.</span><span class="token function">frontSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 对比右节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> rightNode<span class="token punctuation">.</span><span class="token function">frontSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除一个节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    TreeNode parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 左边</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>leftNode <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>leftNode<span class="token punctuation">.</span>value <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>leftNode <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 右边</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>rightNode <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>rightNode<span class="token punctuation">.</span>value <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没有，就去子节点找</span>    parent <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    parent <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"TreeNode{"</span>        <span class="token operator">+</span> <span class="token string">"value="</span>        <span class="token operator">+</span> value        <span class="token operator">+</span> <span class="token string">", leftNode="</span>        <span class="token operator">+</span> leftNode        <span class="token operator">+</span> <span class="token string">", rightNode="</span>        <span class="token operator">+</span> rightNode        <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="顺序存储的二叉树">顺序存储的二叉树</span></h2><img src="/2022/01/15/shu-ju-jie-gou-he-suan-fa-wei-wan/image-20220202134803648.png" alt="image-20220202134803648" style="zoom:200%;">]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目笔记</title>
      <link href="/2022/01/10/gulimall-bi-ji/"/>
      <url>/2022/01/10/gulimall-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1><span id="feign使用">Feign使用</span></h1><p>1、启动类加入注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.lpc.gulimall.member.feign"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开启feign远程客户端,指定远程调用方法包</span></code></pre><p>2、建包feign，加入方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"gulimall-coupon"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//掉远程服务器名或集群名</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CouponFeignService</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//远程服务器url必须一致，还有方法名</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/coupon/coupon/member/list"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//远程方法全路径</span>    <span class="token keyword">public</span> R <span class="token function">membercoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1><span id="nacos配置中心使用">nacos配置中心使用</span></h1><p>1、配置文件==bootstarp.properties==</p><p>2、给配置中心添加配置(名字要求：<code>应用名.properties</code>)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206165706371.png" alt="image-20211206165706371"></p><p>也可以指定名字，bootstarp.properties加入</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.nacos.config.name</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span></code></pre><p>3、需要的类加入注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RefreshScope</span><span class="token comment" spellcheck="true">//动态获取配置中心配置</span></code></pre><p>4、获取配置<code>@Value(${""})</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${coupon.user.name}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${coupon.user.age}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Integer age<span class="token punctuation">;</span></code></pre><p>==注意如果应用里也有相同配置：配置中心优先==</p><h2><span id="细节">细节</span></h2><ol><li><p>命名空间：配置隔离</p><p>创建多个命名空间</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206170202548.png" alt="image-20211206170202548"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206171248574.png" alt="image-20211206171248574"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206171303645.png" alt="image-20211206171303645"></p><p>默认：public(保留空间)；默认新增的配置都在public空间</p><ol><li><p>|开发、测试、生产；</p><p>利用命名空间做环境隔离</p></li><li><p>|多个命名空间多个配置切换？</p><p><code>bootstrap.properties</code>加入配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#获取别的空间的配置，可以指定命名空间，参数是命名空间id</span><span class="token attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token attr-value">2fa2a9a4-de99-4fd2-9c79-aaea6ec7e1b1</span></code></pre></li><li><p>|每个微服务之间互相隔离配置，每个微服务都创建一个自己的命名空间，只加载自己命名空间的配置</p></li></ol></li><li><p>配置集：配置的集合</p></li><li><p>配置集ID：类似配置文件名</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206171912112.png" alt="image-20211206171912112"></p></li><li><p>配置集分组*：</p><p>默认所有的配置集都属于:DEFAULT_GROUP组；</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206172216252.png" alt="image-20211206172216252"></p><p>换组：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#换组 默认default</span><span class="token attr-name">spring.cloud.nacos.config.group</span><span class="token punctuation">=</span><span class="token attr-value">111</span></code></pre></li></ol><p>==最佳使用：每个微服务创建自己的命名空间，使用配置分组区分环境==</p><h2><span id="同时加载多配置集">同时加载多配置集</span></h2><p>配置文件的配置太多比较乱，可以拆分为多个配置文件</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206174105246.png" alt="image-20211206174105246"></p><ol><li><p>加入配置</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].data-id</span><span class="token punctuation">=</span><span class="token attr-value">datasource.yml</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token comment" spellcheck="true">#动态刷新</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true </span><span class="token attr-name">spring.cloud.nacos.config.ext-config[1].data-id</span><span class="token punctuation">=</span><span class="token attr-value">mybatis.yml</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[1].group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[1].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true </span><span class="token attr-name">spring.cloud.nacos.config.ext-config[2].data-id</span><span class="token punctuation">=</span><span class="token attr-value">other.yml</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[2].group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[2].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true </span></code></pre><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206175009198.png" alt="image-20211206175009198"></p></li><li><p>测试</p><p>发现加载了4个配置，默认会加载1个配置：默认组的<code>应用.properties</code>配置文件</p></li></ol><blockquote><p>任何配置文件都可以放入配置中心</p><p>只需要在<code>bootstrap.properties</code>文件中指定加载那些即可</p></blockquote><h1><span id="mp逻辑删除">MP逻辑删除</span></h1><ol><li><p>配置全局逻辑删除规则(省)</p></li><li><p>配置逻辑删除组件Bean(省)</p></li><li><p>给字段属性加注解@TableLogic</p><pre class=" language-JAVA"><code class="language-JAVA">@TableLogic(value="1",delval = "0")</code></pre></li></ol><h1><span id="跨域问题">跨域问题</span></h1><p>spring提供了类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> CorsWebFilter <span class="token function">corsWebFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CorsConfiguration corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1、配置跨域</span>  corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsWebFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1><span id="jsr303校验">JSR303校验</span></h1><ol><li><p>给bean添加校验注解：javax.validation.constraints，并定义自己的错误信息提示</p></li><li><p>开启校验：接口参数种加入@Valid注解</p><p>校验错误以后会默认响应</p></li><li><p>给开启校验的参数后，紧跟一个BindingResult，就可以获取到校验的结果</p></li></ol><h2><span id="统一的异常处理">统一的异常处理</span></h2><blockquote><p>@ControllerAdvice注解：指定处理一个包下的所有异常</p></blockquote><p>定义异常信息类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 9/12/2021 下午 10:17 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> BizCodeEnum <span class="token punctuation">{</span>  <span class="token function">UNKNOW_EXCEPTION</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">"系统位置异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">VAILD_EXCEPTION</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token string">"参数格式校验失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token function">BizCodeEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> code<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> msg<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>统一处理异常</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindingResult<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>MethodArgumentNotValidException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 9/12/2021 下午 9:51 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// 集中处理异常</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span><span class="token string">"com.lpc.gulimall.product.controller"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallExceptionController</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//精确匹配</span>  <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> R <span class="token function">handleVaildException</span><span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"数据校验出现问题{},异常类型:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BindingResult result <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> errorMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result        <span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>fieldError<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              errorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fieldError<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>VAILD_EXCEPTION<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BizCodeEnum<span class="token punctuation">.</span>VAILD_EXCEPTION<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> errorMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 不能精确匹配</span>  <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Throwable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> R <span class="token function">handleException</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>UNKNOW_EXCEPTION<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BizCodeEnum<span class="token punctuation">.</span>UNKNOW_EXCEPTION<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="分组校验功能多场景都复杂校验">分组校验功能(多场景都复杂校验)</span></h2><p>新增两个接口类AddGroups,UpdateGroup用作分组校验的标识符</p><p>校验的类和接口，可以指定使用add或update的标识符，实现不同情况下进行不同的校验</p><p>比如：校验类使用了add和update，意思是这个属性属于这两个组，需要add和update的标识符校验</p><p>​           接口加入了add组的校验，意思是调属性的时候会去校验使用了add组下的属性</p><p>简单理解：属性 接口 一样的标识符，我就校验你</p><ol><li><p>给校验注解标注什么情况需要校验,==不指定group的属性，接口使用分组校验，则不生效==；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableId<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableName<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>AddGroup<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>UpdateGroup<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 品牌 *  * @author lpc * @email lpc@gmail.com * @date 2021-12-06 12:34:46 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"pms_brand"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 品牌id     */</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"修改必须指定品牌id"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Null</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"新增id必须为空"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableId</span>    <span class="token keyword">private</span> Long brandId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 品牌名     */</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"品牌名必须提交"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 品牌logo地址     */</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@URL</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"logo必须是一个合法的url地址"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String logo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 介绍     */</span>    <span class="token keyword">private</span> String descript<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 显示状态[0-不显示；1-显示]     */</span>    <span class="token keyword">private</span> Integer showStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 检索首字母     */</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"/^[a-zA-Z]$/"</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"检索首字母必须是一个字母"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String firstLetter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 排序     */</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"排序必须大于等于0"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer sort<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>controller指定接口什么情况校验，add都时候：<code>@Validated(AddGroup.class)</code>，update都时候：<code>@Validated(UpdateGroup.class)</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 添加*/</span><span class="token keyword">public</span> R <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> BrandEntity brand<span class="token comment" spellcheck="true">/*, BindingResult result*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   brandService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 修改 */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span><span class="token keyword">public</span> R <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestBody</span> BrandEntity brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>   brandService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2><span id="自定义校验">自定义校验</span></h2><ol><li><p>编写一个自定义的注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Constraint<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Payload<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 10/12/2021 下午 2:30 *@describe: *@vision */</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//绑定自定义校验器,可以添加多个校验器，适应不同d</span>        validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>ListValueConstrainValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ListValue</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//默认提示</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"{com.lpc.common.valid.ListValue.message}"</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">vals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>新建<code>ValidationMessages.properties</code>作为默认messages提示</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">com.lpc.common.valid.ListValue.message</span><span class="token punctuation">=</span><span class="token attr-value">必须提交指定都值</span></code></pre></li><li><p>编写一个自定义都校验器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ConstraintValidator<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ConstraintValidatorContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/12/2021 下午 2:37 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListValueConstrainValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>ListValue<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化方法</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>ListValue constraintAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vals <span class="token operator">=</span> constraintAnnotation<span class="token punctuation">.</span><span class="token function">vals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">:</span> vals<span class="token punctuation">)</span> <span class="token punctuation">{</span>      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断是否校验成功</span>  <span class="token comment" spellcheck="true">/**   *   * @param value 需要校验的值   * @param context   * @return   */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>Integer value<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>关联自定义的校验器和自定义的校验注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ListValue</span><span class="token punctuation">(</span>vals<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">private</span> Integer showStatus<span class="token punctuation">;</span></code></pre></li></ol><h1><span id="时间格式化">时间格式化</span></h1><p>配置文件加入配置，格式化项目里全部的日期</p><p>阿里jsckson的</p><pre class=" language-yml"><code class="language-yml">spring:  jackson:    date-format: yyyy-MM-dd HH:mm:ss</code></pre><p>springmvc的</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.mvc.date-format</span><span class="token punctuation">=</span><span class="token attr-value">yyyy-MM-dd HH:mm:ss</span></code></pre><h1><span id="es">ES</span></h1><ul><li>1、导入依赖</li><li>2、编写配置 :给容器里注入RestHighLevelClient</li><li>3、参照官方文档操作api</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#匹配全部 排序 分页 筛选只显示两个字段</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"sort"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"balance"</span><span class="token keyword">:</span> <span class="token string">"desc"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span>,  <span class="token string">"from"</span><span class="token keyword">:</span> 5,  <span class="token string">"size"</span><span class="token keyword">:</span> 5,  <span class="token string">"_source"</span>:<span class="token punctuation">[</span><span class="token string">"balance"</span>,<span class="token string">"firstname"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#分词匹配 没有双引号绝对匹配</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"account_number"</span><span class="token keyword">:</span> 20    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#分词匹配</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"mill lane"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#不分词匹配</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_phrase"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"mill lane"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#多字段匹配 会分词</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"multi_match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token string">"mill"</span>,      <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"address"</span>,<span class="token string">"city"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#条件查询</span><span class="token comment" spellcheck="true">#must必须</span><span class="token comment" spellcheck="true">#must_not必须不满足</span><span class="token comment" spellcheck="true">#should满足不满足都行，满足得分高</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"gender"</span><span class="token keyword">:</span> <span class="token string">"M"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,                <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"mill"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>,      <span class="token string">"must_not"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token string">"18"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>,      <span class="token string">"should"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"lastname"</span><span class="token keyword">:</span> <span class="token string">"Wallace"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#filter不计算得分 结果过滤</span><span class="token comment" spellcheck="true">#ranger区间</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"gte"</span><span class="token keyword">:</span> 18,              <span class="token string">"lte"</span><span class="token keyword">:</span> 30            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"gte"</span><span class="token keyword">:</span> 18,            <span class="token string">"lte"</span><span class="token keyword">:</span> 30          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#term精确查询 123这种适合</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"term"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token string">"28"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#规定：</span><span class="token comment" spellcheck="true">#term 没有引号</span><span class="token comment" spellcheck="true">#macth 文本</span></code></pre><h2><span id="aggs">Aggs</span></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#搜索address中包含mill的所有人的年龄分布以及平均年龄和薪资</span><span class="token comment" spellcheck="true">#聚合aggs：</span><span class="token comment" spellcheck="true">#聚合age的所有情况(比如：38的有几位，28的有几位)</span><span class="token comment" spellcheck="true">#聚合类型:terms、avg</span><span class="token comment" spellcheck="true">#size大小：如果有100中情况，只展示10个</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"mill"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"ageAgg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"age"</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 10      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"ageAvg"</span>:<span class="token punctuation">{</span>       <span class="token string">"avg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>         <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"age"</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"balanceAvg"</span>:<span class="token punctuation">{</span>      <span class="token string">"avg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"balance"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"size"</span><span class="token keyword">:</span> 0<span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#按照年龄聚合，并且请求这些年龄段的这些人的平均薪资</span><span class="token comment" spellcheck="true">#子聚合</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"ageAgg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"age"</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 100      <span class="token punctuation">}</span>,      <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"balanceAvg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"avg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"balance"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"ageAgg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"age"</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 100      <span class="token punctuation">}</span>,      <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"genderAgg"</span>:<span class="token punctuation">{</span>          <span class="token string">"terms"</span>:<span class="token punctuation">{</span>             <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"gender.keyword"</span>          <span class="token punctuation">}</span>,          <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"balanceAvg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"avg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"balance"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="mapping">Mapping</span></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看映射</span>GET /bank/_mapping<span class="token comment" spellcheck="true">#创建索引并指定映射</span>PUT /my_index<span class="token punctuation">{</span>  <span class="token string">"mappings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"properties"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"age"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span>,      <span class="token string">"email"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span>,      <span class="token string">"name"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#添加映射字段</span><span class="token comment" spellcheck="true">#index:false 禁止索引(默认true)，以后都不能被检索到：用于冗余字段</span>PUT /my_index/_mapping<span class="token punctuation">{</span>  <span class="token string">"properties"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"employee-id"</span>:<span class="token punctuation">{</span>      <span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"keyword"</span>,      <span class="token string">"index"</span>:false    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#修改映射字段：改不了，可以数据迁移(创建新的映射)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#数据迁移</span><span class="token comment" spellcheck="true">#新建一个映射</span>PUT /newbank<span class="token punctuation">{</span>  <span class="token string">"mappings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"properties"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"account_number"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"long"</span>      <span class="token punctuation">}</span>,      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span>,      <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"integer"</span>      <span class="token punctuation">}</span>,      <span class="token string">"balance"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"long"</span>      <span class="token punctuation">}</span>,      <span class="token string">"city"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span>,      <span class="token string">"email"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span>,      <span class="token string">"employer"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span>,      <span class="token string">"firstname"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span>,      <span class="token string">"gender"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span>,      <span class="token string">"lastname"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,        <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"keyword"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>,            <span class="token string">"ignore_above"</span><span class="token keyword">:</span> 256          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>,      <span class="token string">"state"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,        <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"keyword"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>,            <span class="token string">"ignore_above"</span><span class="token keyword">:</span> 256          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>GET /bank/_search<span class="token comment" spellcheck="true">#数据迁移</span><span class="token comment" spellcheck="true">#type有了写，没有不写，6版本以后渐渐没有type</span>POST _reindex<span class="token punctuation">{</span>  <span class="token string">"source"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"index"</span><span class="token keyword">:</span> <span class="token string">"bank"</span>,    <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"account"</span>  <span class="token punctuation">}</span>,  <span class="token string">"dest"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"index"</span><span class="token keyword">:</span> <span class="token string">"newbank"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>GET /newbank/_search</code></pre><h2><span id="分词">分词</span></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#分词</span><span class="token comment" spellcheck="true">#standard默认分词器 对英文分词的 需要安装中文分词器</span>POST _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"standard"</span>,  <span class="token string">"text"</span><span class="token keyword">:</span><span class="token string">"我是中国人"</span><span class="token punctuation">}</span></code></pre><p>安装中文分词器,再次运行，发现<code>中国人</code>分成了一个词</p><p>ik_smart:最佳分词</p><p>ik_max_word:最多分词</p><pre class=" language-bash"><code class="language-bash">POST _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"ik_smart"</span>,  <span class="token string">"text"</span><span class="token keyword">:</span><span class="token string">"我是中国人"</span><span class="token punctuation">}</span></code></pre><h1><span id="整合redis">整合Redis</span></h1><ol><li>引入data-redis-starter</li><li>简单配置redis的host等信息</li><li>使用springboot自动配置好的redisTemplate来操作redis</li></ol><p><img src="/2022/01/10/gulimall-bi-ji/image-20211218124613864.png" alt="image-20211218124613864"></p><p>1、缓存空结果：解决缓存穿透 </p><p>2、设置过期时间(加随机值):解决缓存雪崩 </p><p>3、加锁：解决缓存击穿</p><h1><span id="redisson">Redisson</span></h1><ol><li>引入依赖</li><li>配置redisson</li></ol><blockquote><p>解决的问题：</p></blockquote><ul><li>锁的自动续期：不会因为业务时间长，锁会过期；(默认存活时期是30秒，不够会续期)</li><li>没有死锁问题：加锁业务只要运行完成就不会续期，即使没有手动解锁，默认30秒以后自动解锁</li><li>加锁时会阻塞：等待业务没有锁的时候才去上锁</li></ul><blockquote><p>注意：手动指定过期时间没有看门狗续期</p></blockquote><p>原因：</p><ul><li>如果指定了超时时间，就会发送redis执行脚本，进行占锁，默认就是我们的超时时间</li><li>没有指定超时时间，就使用30*1000【LockWatchdogTimeout看门狗的默认时间】，只要占锁成功，就会启动一个定时任务【重新给锁设置过期时间，新的过期时间就是看门狗的默认时间】【续期时间：看门狗时间的1/3，就续满30时间】</li></ul><p>最佳实战：</p><ul><li>推荐指定超时时间(省掉了续期操作)，指定一个长时间就行，然后手动解锁</li></ul><blockquote><p>读写锁：</p></blockquote><ul><li>写锁没释放的时候，读锁会等待写锁释放才能获取。<ul><li>写+读：等待写锁释放</li><li>写+写：排队，阻塞方式</li><li>读+写：等待读锁释放</li><li>读+读：无序和没锁一样，并发时都能获取到读锁</li><li>==总结：只要有写，都必须等待==</li></ul></li><li>读锁：共享锁</li><li>写锁：排他锁/互斥锁/独享锁</li></ul><blockquote><p>信号量</p></blockquote><p>有3个停车位</p><p>停一辆车就-1个停车位</p><p>停车位=0时</p><p>就停不了车了</p><p>==停车位：信号量==</p><p>限流</p><blockquote><p>闭锁</p></blockquote><p>放假，锁门</p><p>5个班</p><p>所有班走完</p><p>才能锁门</p><p>==减法计数器：5变成0时才释放锁==</p><blockquote><p>缓存里的数据如何跟数据库保持一致</p></blockquote><p>缓存数据一致性问题?</p><p>1、双写模式（改数据库，改缓存）</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211218203305118.png" alt="image-20211218203305118"></p><p>有问题：</p><p>两次请求都采用双写模式来修改数据，</p><p>一个去改数据库，然后改缓存，</p><p>另一个也去改数据库，改缓存，</p><p>第二个比第一个改缓存改的快，</p><p>最后第一个把第二个的缓存也改了，</p><p>最终数据库存的是第二修改的数据，但缓存的是第一个存的数据。</p><ul><li>加锁</li><li>暂时数据不一致，等缓存数据过期，之后放入最新数据</li></ul><p>2、失效模式（改数据库，删缓存）</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211218203324229.png" alt="image-20211218203324229"></p><p>又没有把最新的数据更新到缓存</p><ul><li>加锁</li></ul><blockquote><p>数据一致性–解决方案</p></blockquote><p>所有数据都带过期时间</p><p>读数据的时候加入，分布式读写锁</p><p>Canal</p><h1><span id="整合spring-cache-简化缓存开发">整合spring cache 简化缓存开发</span></h1><ol><li><p>引入依赖</p></li><li><p>编写配置</p><ol><li><p>自动配置了</p><ul><li>CacheAutoConfiguration会导入RedisCacheConfiguration</li><li>自动配好了缓存管理器RedisCacheManager</li></ul></li><li><p>自己配置</p><ul><li><p>配置redis作为缓存在配置文件中</p></li><li><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cache.type</span><span class="token punctuation">=</span><span class="token attr-value">redis</span></code></pre></li></ul></li><li><p>测试使用缓存</p><pre class=" language-tex"><code class="language-tex">@Cacheable:触发将数据保存到缓存的操作@CacheEvict:触发将数据从缓存删除的操作   失效模式@CachePut:不影响方法执行更新缓存   双写模式@Caching:组合以上操作@CacheConfig:在类级别共享缓存的相同配置</code></pre><ol><li><p>开启缓存功能在启动类上</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span></code></pre></li><li><p>只需要使用注解就能完成缓存操作了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//每一个需要缓存的数据我们都来指定要放到那个名字的缓存【缓存分区(按照业务类型划分)】</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"catagory"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//代表当前方法的结果需要缓存。如果缓存中有，方法不用调用。如果缓存中没有，则执行方法返回结果，顺便把结果放入缓存。</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>CategoryEntity<span class="token operator">></span> <span class="token function">getLevel1Categorys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre></li><li><p>默认行为</p><ul><li>如果方法中有，方法不用调用</li><li>key默认自动生成<code>缓存的名字::SimpleKey []</code></li><li>缓存的value的值，默认使用jdk序列化后的数据作为value</li><li>默认过期时间，是-1，永不过期(需要自定义)</li></ul></li><li><p>自定义</p><ul><li><p>指定生成key，字符串记得加’’单引号</p><p><code>key属性，接收一个SpEl</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"catagory"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"'level1Categorys'"</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">key <span class="token operator">=</span> <span class="token string">"#root.method.name"</span>#使用方法名作为key，具体语法，百度</code></pre></li><li><p>自定义缓存存活时间</p><p>配置文件写入</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cache.redis.time-to-live</span><span class="token punctuation">=</span><span class="token attr-value">3600000#单位毫秒 1小时</span></code></pre></li><li><p>value保存为json格式</p><p>添加自己的配置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>CacheProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableCaching<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>GenericJackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>RedisSerializationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 19/12/2021 下午 12:37 * @describe: * @vision */</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCacheConfig</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 配置文件的设置没有用上，将配置文件的配置也设置进来   * @return   */</span>  <span class="token annotation punctuation">@Bean</span>  RedisCacheConfiguration <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span>CacheProperties cacheProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RedisCacheConfiguration config <span class="token operator">=</span> RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config <span class="token operator">=</span>config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config <span class="token operator">=</span>config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CacheProperties<span class="token punctuation">.</span>Redis redisProperties <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将配置文件中所有的配置都生效</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">prefixKeysWith</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isUseKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol></li><li><p>原理</p><p>CacheAutoConfiguration  –&gt;   RedisCacheConfiguration  –&gt;  </p><p>自动配置了RedisCacheManager –&gt;  初始化所有的缓存   –&gt;  每个缓存决定使用什么配置</p><p>–&gt;  使用默认配置(如果没有自定义配置)   –&gt;  想修改缓存配置，只需在容器中放一个 RedisCacheConfiguration即可 –&gt;他会自动应用到RedisCacheManager 管理的所有缓存分区中</p></li><li><p>其他配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#key前缀,没有默认使用缓存名字作为前缀 建议不指定，用默认分区作为前缀</span><span class="token attr-name">spring.cache.redis.key-prefix</span><span class="token punctuation">=</span><span class="token attr-value">CACHE_ </span><span class="token comment" spellcheck="true">#是否使用前缀，默认true开启</span><span class="token attr-name">spring.cache.redis.use-key-prefix</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#是否缓存空值</span><span class="token attr-name">spring.cache.redis.cache-null-values</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre></li><li><p>Spring-Cache的不足</p><ol><li><p>读模式</p><ul><li><p>缓存穿透 ：查询一个null数据。解决：缓存空数据。</p><p> Spring-Cache提供了</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#是否缓存空值</span><span class="token attr-name">spring.cache.redis.cache-null-values</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre></li><li><p>缓存击穿：大量请求同时查询一个正好过期的数据。解决：加锁</p><p>Spring-Cache提供，没有分布式锁，可以设置同步锁解决击穿</p><p>只有 @Cacheable有sync属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"catagory"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#root.method.name"</span><span class="token punctuation">,</span>sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></code></pre></li><li><p>缓存雪崩：当量缓存同时过期。解决：加过期时间</p><p>提供</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cache.redis.time-to-live</span><span class="token punctuation">=</span><span class="token attr-value">3600000</span></code></pre></li></ul></li><li><p>写模式：(缓存与数据库一致)</p><ul><li>读写加锁</li><li>进入Canal，感知mysql更新自动更新缓存</li><li>读多写多，直接去数据查询</li></ul></li><li><p>总结：</p><ul><li>常规数据(读多写少，及时性，一致性要求不高的；)，完全可以使用SpringCache</li><li>特殊数据：需要特殊设计</li></ul></li></ol></li></ol></li></ol><h1><span id="创建线程的四种方式">创建线程的四种方式</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20211222120545683.png" alt="image-20211222120545683"></p><p>推荐使用第四种</p><h2><span id="运行流程">运行流程：</span></h2><p>1、线程池创建，准备好 core 数量的核心线程，准备接受任务 </p><p>2、新的任务进来，用 core 准备好的空闲线程执行。 </p><ul><li><p>(1) 、core 满了，就将再进来的任务放入阻塞队列中。空闲的 core 就会自己去阻塞队 </p><p>列获取任务执行 </p><p>(2) 、阻塞队列满了，就直接开新线程执行，最大只能开到 max 指定的数量 </p><p>(3) 、max 都执行好了。Max-core 数量空闲的线程会在 keepAliveTime 指定的时间后自 </p><p>动销毁。最终保持到 core 大小 </p><p>(4) 、如果线程数开到了 max 的数量，还有新任务进来，就会使用 reject 指定的拒绝策 </p><p>略进行处理 </p></li></ul><p>3、所有的线程创建都是由指定的 factory 创建的。</p><h1><span id="重定向传值">重定向传值</span></h1><p>使用<code>RedirectAttributes redirectAttributes</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//下一个页面只要取了这个数据，session里就会删掉,利用session，需要解决session共享问题</span>redirectAttributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"errors"</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重定向携带数据，放在?后边</span>redirectAttributes<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"skuId"</span><span class="token punctuation">,</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代替Model model</p><p>原理:使用了session(分布式需要解决共享问题)</p><h1><span id="gitee授权登录">Gitee授权登录</span></h1><p><a href="https://gitee.com/api/v5/oauth_doc#/">https://gitee.com/api/v5/oauth_doc#/</a></p><h1><span id="session共享问题">Session共享问题</span></h1><p>解决方案：</p><ol><li><p>session复制(不推荐)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227101822692.png" alt="image-20211227101822692"></p></li><li><p>客户端存储(不推荐)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227102158141.png" alt="image-20211227102158141"></p></li><li><p>利用hash一致性</p><ul><li>你的session存储到a服务器，那你以后的请求都落到a服务器处理</li></ul><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227102255532.png" alt="image-20211227102255532"></p></li><li><p>统一存储</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227103916077.png" alt="image-20211227103916077"></p></li><li><p>子域共享</p><ul><li>继承了父亲的session</li></ul><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227104616271.png" alt="image-20211227104616271"></p><p>子域怎么方父域？</p><ul><li><p>加入配置类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>session<span class="token punctuation">.</span>web<span class="token punctuation">.</span>http<span class="token punctuation">.</span>CookieSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>session<span class="token punctuation">.</span>web<span class="token punctuation">.</span>http<span class="token punctuation">.</span>DefaultCookieSerializer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 27/12/2021 下午 12:23 *@describe: *@vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallSessionConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> CookieSerializer <span class="token function">cookieSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      DefaultCookieSerializer cookieSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultCookieSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//指定作用域</span>      cookieSerializer<span class="token punctuation">.</span><span class="token function">setDomainName</span><span class="token punctuation">(</span><span class="token string">"gulimall.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cookieSerializer<span class="token punctuation">.</span><span class="token function">setCookieName</span><span class="token punctuation">(</span><span class="token string">"GULISESSION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cookieSerializer<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><h2><span id="json序列化存入redis">JSON序列化存入Redis</span></h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> RedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">springSessionDefaultRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1><span id="整合spring-session">整合Spring Session</span></h1><p><a href="https://docs.spring.io/spring-session/reference/2.6.1/guides/boot-redis.html">https://docs.spring.io/spring-session/reference/2.6.1/guides/boot-redis.html</a></p><p>示例在gulimall-auth-server服务下</p><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--spring session--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定session在session中</span><span class="token attr-name">spring.session.store-type</span><span class="token punctuation">=</span><span class="token attr-value">redis</span><span class="token attr-name">server.servlet.session.timeout</span><span class="token punctuation">=</span><span class="token attr-value">30m</span></code></pre></li><li><p>加入配置注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableRedisHttpSession</span></code></pre></li></ol><h2><span id="核心原理">核心原理</span></h2><ol><li><p><code>@EnableRedisHttpSession</code>导入了<code>RedisHttpSessionConfiguration.class</code></p><ol><li><p>给容器中添加了一个组件:<code>RedisOperationsSessionRepository</code>:==redis操作session==</p></li><li><p>放了一个SessionRepositoryFilter:==session存储过滤器==,每个请求都要经过过滤器</p><ol><li><p>创建的时候，就自动从容器中获取到了SessionRepository【RedisOperationsSessionRepository】</p></li><li><p>核心原理</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227155500104.png" alt="image-20211227155500104"></p><p>原生的request和response都被包装</p></li><li><p>以后我们获取session。request.getSession();</p></li><li><p>就等于WrappedRequest.getSession() ====&gt; SessionRepository中获取到</p></li></ol></li></ol></li></ol><p>==装饰者模式==</p><p>自定延期：页面刷新，redis中的过期时间也刷新了【spriong session中也提供了这个功能】</p><h1><span id="单点登录">单点登录</span></h1><p><a href="https://blog.csdn.net/qq_37126175/article/details/107750145">https://blog.csdn.net/qq_37126175/article/details/107750145</a></p><ol><li>客户端访问受保护的资源的时候<br> 1.1 判断session中是否有LoginUser<br> 1.2 判断请求路径中是否有访问令牌token<br> 1.3 如果上述都没有的情况，跳转到登录服务器SSOServer+redirectUrl地址（带上当前网址，为了后面登录后跳转）<pre class=" language-java"><code class="language-java"> <span class="token keyword">return</span> <span class="token string">"redirect:"</span><span class="token operator">+</span>ssoServer<span class="token operator">+</span><span class="token string">"?redirect_url=http://client2.com:8082/employees"</span><span class="token punctuation">;</span></code></pre></li><li>SsoServer登录服务器<br> 2.1 首先判断cookie中是否有登录记录，如果cookie中有记录取出cookie对应的token值，<pre><code> 带上访问令牌重定向到redirect_url=http://client2.com:8082/employees";</code></pre> 2.2 没有cookie则跳转到login.html登录页面输入登录信息<br> 2.3 登录页面发送表单post请求登录，验证登录信息成功后<pre><code> 2.3.1 传一个UUID作为key，value作为userID 将该键值对放入认证服务器的Cookie中在认证系统中记录登录标记   </code></pre><pre class=" language-java"><code class="language-java"> Cookie sso_token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"sso_token"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> ​    2.3.2 重定向到回调地址+访问令牌<pre class=" language-java"><code class="language-java"> <span class="token keyword">return</span> <span class="token string">"redirect:"</span><span class="token operator">+</span>url<span class="token operator">+</span><span class="token string">"?token="</span><span class="token operator">+</span>token<span class="token punctuation">;</span>        </code></pre></li></ol><p>==关键：给认证服务器留下痕迹==</p><h1><span id="threadlocal">ThreadLocal</span></h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>UserInfoTo<span class="token operator">></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>UserInfoTo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>cart服务用到：</p><p>加入了拦截器，每一个请求过来先经过拦截器，然后放入一个ThreadLocal线程，里面放入一些数据</p><pre class=" language-java"><code class="language-java">UserInfoTo userInfoTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfoTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userInfoTo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>之后这个请求是哪个处理器处理，就可以获取到这些数据，实现数据共享==(仅这条线程可以获取)==</p><pre class=" language-java"><code class="language-java">UserInfoTo userInfoTo <span class="token operator">=</span> CartInterceptor<span class="token punctuation">.</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1><span id="消息中间件">消息中间件</span></h1><ol><li>大多应用中，可通过消息服务中间件来提升系统==异步通信、扩展解耦==能力 </li><li>消息服务中两个重要概念： 消息代理（message broker）和目的地（destination） 当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。 </li><li>消息队列主要有两种形式的目的地 <ol><li>队列（queue）：点对点消息通信（point-to-point）【4】</li><li> 主题（topic）：发布（publish）/订阅（subscribe）消息通信 【5】</li></ol></li><li>点对点式： <ul><li>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列</li><li>消息只有唯一的发送者和接受者，但并不是说只能有一个接收者</li></ul></li><li>发布订阅式：<ul><li>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么就会在消息到达时同时收到消息</li></ul></li><li>JMS（Java Message Service）JAVA消息服务：<ul><li>基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS实现</li></ul></li><li>AMQP（Advanced Message Queuing Protocol）<ul><li>高级消息队列协议，也是一个消息代理的规范，兼容JMS</li><li>RabbitMQ是AMQP的实现</li></ul></li><li>Spring支持 <ul><li>spring-jms提供了对JMS的支持</li><li>spring-rabbit提供了对AMQP的支持</li><li>需要ConnectionFactory的实现来连接消息代理</li><li>提供JmsTemplate、RabbitTemplate来发送消息 </li><li>@JmsListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息<strong>代理发布的消息</strong></li><li>@EnableJms、@EnableRabbit开启支持</li></ul></li><li>Spring Boot自动配置 <ul><li><strong>JmsAutoConfiguration</strong> </li><li><strong>RabbitAutoConfiguration</strong></li></ul></li><li>市面的MQ产品<ul><li>ActiveMQ、RabbitMQ、RocketMQ、Kafka</li></ul></li></ol><h2><span id="jms与amqp">JMS与AMQP</span></h2><p><img src="/2022/01/10/gulimall-bi-ji/image-20211229193030127.png" alt="image-20211229193030127"></p><h2><span id="rabbitmq概念">RabbitMQ概念</span></h2><p><strong>RabbitMQ</strong>简介：</p><p>RabbitMQ是一个由erlang开发的AMQP(Advanved Message Queue Protocol)的开源实现。 </p><p><strong>核心概念</strong> </p><p><strong>Message</strong> </p><p>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成， </p><p>这些属性包括<strong>routing-key</strong>（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可 能需要持久性存储）等。 </p><p><strong>Publisher</strong> </p><p>消息的生产者，也是一个向交换器发布消息的客户端应用程序。 </p><p><strong>Exchange</strong> </p><p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。 </p><p>Exchange有4种类型：direct(默认)，fanout, topic, 和headers，不同类型的Exchange转发消息的策略有所区别</p><p><strong>Queue</strong> </p><p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。 </p><p><strong>Binding</strong> </p><p>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交 换器理解成一个由绑定构成的路由表。 Exchange 和Queue的绑定可以是多对多的关系。 </p><p><strong>Connection</strong> </p><p>网络连接，比如一个TCP连接。 </p><p><strong>Channel</strong> </p><p>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP 命令都是通过信道 发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都 是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</p><p><strong>Consumer</strong> </p><p>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。 </p><p><strong>Virtual Host</strong> </p><p>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加 </p><p>密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥 </p><p>有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时 </p><p>指定，RabbitMQ 默认的 vhost 是 / 。 </p><p><strong>Broker</strong> </p><p>表示消息队列服务器实体</p><h2><span id="图解">图解*</span></h2><p><img src="/2022/01/10/gulimall-bi-ji/image-20211229203021998.png" alt="image-20211229203021998"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230102538414.png" alt="image-20211230102538414"></p><h2><span id="安装rabbitmq">安装RabbitMQ</span></h2><pre class=" language-bash"><code class="language-bash">docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:managementdocker update rabbitmq --restart<span class="token operator">=</span>always </code></pre><p>4369, 25672 (Erlang发现&amp;集群端口) </p><p>5672, 5671 (AMQP端口) </p><p>15672 (web管理后台端口) </p><p><a href="http://192.168.67.217:15672/">http://192.168.67.217:15672/</a></p><p>账号：guest  密码：guest</p><p>61613, 61614 (STOMP协议端口) </p><p>1883, 8883 (MQTT协议端口) </p><p><a href="https://www.rabbitmq.com/networking.html">https://www.rabbitmq.com/networking.html</a></p><h2><span id="rabbitmq运行机制">RabbitMQ运行机制</span></h2><p>AMQP 中消息的路由过程和 Java 开发者熟悉的 JMS 存在一些差别， AMQP 中增加了 <strong>Exchange</strong> 和<strong>Binding</strong> 的角色。生产者把消息发布 到 Exchange 上，消息最终到达队列 并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230102556932.png" alt="image-20211230102556932"></p><h2><span id="交换机类型">交换机类型</span></h2><p><strong>Exchange</strong>分发消息时根据类型的不同分发策略有区别，目前共四种类型：<strong>direct</strong>、 <strong>fanout</strong>、<strong>topic</strong>、<strong>headers</strong> 。headers 匹配 AMQP 消息的 header 而不是路由键， headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接 看另外三种类型：</p><blockquote><p><strong>点对点</strong></p></blockquote><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230103737114.png" alt="image-20211230103737114"></p><blockquote><p><strong>广播</strong></p></blockquote><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230103746996.png" alt="image-20211230103746996"></p><blockquote><p><strong>主题</strong>(发布订阅)</p></blockquote><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230103942776.png" alt="image-20211230103942776"></p><h2><span id="测试">测试</span></h2><ol><li><p>创建交换机(学会创建，一会删除)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230104850416.png" alt="image-20211230104850416"></p></li><li><p>创建队列(一会测试需要)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230110459661.png" alt="image-20211230110459661"></p><p>再次创建多个队列</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230111847002.png" alt="image-20211230111847002"></p></li><li><p>绑定队列(学会绑定)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230110826071.png" alt="image-20211230110826071"></p></li></ol><h3><span id="点对点">点对点</span></h3><ol><li><p>添加交换机</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112212685.png" alt="image-20211230112212685"></p></li><li><p>绑定队列(上边创建的四个)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112438859.png" alt="image-20211230112438859"></p></li><li><p>发消息(在交换机下)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112642515.png" alt="image-20211230112642515"></p><p>队列</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112708761.png" alt="image-20211230112708761"></p></li><li><p>获取消息</p><p>进入队列，获取消息(消息还在)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112849235.png" alt="image-20211230112849235"></p><p>再次获取(队列中删除消息)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230113020273.png" alt="image-20211230113020273"></p><p>==关键：交换机(direct)发消息指定路由键==</p></li></ol><h3><span id="广播">广播</span></h3><ol><li><p>创建交换机</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230114950610.png" alt="image-20211230114950610"></p></li><li><p>绑定队列</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230115118335.png" alt="image-20211230115118335"></p></li><li><p>发消息</p></li><li><p>查看</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230115935711.png" alt="image-20211230115935711"></p><p>与交换机绑定的队列全都接收到了消息</p><p>==关键：与交换机(fanout)绑定==</p></li></ol><h3><span id="主题">主题</span></h3><ol><li><p>创建交换机</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145410988.png" alt="image-20211230145410988"></p></li><li><p>添加队列(指定路由键)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145645244.png" alt="image-20211230145645244"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145656331.png" alt="image-20211230145656331"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145707967-16408474292471.png" alt="image-20211230145707967"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145714636.png" alt="image-20211230145714636"></p><p>总览</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145750146.png" alt="image-20211230145750146"></p></li><li><p>发消息</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230150004276.png" alt="image-20211230150004276"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230150011732.png" alt="image-20211230150011732"></p><p>全部都接收到了消息(都匹配到了这个消息的路由键)</p><p>再次发送消息</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230150158980.png" alt="image-20211230150158980"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230150148306.png" alt="image-20211230150148306"></p><p>只有lpc.news接受到了消息(.news匹配到了这个消息的路由键)</p><p>==关键：模糊匹配==</p></li></ol><h2><span id="rabbitmq消息确认机制-可靠抵达">RabbitMQ消息确认机制-可靠抵达</span></h2><p>保证消息不丢失，可靠抵达，可以使用事务消息，性能下降250倍，为此引入确认机制 </p><p>• <strong>publisher</strong> confirmCallback 确认模式 </p><p>• <strong>publisher</strong> returnCallback 未投递到 queue 退回模式 </p><p>• <strong>consumer</strong> ack机制 </p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230194121178.png" alt="image-20211230194121178"></p><blockquote><p>可靠抵达-ConfirmCallback</p></blockquote><p>==spring.rabbitmq.publisher-confirms=true==</p><ul><li>在创建 connectionFactory 的时候设置 PublisherConfirms(true) 选项，开启 confirmcallback。 </li><li>CorrelationData：用来表示当前消息唯一性。 </li><li>消息只要被 broker 接收到就会执行 confirmCallback，如果是 cluster 模式，需要所有 broker 接收到才会调用 confirmCallback。 </li><li>被 broker 接收到只能表示 message 已经到达服务器，并不能保证消息一定会被投递 到目标 queue 里。所以需要用到接下来的 returnCallback 。</li></ul><pre class=" language-JAVA"><code class="language-JAVA">/* 定制RabbitTemplate  * 1、服务器收到消息就回调  *     1、spring.rabbitmq.publisher-confirms=true  *     2、设置确认回调ConfirmCallback  * */  @PostConstruct//MyRabbitConfig对象创建以后执行这个方法  public void initRabbitTemplate(){    // 设置确认回调    rabbitTemplate.setConfirmCallback(        new RabbitTemplate.ConfirmCallback() {          /**           * 1、只要消息抵达Broker就b=true           *           * @param correlationData 当前消息的唯一关联数据(唯一id) 发送消息端携带           * @param b 消息是否成功收到           * @param s 失败原因           */          @Override          public void confirm(CorrelationData correlationData, boolean b, String s) {            System.out.println("correlationData"+s+",b"+b+",s"+s);          }        });  }</code></pre><blockquote><p>可靠抵达-ReturnCallback</p></blockquote><p>==spring.rabbitmq.publisher-returns=true==</p><p>==spring.rabbitmq.template.mandatory=true==</p><ul><li>confrim 模式只能保证消息到达 broker，不能保证消息准确投递到目标 queue 里。在有些业务场景下，我们需要保证消息一定要投递到目标 queue 里，此时就需要用到 return 退回模式。 </li><li>这样如果未能投递到目标 queue 里将调用 returnCallback ，可以记录下详细到投递数据，定期的巡检或者自动纠错都需要这些数据</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 定制RabbitTemplate * 1、服务器收到消息就回调 *     1、spring.rabbitmq.publisher-confirms=true *     2、设置确认回调回调ConfirmCallback * 2、消息正确抵达队列进行回调 *     1、spring.rabbitmq.publisher-returns=true *     2、spring.rabbitmq.template.mandatory=true *     3、设置确认回调ReturnCallback * */</span><span class="token annotation punctuation">@PostConstruct</span> <span class="token comment" spellcheck="true">// MyRabbitConfig对象创建以后执行这个方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initRabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 设置确认回调</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 1、只要消息抵达Broker就b=true         *         * @param correlationData 当前消息的唯一关联数据(唯一id) 发送消息端携带         * @param b 消息是否成功收到         * @param s 失败原因         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"correlationData"</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">",b"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">",s"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置消息抵达队列的确认回调</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 只要消息没有成功抵达消息队列，触发失败回调         * @param message 投递失败的消息的详细信息         * @param i 回复的状态码         * @param s 回复的文本内容         * @param s1 当时这个消息是哪个交换机发的         * @param s2 当时这个消息用的那个路由键         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> String s<span class="token punctuation">,</span> String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fail Message["</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">"]"</span><span class="token operator">+</span><span class="token string">"状态码"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"文本"</span><span class="token operator">+</span><span class="token string">"s"</span><span class="token operator">+</span><span class="token string">"exchange"</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"路由键"</span><span class="token operator">+</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>可靠抵达-Ack消息确认机制</p></blockquote><ul><li>消费者获取到消息，成功处理，可以回复Ack给Broker <ul><li>basic.ack用于肯定确认；broker将移除此消息</li><li>basic.nack用于否定确认；可以指定broker是否丢弃此消息，可以批量</li><li>basic.reject用于否定确认；同上，但不能批量</li></ul></li><li>默认自动ack，消息被消费者收到，就会从broker的queue中移除 </li><li>queue无消费者，消息依然会被存储，直到消费者消费 </li><li>消费者收到消息，默认会自动ack。但是如果无法确定此消息是否被处理完成,或者成功处理。我们可以开启手动ack模式 <ul><li>消息处理成功，ack()，接受下一个消息，此消息broker就会移除</li><li>消息处理失败，nack()/reject()，重新发送给其他人进行处理，或者容错处理后ack</li><li>消息一直没有调用ack/nack方法，broker认为此消息正在被处理，不会投递给别人，此时客户端断开，消息不会被broker移除，会投递给别人</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> <span class="token number">3</span>、消费端确认（保证每一条消息被正确消费<span class="token punctuation">,</span>此时才可以broker删除这个消息）<span class="token operator">*</span>      spring<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>acknowledge<span class="token operator">-</span>mode<span class="token operator">=</span>manual<span class="token operator">*</span>     <span class="token number">1</span>、默认是自动确认的，只要接受到消息，客户端会自动确认，服务端就会删除这条消息<span class="token operator">*</span>        问题：<span class="token operator">*</span>           我们收到很多消息，自动回复给服务器，只有一个消息处理，然后宕机，发现消息丢失<span class="token operator">*</span>           手动确认：只要没有确认 ，消息就还在<span class="token operator">*</span>     <span class="token number">2</span>、如何签收<span class="token operator">*</span>          签收消息 channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>          拒签消息 channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>配置</p><p>#手动ack消息<br>==spring.rabbitmq.listener.simple.acknowledge-mode=manual==</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//chanel内按顺序自增</span><span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//签收消息 false非批量 true批量</span>   channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//拒签消息 第二个参数是否批量 第三个参数是否从新放回队列</span>   <span class="token comment" spellcheck="true">//channel.basicNack(deliveryTag,false,true);</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2><span id="延时队列">延时队列</span></h2><p>使用场景</p><p>比如未付款订单，超过一定时间后，系统自动取消订单并释放占有物品。</p><p><strong>常用解决方案：</strong> </p><p>spring的 schedule 定时任务轮询数据库 </p><p><strong>缺点：</strong> </p><p>消耗系统内存、增加了数据库的压力、存在较大的时间误差 </p><p><strong>解决：</strong>rabbitmq的消息TTL和死信Exchange结合</p><blockquote><p>消息的TTL（Time To Live）</p></blockquote><ul><li>消息的TTL就是消息的存活时间。</li><li>RabbitMQ可以对队列和消息分别设置TTL。<ul><li>对队列设置就是队列没有消费者连着的保留时间，也可以对每一个单独的消息做单独的设置。超过了这个时间，我们认为这个消息就死了，称之为死信。</li><li>如果队列设置了，消息也设置了，那么会取小的。所以一个消息如果被路由到不同的队列中，这个消息死亡的时间有可能不一样（不同的队列设置）。这里单讲单个消息的TTL，因为它才是实现延迟任务的关键。可以通过设置消息的expiration字段或者x-message-ttl属性来设置时间，两者是一样的效果。</li></ul></li></ul><blockquote><p>Dead Letter Exchanges（DLX） </p></blockquote><ul><li>一个消息在满足如下条件下，会进死信路由，记住这里是路由而不是队列，一个路由可以对应很多队列。（什么是死信） <ul><li>一个消息被Consumer拒收了，并且reject方法的参数里requeue是false。也就是说不会被再次放在队列里，被其他消费者使用。（basic.reject/ basic.nack）requeue=false</li><li>上面的消息的TTL到了，消息过期了。</li><li>队列的长度限制满了。排在前面的消息会被丢弃或者扔到死信路由上 </li></ul></li><li>Dead Letter Exchange其实就是一种普通的exchange，和创建其他exchange没有两样。只是在某一个设置Dead Letter Exchange的队列中有消息过期了，会自动触发消息的转发，发送到Dead Letter Exchange中去。</li><li>我们既可以控制消息在一段时间后变成死信，又可以控制变成死信的消息被路由到某一个指定的交换机，结合二者，其实就可以实现一个延时队列</li><li>手动ack&amp;异常消息统一放在一个队列处理建议的两种方式<ul><li>catch异常后，<strong>手动发送到指定队列</strong>，然后使用channel给rabbitmq确认消息已消费</li><li>给Queue绑定死信队列，使用nack（requque为false）确认消息消费失败</li></ul></li></ul><h1><span id="简单整合rabbitmq测试">简单整合RabbitMQ测试</span></h1><ol><li><strong>引入</strong> spring-boot-starter-amqp</li><li><strong>application.yml</strong>配置</li><li><strong>测试RabbitMQ</strong><ol><li><strong>AmqpAdmin</strong>：管理组件</li><li><strong>RabbitTemplate</strong>：消息发送处理组件</li><li>@RabbitListener 监听消息的方法可以有三种参数（不分数量，顺序） 类+方法上</li><li>@RabbieHandler 方法上 (结合@RabbitListener使用，重载区分不同的消息)</li></ol></li></ol><blockquote><p>order服务</p></blockquote><ol><li><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.67.217</span><span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span><span class="token attr-name">spring.rabbitmq.virtual-host</span><span class="token punctuation">=</span><span class="token attr-value">/</span></code></pre></li><li><p>开启功能<code>@EnableRabbit</code></p></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>order<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>AmqpAdmin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallOrderApplicationTests</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 1、如何创建Exchange、Queue、Binding   *     1)、使用AmqpAdmin进项创建   * 2、如何发消息   * */</span>  <span class="token annotation punctuation">@Autowired</span> AmqpAdmin amqpAdmin<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建交换机对象</span>    <span class="token comment" spellcheck="true">// DirectExchange(String name, boolean durable, boolean autoDelete, Map&lt;String, Object></span>    <span class="token comment" spellcheck="true">// arguments)</span>    DirectExchange directExchange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    amqpAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Exchange[{}]创建成功"</span><span class="token punctuation">,</span> <span class="token string">"hello-java-exchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建队列</span>    <span class="token comment" spellcheck="true">// Queue(String name, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String,</span>    <span class="token comment" spellcheck="true">// Object> arguments)</span>    Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"hello-java-queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    amqpAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Queue[{}]创建成功"</span><span class="token punctuation">,</span> <span class="token string">"hello-java-queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token comment" spellcheck="true">//绑定</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    destination 目的地</span>    <span class="token comment" spellcheck="true">//    DestinationType目的地类型</span>    <span class="token comment" spellcheck="true">//    exchange交换机</span>    <span class="token comment" spellcheck="true">//    routingKey 路由键</span>    <span class="token comment" spellcheck="true">// Binding(String destination, Binding.DestinationType destinationType, String exchange, String</span>    <span class="token comment" spellcheck="true">// routingKey, Map&lt;String, Object> arguments)</span>    <span class="token comment" spellcheck="true">//将exchange指定的交换机和指定的目的地绑定，使用路由键</span>    Binding binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"hello-java-queue"</span><span class="token punctuation">,</span>            Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span><span class="token string">"hello-java"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    amqpAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Binding[{}]创建成功"</span><span class="token punctuation">,</span> <span class="token string">"hello-java-binding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用消息转换器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>Jackson2JsonMessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>MessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 30/12/2021 下午 6:33 *@describe: *@vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRabbitConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> MessageConverter <span class="token function">messageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发消息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1、发送消息</span>  OrderReturnReasonEntity entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderReturnReasonEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  entity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>  entity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  entity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"呵呵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span><span class="token string">"hello-java"</span><span class="token punctuation">,</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息发送完成{}"</span><span class="token punctuation">,</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接收消息</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// queues监听的所有队列</span><span class="token comment" spellcheck="true">// 类型org.springframework.amqp.core.Message</span><span class="token comment" spellcheck="true">//  参数可以写一下类型</span><span class="token comment" spellcheck="true">//  1、Message message，原生消息详细信息  头+体</span><span class="token comment" spellcheck="true">//  2、T&lt;发送的消息类型>  用什么类型发，用什么类型收</span><span class="token comment" spellcheck="true">//  3、Channel channel 当前传输数据的通道</span><span class="token comment" spellcheck="true">//  Queue：可以有很多人来监听，但只有一个能接收到消息</span><span class="token comment" spellcheck="true">// 场景：</span><span class="token comment" spellcheck="true">//     1)、订单服务有多个  同一个消息，只有一个人能接收到</span><span class="token comment" spellcheck="true">//     2)、只有一个消息处理完，才能继续接受下一个消息</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello-java-queue"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recieveMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> OrderReturnReasonEntity content<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// "id":1,"name":"呵呵","sort":null,"status":null,"createTime":1640861388816}</span>   <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 消息头属性信息</span>   MessageProperties properties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受到的消息："</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"内容=>"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//chanel内按顺序自增</span>   <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//签收消息 false非批量 true批量</span>      channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//拒签消息 第三个参数是否从新放回队列</span>      <span class="token comment" spellcheck="true">//channel.basicNack(deliveryTag,false,true);</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h1><span id="feigen失去请求头问题">Feigen失去请求头问题</span></h1><p>浏览器和Feign发请求有区别</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220101145913579.png" alt="image-20220101145913579"></p><p>解决(feign在执行远程调用前，会构造请求，期间会调用一些拦截器来增强这个请求(默认没有))</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220101150326845.png" alt="image-20220101150326845"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"requestInterceptor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> RequestInterceptor <span class="token function">requestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>RequestTemplate requestTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1、RequestContextHolder拿到刚进来的请求</span>      ServletRequestAttributes attributes <span class="token operator">=</span>          <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      HttpServletRequest request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 2、同步请求头  Cookie</span>      String cookie <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>异步出现问题</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220101155955059.png" alt="image-20220101155955059"></p><p>解决方法：异步执行之前放入数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取这个线程的请求数据</span>RequestAttributes requestAttributes <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> getAddressFuture <span class="token operator">=</span>   CompletableFuture<span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span>   <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//执行远程之前把请求数据放入这个异步y</span>      RequestContextHolder<span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>MemberAddressVo<span class="token operator">></span> address <span class="token operator">=</span> memberFeignService<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span>memberRespVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      confirmVo<span class="token punctuation">.</span><span class="token function">setMemberAddressVos</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   executor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1><span id="接口幂等性问题解决方案">接口幂等性问题解决方案</span></h1><ol><li>token机制</li><li>各种锁机制</li><li>各种唯一约束</li><li>防重表</li><li>全局请求唯一id</li></ol><h2><span id="锁定库存逻辑">锁定库存逻辑</span></h2><p><img src="/2022/01/10/gulimall-bi-ji/image-20220103132327092.png" alt="image-20220103132327092"></p><h1><span id="分布式事务">分布式事务</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20220103150151689.png" alt="image-20220103150151689"></p><h2><span id="本地事务失效问题">本地事务失效问题：</span></h2><p>同一个对象内事务方法互调默认失效，原因，绕过了代理对象</p><p>事务使用代理对象来控制</p><p>解决：使用代理对象来调用事务方法</p><ol><li><p>引入aop-starter,他里边引入了aspectj</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>启动类加入注解<code>@EnableAspectJAutoProxy</code>,开启aspectj动态代理功能，以后所有的动态代理都是aspectj创建的，好处没有接口也可以创建动态代理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>exposeProxy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//exposeProxy堆外暴露代理对象</span></code></pre></li><li><p>本类互调用代理对象</p><pre class=" language-JAVA"><code class="language-JAVA">//获取当前类代理对象OrderServiceImpl orderService = (OrderServiceImpl) AopContext.currentProxy();//转为当前类对象//调用本类方法(a方法里的事务也生效了)orderService.a();</code></pre></li></ol><h2><span id="cap-定理与-base-理论"><strong>CAP</strong> <strong>定理与</strong> <strong>BASE</strong> <strong>理论</strong></span></h2><ol><li><p><strong>CAP</strong> <strong>定理</strong> </p><p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中</p><ul><li>一致性（Consistency）：<ul><li>在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本） </li></ul></li><li>可用性（Availability）<ul><li>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据 更新具备高可用性）</li></ul></li><li>分区容错性（Partition tolerance） <ul><li>大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。 分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务器放在美国，这就是两个区，它们之间可能无法通信。 </li></ul></li></ul><p>CAP 原则指的是，这三个要素最多只能同时实现两点，<strong>不可能三者兼顾</strong>。</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220103182053917.png" alt="image-20220103182053917"></p><p>一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，剩下的 C 和 A 无法同时做到。 </p><p>分布式系统中实现一致性的 raft 算法、paxos </p></li><li><p><strong>面临的问题</strong></p><p>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到 99.99999%（N 个 9）即保证 P 和 A，舍弃 C。</p></li><li><p><strong>BASE</strong> <strong>理论</strong> </p><p>是对 CAP 理论的延伸，思想是即使无法做到强一致性（CAP 的一致性就是强一致性），但可以采用适当的采取弱一致性，即<strong>最终一致性</strong>。</p><p>BASE 是指 ：</p><ul><li>基本可用（Basically Available）<ul><li>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性（例如响应时间、功能上的可用性），允许损失部分可用性。需要注意的是，基本可用绝不等价于系统不可用。<ul><li>响应时间上的损失：正常情况下搜索引擎需要在 0.5 秒之内返回给用户相应的查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了 1~2 秒。</li><li>功能上的损失：购物网站在购物高峰（如双十一）时，为了保护系统的稳定性，部分消费者可能会被引导到一个降级页面。 </li></ul></li></ul></li><li>软状态（ Soft State） <ul><li>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据会有多个副本，允许不同副本同步的延时就是软状态的体现。mysql replication 的异步复制也是一种体现。</li></ul></li><li>最终一致性（ Eventual Consistency）<ul><li>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</li></ul></li></ul></li><li><p><strong>强一致性、弱一致性、最终一致性</strong></p><p>从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是<strong>强一致性</strong>。如果能容忍后续的部分或者全部访问不到，则是<strong>弱一致性</strong>。如果经过一段时间后要求能访问到更新后的数据，则是<strong>最终一致性</strong></p></li></ol><h2><span id="分布式事务几种方案"><strong>分布式事务几种方案</strong></span></h2><ol><li><strong>2PC</strong> <strong>模式</strong> </li><li><strong>柔性事务-TCC事务补偿型方案</strong> </li><li><strong>柔性事务-最大努力通知型方案</strong></li><li><strong>柔性事务-可靠消息+最终一致性方案（异步确保型）</strong></li></ol><h2><span id="使用seata解决分布式事务">使用SEATA解决分布式事务</span></h2><p><a href="https://seata.io/zh-cn/docs/user/quickstart.html">https://seata.io/zh-cn/docs/user/quickstart.html</a></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220104103334489.png" alt="image-20220104103334489"></p><p>准备前提：所有微服务的数据库加入<code>undo_log</code>表</p><p>安装事务协调器<code>seata-server</code>:<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><ol><li><p>导入依赖  seata-all:0.7.1</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--seata--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>解压启动seata-server</p><p>  registry.conf：注册中心配置,修改type = “nacos”</p></li><li><p>所有用到分布式事务的微服务使用seata DataSourceProxy代理数据源(0.9以后默认，不用配置了)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>DataSourceProxy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 4/1/2022 上午 11:50 * @describe: * @vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySeataConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span> DataSourceProperties dataSourceProperties<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span>DataSourceProperties dataSourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HikariDataSource hikariDataSource <span class="token operator">=</span>        dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>HikariDataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>dataSourceProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      hikariDataSource<span class="token punctuation">.</span><span class="token function">setPoolName</span><span class="token punctuation">(</span>dataSourceProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>hikariDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>每个微服务,都必须导入 <code>registry.conf </code>和  <code>file.conf</code>，file.conf里边的名字必须个当前应用名一致</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">vgroup_mapping.gulimall-order-fescar-service-group</span> <span class="token punctuation">=</span> <span class="token attr-value">"default"</span></code></pre><p><img src="/2022/01/10/gulimall-bi-ji/image-20220104120702681.png" alt="image-20220104120702681"></p><p>不想改名字的话，有一个配置，也可以</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.alibaba.seata.tx-service-group</span><span class="token punctuation">=</span><span class="token attr-value">gulimall-order-fescar-service-group</span></code></pre></li><li><p>启动测试</p></li><li><p>给分布式大事务的入口标注@GlobalTransactional</p></li><li><p>每个远程的小事务@Transactional</p></li></ol><h2><span id="使用延时队列解决分布式事务">使用延时队列解决分布式事务</span></h2><p><img src="/2022/01/10/gulimall-bi-ji/image-20220104190808406.png" alt="image-20220104190808406"></p><p>订单服务</p><p>创建模型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Exchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>TopicExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 4/1/2022 下午 7:09 * @describe: * @vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMqConfig</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//监听过期队列</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"order.release.order. queue"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span>OrderEntity entity<span class="token punctuation">,</span> Channel channel<span class="token punctuation">,</span> Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到过期的订单信息，准备关闭订单"</span><span class="token operator">+</span>entity<span class="token punctuation">.</span><span class="token function">getOrderSn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 这些组件都会自动创建(RabbitMQ中没有)</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Queue <span class="token function">orderDelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// String name, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object></span>      <span class="token comment" spellcheck="true">// arguments</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*    x-dead-letter-exchange: order-event-exchange    x-dead-letter-routing-key: order.release.order    x-message-ttl: 60000     */</span>      arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> <span class="token string">"order-event-exchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> <span class="token string">"order.release.order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"order.delay.queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> queue<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Queue <span class="token function">orderReleaseOrderQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"order.release.order. queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> queue<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Exchange <span class="token function">orderEventExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// String name, boolean durable, boolean autoDelete, Map&lt;String, Object> arguments</span>      TopicExchange topicExchange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"order-event-exchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> topicExchange<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Binding <span class="token function">orderCreateOrderBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// String destination, Binding.DestinationType destinationType, String exchange, String</span>      <span class="token comment" spellcheck="true">// routingKey, Map&lt;String, Object> arguments</span>      Binding binding <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>         <span class="token string">"order.delay.queue"</span><span class="token punctuation">,</span>         Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>         <span class="token string">"order-event-exchange"</span><span class="token punctuation">,</span>         <span class="token string">"order.create.order"</span><span class="token punctuation">,</span>         null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> binding<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Binding <span class="token function">orderReleaseOrderBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Binding binding <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>         <span class="token string">"order.release.order. queue"</span><span class="token punctuation">,</span>         Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>         <span class="token string">"order-event-exchange"</span><span class="token punctuation">,</span>         <span class="token string">"order.release.order"</span><span class="token punctuation">,</span>         null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> binding<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>库存服务</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105104619442.png" alt="image-20220105104619442"></p><p>具体在代码里</p><h3><span id="保证消息可靠性">保证消息可靠性</span></h3><blockquote><p>如何保证消息可靠性-==消息丢失==</p></blockquote><ol><li>消息丢失<ul><li>消息发送出去，由于网络问题没有抵达服务器 <ul><li>做好容错方法（try-catch），发送消息可能会网络失败，失败后要有重试机制，可记录到数据库，采用定期扫描重发的方式</li><li>做好日志记录，每个消息状态是否都被服务器收到都应该记录 </li><li>做好定期重发，如果消息没有发送成功，定期去数据库扫描未成功的消息进行重发 </li></ul></li><li>• 消息抵达Broker，Broker要将消息写入磁盘（持久化）才算成功。此时Broker尚未持久化完成，宕机。<ul><li>publisher也必须加入确认回调机制，确认成功的消息，修改数据库消息状态。</li></ul></li><li>自动ACK的状态下。消费者收到消息，但没来得及消息然后宕机 <ul><li>一定开启手动ACK，消费成功才移除，失败或者没来得及处理就noAck并重新入队</li></ul></li></ul></li></ol><blockquote><p>如何保证消息可靠性-==消息重复==</p></blockquote><ol><li>消息重复<ul><li>消息消费成功，事务已经提交，ack时，机器宕机。导致没有ack成功，Broker的消息重新由unack变为ready，并发送给其他消费者 </li><li>消息消费失败，由于重试机制，自动又将消息发送出去</li><li>成功消费，ack时宕机，消息由unack变为ready，Broker又重新发送<ul><li>消费者的业务消费接口应该设计为<strong>幂等性</strong>的。比如扣库存有工作单的状态标志</li><li>使用<strong>防重表</strong>（redis/mysql），发送消息每一个都有业务的唯一标识，处理过就不用处理 </li><li>rabbitMQ的每一个消息都有redelivered字段，可以获取<strong>是否是被重新投递过来的</strong>，而不是第一次投递过来的</li></ul></li></ul></li></ol><blockquote><p>如何保证消息可靠性-==消息积压==</p></blockquote><ol><li>消息积压<ul><li>消费者宕机积压 </li><li>消费者消费能力不足积压</li><li>发送者发送流量太大<ul><li>上线更多的消费者，进行正常消费 </li><li>上线专门的队列消费服务，将消息先批量取出来，记录数据库，离线慢慢处理</li></ul></li></ul></li></ol><h1><span id="内网穿透">内网穿透</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105211855363.png" alt="image-20220105211855363"></p><hr><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105211906799.png" alt="image-20220105211906799"></p><hr><p><a href="https://i.xiaomy.net/#/">https://i.xiaomy.net/#/</a></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105211927855.png" alt="image-20220105211927855"></p><hr><p>==nginx必须配置==</p><pre class=" language-bash"><code class="language-bash">listen       80<span class="token punctuation">;</span>server_name gulimall.com  *.gulimall.com  vywc7tu7.dongtaiyuming.net<span class="token punctuation">;</span>location /payed/ <span class="token punctuation">{</span>proxy_set_header Host order.gulimall.com<span class="token punctuation">;</span>proxy_pass http://gulimall<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/01/10/gulimall-bi-ji/image-20220106155949815.png" alt="image-20220106155949815"></p><h1><span id="定时任务和异步">定时任务和异步</span></h1><ol><li><p>@EnableScheduling开启定时任务功能</p><p>==自动配置类：TaskSchedulingAutoConfiguration==</p></li><li><p>@Scheduled开启定时任务</p><ul><li><p>spring中是由6位组成，没有第七位年</p></li><li><p>在周的位置，1-7分别是周一到周日</p></li><li><p>一般情况下，我们的定时任务不应该阻塞(默认是阻塞，会阻塞下一个定时任务,造成执行时间不一致)</p><ul><li>可以使用异步的方式，用自己的线程池</li></ul></li><li><p>支持定时任务线程池(默认里面只有一个连接，所以阻塞)，支持配置</p><ul><li><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.task.execution.pool.core-size</span><span class="token punctuation">=</span><span class="token attr-value">5</span></code></pre><p>不一定生效</p></li><li><p>让异步任务执行</p><p>@EnableAsync开启异步任务功能</p><p>==自动配置类：TaskExecutionAutoConfiguration==</p><p>里面默认大小是8个连接</p><p>@Async 这个方法是一个异步方法</p></li></ul></li></ul></li><li><p>解决：使用异步+定时任务来完成定时任务补阻塞功能</p></li></ol><h1><span id="分布式定时任务">分布式定时任务</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20220108165844144.png" alt="image-20220108165844144"></p><p>加入分布式锁</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220108165933306.png" alt="image-20220108165933306"></p><h1><span id="秒杀服务流量削峰">秒杀服务流量削峰</span></h1><p>使用redis和消息队列</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105104036300.png" alt="image-20220109151246747"></p><h1><span id="整合sentinel">整合Sentinel</span></h1><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></p><ol><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>下载sentinel控制台</p><p>启动</p><pre class=" language-bash"><code class="language-bash">java -jar sentinel-dashboard-1.6.3.jar --server.port<span class="token operator">=</span>8333</code></pre></li><li><p>加入配置，配置控制台地址信息</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.sentinel.transport.dashboard</span><span class="token punctuation">=</span><span class="token attr-value">localhost:8333</span><span class="token attr-name">spring.cloud.sentinel.transport.port</span><span class="token punctuation">=</span><span class="token attr-value">8719</span></code></pre></li><li><p>在控制台调整参数，【默认所有的流控设置默认保存在内存中，重启失效】</p></li></ol><h2><span id="流控限流">流控/限流</span></h2><h3><span id="信息审计模块endpoint">信息审计模块Endpoint</span></h3><p>每个微服务都导入</p><ol><li><p>导入依赖</p><pre class=" language-XML"><code class="language-XML"><dependency>   <groupid>org.springframework.boot</groupid>   <artifactid>spring-boot-starter-actuator</artifactid></dependency></code></pre></li><li><p>暴露endpoint 路径</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span></code></pre></li><li><p>自定义流控返回</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>seckill<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>callback<span class="token punctuation">.</span>UrlBlockHandler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>callback<span class="token punctuation">.</span>WebCallbackManager<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>BlockException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/1/2022 下午 12:39 * @describe: 阻塞返回 * @vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeckillSentinelConfig</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">SeckillSentinelConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      WebCallbackManager<span class="token punctuation">.</span><span class="token function">setUrlBlockHandler</span><span class="token punctuation">(</span>         <span class="token keyword">new</span> <span class="token class-name">UrlBlockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blocked</span><span class="token punctuation">(</span>               HttpServletRequest httpServletRequest<span class="token punctuation">,</span>               HttpServletResponse httpServletResponse<span class="token punctuation">,</span>               BlockException e<span class="token punctuation">)</span>               <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>               R r <span class="token operator">=</span>                  R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>                  BizCodeEnum<span class="token punctuation">.</span>TO_MANY_REQUEST<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BizCodeEnum<span class="token punctuation">.</span>TO_MANY_REQUEST<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               httpServletResponse<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               httpServletResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               httpServletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2><span id="熔断降级">熔断降级</span></h2><p>保护Feign的远程调用</p><h4><span id="调用方熔断">调用方熔断：</span></h4><ol><li><p>导入依赖<code>spring-cloud-starter-openfeign</code>，还有<code>spring-cloud-starter-alibaba-sentinel</code>,我们的服务都导入了</p></li><li><p>配置文件打开 Sentinel 对 Feign 的支持<code>feign.sentinel.enabled=true</code></p></li><li><p>改代码</p><p>远程【可能会出现错误的调用，假设远程服务宕机】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>feign<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>fallback<span class="token punctuation">.</span>SeckillFeignServiceFallBcak<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 9/1/2022 上午 11:33 * @describe: * @vision */</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"gulimall-seckill"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> SeckillFeignServiceFallBcak<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SeckillFeignService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sku/seckill/{skuId}"</span><span class="token punctuation">)</span>  R <span class="token function">getSkuSeckillInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"skuId"</span><span class="token punctuation">)</span> Long skuId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>熔断【如果调用失败，就返回这个熔断方法】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>fallback<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>SeckillFeignService<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/1/2022 下午 1:38 * @describe: * @vision */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeckillFeignServiceFallBcak</span> <span class="token keyword">implements</span> <span class="token class-name">SeckillFeignService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> R <span class="token function">getSkuSeckillInfo</span><span class="token punctuation">(</span>Long skuId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"熔断方法调用。。。getSkuSeckillInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>TO_MANY_REQUEST<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BizCodeEnum<span class="token punctuation">.</span>TO_MANY_REQUEST<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h4><span id="调用方降级">调用方降级：</span></h4><p>手动加入降级策略：</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110135050091.png" alt="image-20220110135050091"></p><p>例：指定远程超过指定时间，就降级调用我自己的熔断</p><p>远程没有达到我的标准，我就降级，去执行我自己的策略</p><p>这些标准有RT、异常比例、异常数等</p><h4><span id="被调用方">被调用方：</span></h4><p>也可以指定流控和降级</p><p>使用场景：超大流量的时候，必须牺牲一些远程服务，就可以使用降级策略，远程过来的请求，我不执行业务，我直接降级返回我熔断的数据</p><p>全局考虑，一般不建议使用</p><h2><span id="自定义受保护的资源">自定义受保护的资源</span></h2><h3><span id="代码方式">代码方式:</span></h3><pre class=" language-JAVA"><code class="language-JAVA">try(Entry entry = SphU.entry("SeckillSkus")){   //业务...}catch(BlockException e){   log.info("资源被限流。。。");}</code></pre><p>控制台里会有SeckillSkus，我们可以对他进行限流和降级，如果不满足标准就会执行catch</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110142157595.png" alt="image-20220110142157595"></p><h3><span id="注解方式">注解方式</span></h3><p><code>@SentinelResource</code> 注解用来标识资源是否被限流、降级。</p><p><code>@SentinelResource</code> 还提供了其它额外的属性如 <code>blockHandler</code>，<code>blockHandlerClass</code>，<code>fallback</code> 用于表示限流或降级的操作（注意有方法签名要求），更多内容可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">Sentinel 注解支持文档</a>。</p><p>若不配置 <code>blockHandler</code>、<code>fallback</code> 等函数，则被流控降级时方法会直接抛出对应的 BlockException；若方法未定义 <code>throws BlockException</code> 则会被 JVM 包装一层 <code>UndeclaredThrowableException</code>。</p><blockquote><p>注：一般推荐将 <code>@SentinelResource</code> 注解加到服务实现上，而在 Web 层直接使用 Spring Cloud Alibaba 自带的 Web 埋点适配。Sentinel Web 适配同样支持配置自定义流控处理逻辑，参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6%E7%9A%84%E9%80%82%E9%85%8D#web-%E9%80%82%E9%85%8D">相关文档</a>。</p></blockquote><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>SeckillSkuRedisTo<span class="token operator">></span><span class="token function">blockHandler</span><span class="token punctuation">(</span>BlockException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"getCurrentSeckillSkusResource被限流了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"getCurrentSeckillSkusResource"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>SeckillSkuRedisTo<span class="token operator">></span> <span class="token function">getCurrentSeckillSkus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//业务</span><span class="token punctuation">}</span></code></pre><p>@SentinelResource标注这个保护的方法，如果没有达到一些标准(限流/降级策略)，就去执行blockHandler指定的熔断方法(这个方法参数和原方法参数一样，可以带一个默认的BlockException来获取异常原因)</p><p>blockHandler：针对于指定方法被降级的调用</p><p>fallback：抛出异常执行逻辑 </p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">注解支持</a></p><p>==无论是哪种方式，一定要配置被限流后的默认返回==</p><p>url请求可以设置统一返回 WebCallbackManager 上边限流有</p><h2><span id="网关流控">网关流控</span></h2><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81</a></p><ol><li><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-sentinel-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>启动网关</p></li><li><p>使用新版控制台可以感知到请求的路由</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110150204092.png" alt="image-20220110150204092"></p><p>可以做一些限制</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110150329150.png" alt="image-20220110150329150"></p></li></ol><h2><span id="网关流控返回">网关流控返回</span></h2><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.gulimall.gateway.config;import com.alibaba.csp.sentinel.adapter.gateway.sc.callback.BlockRequestHandler;import com.alibaba.csp.sentinel.adapter.gateway.sc.callback.GatewayCallbackManager;import com.alibaba.fastjson.JSON;import com.lpc.common.exception.BizCodeEnum;import com.lpc.common.utils.R;import org.springframework.context.annotation.Configuration;import org.springframework.web.reactive.function.server.ServerResponse;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;/** * @author: lpc * @date: 10/1/2022 下午 3:12 * @describe: * @vision */@Configurationpublic class SentinelGagewayConfig {   //TODO 响应式编程  public SentinelGagewayConfig() {    GatewayCallbackManager.setBlockHandler(        new BlockRequestHandler() {          // 网关限流了就调用此回调          @Override          public Mono<serverresponse> handleRequest(              ServerWebExchange serverWebExchange, Throwable throwable) {            R error =                R.error(                    BizCodeEnum.TO_MANY_REQUEST.getCode(), BizCodeEnum.TO_MANY_REQUEST.getMsg());            String string = JSON.toJSONString(error);            Mono<serverresponse> body = ServerResponse.ok().body(Mono.just(string), String.class);            return body;          }        });  }}</serverresponse></serverresponse></code></pre><h1><span id="sleuthzipkin服务链路追踪">Sleuth+Zipkin服务链路追踪</span></h1><h2><span id="整合sleuth">整合Sleuth</span></h2><ol><li><p>服务提供者与消费者导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--链路追踪--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-sleuth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>打开 debug 日志 </p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">logging.level.org.springframework.cloud.openfeign</span><span class="token punctuation">:</span> <span class="token attr-value">debug </span><span class="token attr-name">logging.level.org.springframework.cloud.sleuth</span><span class="token punctuation">:</span> <span class="token attr-value">debug</span></code></pre></li><li><p>发起一次远程调用，观察控制台 </p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110160510595.png" alt="image-20220110160510595"></p><p>DEBUG [user-service,541450f08573fff5,541450f08573fff5,false]</p><p>user-service：服务名 </p><p>541450f08573fff5：是 TranceId，一条链路中，只有一个 TranceId </p><p>541450f08573fff5：是 spanId，链路中的基本工作单元 id </p><p>false：表示是否将数据输出到其他服务，true 则会把信息输出到其他可视化的服务上观察</p></li></ol><h2><span id="整合zipkin可视化观察">整合zipkin可视化观察</span></h2><ol><li><p>docker 安装 zipkin 服务器</p><pre class=" language-bash"><code class="language-bash">docker run -d -p 9411:9411 openzipkin/zipkin</code></pre></li><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>zipkin 依赖也同时包含了 sleuth，可以省略 sleuth 的引用</p></li><li><p>添加 zipkin 相关配置 </p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110161758025.png" alt="image-20220110161758025"></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.zipkin.base-url</span><span class="token punctuation">=</span><span class="token attr-value">http://192.168.67.217:9411</span><span class="token attr-name">spring.zipkin.discovery-client-enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">spring.zipkin.sender.type</span><span class="token punctuation">=</span><span class="token attr-value">web</span><span class="token attr-name">spring.sleuth.sampler.probability</span><span class="token punctuation">=</span><span class="token attr-value">1</span></code></pre></li></ol><p><a href="http://192.168.67.217:9411/zipkin/">http://192.168.67.217:9411/zipkin/</a></p><h2><span id="追踪数据持久化">追踪数据持久化</span></h2><p><a href="https://github.com/openzipkin/zipkin#storage-component">https://github.com/openzipkin/zipkin#storage-component</a></p><p>通过 docker 的方式 </p><pre class=" language-bash"><code class="language-bash">docker run --env STORAGE_TYPE<span class="token operator">=</span>elasticsearch --env ES_HOSTS<span class="token operator">=</span>192.168.67.217:9200 openzipkin/zipkin-dependencies</code></pre><h1><span id="总结">总结</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110171227575.png" alt="image-20220110171227575"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2022/01/08/typora-jian-dan-shi-yong/"/>
      <url>/2022/01/08/typora-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1><span id="markdown学习">Markdown学习</span></h1><h2><span id="标题">标题</span></h2><h3><span id="三级标题">三级标题</span></h3><h4><span id="四级标题">四级标题</span></h4><p>使用快捷键：[ctrl+(0-6)]</p><h2><span id="字体">字体</span></h2><p><strong>ctrl+b粗体</strong></p><p><em>ctrl+i斜体</em></p><p><u>ctrl+u下划线</u></p><p><del>alt+shift+5删除线</del></p><h2><span id="引用">引用</span></h2><blockquote><p>学java,走上人生巅峰  </p></blockquote><p>【 &gt;+空格 或者 ctril+shift+q】</p><h2><span id="分割线">分割线</span></h2><hr><hr><p>【三个- 或者 三个*】</p><h2><span id="图片">图片</span></h2><pre class=" language-tex"><code class="language-tex">![](图片路径)或者ctrl+shift+i或者直接截图粘贴</code></pre><p><img src="https://img2.baidu.com/it/u=1110695959,2322594919&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg" alt="截图"></p><h2><span id="超链接">超链接</span></h2><p>【<a href></a> 或者 ctrl+k】</p><p><a href="https://www.bilibili.com/">点击跳转到b站</a></p><p>按ctrl打开</p><h2><span id="列表">列表</span></h2><p>【有序列表 ctrl+shift+[】</p><ol><li>A</li><li>B</li><li>C</li></ol><p>【无序列表 ctrl+shift+]】</p><ul><li>A</li><li>B</li><li>C</li></ul><h2><span id="表格">表格</span></h2><p>【ctrl+t】</p><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>1991.1.1</td></tr></tbody></table><h2><span id="代码">代码</span></h2><p>【ctrl+shift+k】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 文本工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
