<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目笔记</title>
      <link href="/2022/01/10/gulimall-bi-ji/"/>
      <url>/2022/01/10/gulimall-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1><span id="feign使用">Feign使用</span></h1><p>1、启动类加入注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.lpc.gulimall.member.feign"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开启feign远程客户端,指定远程调用方法包</span></code></pre><p>2、建包feign，加入方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"gulimall-coupon"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//掉远程服务器名或集群名</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CouponFeignService</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//远程服务器url必须一致，还有方法名</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/coupon/coupon/member/list"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//远程方法全路径</span>    <span class="token keyword">public</span> R <span class="token function">membercoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1><span id="nacos配置中心使用">nacos配置中心使用</span></h1><p>1、配置文件==bootstarp.properties==</p><p>2、给配置中心添加配置(名字要求：<code>应用名.properties</code>)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206165706371.png" alt="image-20211206165706371"></p><p>也可以指定名字，bootstarp.properties加入</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.nacos.config.name</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span></code></pre><p>3、需要的类加入注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RefreshScope</span><span class="token comment" spellcheck="true">//动态获取配置中心配置</span></code></pre><p>4、获取配置<code>@Value(${""})</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${coupon.user.name}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${coupon.user.age}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Integer age<span class="token punctuation">;</span></code></pre><p>==注意如果应用里也有相同配置：配置中心优先==</p><h2><span id="细节">细节</span></h2><ol><li><p>命名空间：配置隔离</p><p>创建多个命名空间</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206170202548.png" alt="image-20211206170202548"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206171248574.png" alt="image-20211206171248574"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206171303645.png" alt="image-20211206171303645"></p><p>默认：public(保留空间)；默认新增的配置都在public空间</p><ol><li><p>|开发、测试、生产；</p><p>利用命名空间做环境隔离</p></li><li><p>|多个命名空间多个配置切换？</p><p><code>bootstrap.properties</code>加入配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#获取别的空间的配置，可以指定命名空间，参数是命名空间id</span><span class="token attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token attr-value">2fa2a9a4-de99-4fd2-9c79-aaea6ec7e1b1</span></code></pre></li><li><p>|每个微服务之间互相隔离配置，每个微服务都创建一个自己的命名空间，只加载自己命名空间的配置</p></li></ol></li><li><p>配置集：配置的集合</p></li><li><p>配置集ID：类似配置文件名</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206171912112.png" alt="image-20211206171912112"></p></li><li><p>配置集分组*：</p><p>默认所有的配置集都属于:DEFAULT_GROUP组；</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206172216252.png" alt="image-20211206172216252"></p><p>换组：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#换组 默认default</span><span class="token attr-name">spring.cloud.nacos.config.group</span><span class="token punctuation">=</span><span class="token attr-value">111</span></code></pre></li></ol><p>==最佳使用：每个微服务创建自己的命名空间，使用配置分组区分环境==</p><h2><span id="同时加载多配置集">同时加载多配置集</span></h2><p>配置文件的配置太多比较乱，可以拆分为多个配置文件</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206174105246.png" alt="image-20211206174105246"></p><ol><li><p>加入配置</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].data-id</span><span class="token punctuation">=</span><span class="token attr-value">datasource.yml</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token comment" spellcheck="true">#动态刷新</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true </span><span class="token attr-name">spring.cloud.nacos.config.ext-config[1].data-id</span><span class="token punctuation">=</span><span class="token attr-value">mybatis.yml</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[1].group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[1].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true </span><span class="token attr-name">spring.cloud.nacos.config.ext-config[2].data-id</span><span class="token punctuation">=</span><span class="token attr-value">other.yml</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[2].group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[2].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true </span></code></pre><p><img src="/2022/01/10/gulimall-bi-ji/image-20211206175009198.png" alt="image-20211206175009198"></p></li><li><p>测试</p><p>发现加载了4个配置，默认会加载1个配置：默认组的<code>应用.properties</code>配置文件</p></li></ol><blockquote><p>任何配置文件都可以放入配置中心</p><p>只需要在<code>bootstrap.properties</code>文件中指定加载那些即可</p></blockquote><h1><span id="mp逻辑删除">MP逻辑删除</span></h1><ol><li><p>配置全局逻辑删除规则(省)</p></li><li><p>配置逻辑删除组件Bean(省)</p></li><li><p>给字段属性加注解@TableLogic</p><pre class=" language-JAVA"><code class="language-JAVA">@TableLogic(value="1",delval = "0")</code></pre></li></ol><h1><span id="跨域问题">跨域问题</span></h1><p>spring提供了类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> CorsWebFilter <span class="token function">corsWebFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CorsConfiguration corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1、配置跨域</span>  corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsWebFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1><span id="jsr303校验">JSR303校验</span></h1><ol><li><p>给bean添加校验注解：javax.validation.constraints，并定义自己的错误信息提示</p></li><li><p>开启校验：接口参数种加入@Valid注解</p><p>校验错误以后会默认响应</p></li><li><p>给开启校验的参数后，紧跟一个BindingResult，就可以获取到校验的结果</p></li></ol><h2><span id="统一的异常处理">统一的异常处理</span></h2><blockquote><p>@ControllerAdvice注解：指定处理一个包下的所有异常</p></blockquote><p>定义异常信息类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 9/12/2021 下午 10:17 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> BizCodeEnum <span class="token punctuation">{</span>  <span class="token function">UNKNOW_EXCEPTION</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">"系统位置异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">VAILD_EXCEPTION</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token string">"参数格式校验失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token function">BizCodeEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> code<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> msg<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>统一处理异常</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindingResult<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>MethodArgumentNotValidException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 9/12/2021 下午 9:51 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// 集中处理异常</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span><span class="token string">"com.lpc.gulimall.product.controller"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallExceptionController</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//精确匹配</span>  <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> R <span class="token function">handleVaildException</span><span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"数据校验出现问题{},异常类型:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BindingResult result <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> errorMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result        <span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>fieldError<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              errorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fieldError<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>VAILD_EXCEPTION<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BizCodeEnum<span class="token punctuation">.</span>VAILD_EXCEPTION<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> errorMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 不能精确匹配</span>  <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Throwable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> R <span class="token function">handleException</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>UNKNOW_EXCEPTION<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BizCodeEnum<span class="token punctuation">.</span>UNKNOW_EXCEPTION<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="分组校验功能多场景都复杂校验">分组校验功能(多场景都复杂校验)</span></h2><p>新增两个接口类AddGroups,UpdateGroup用作分组校验的标识符</p><p>校验的类和接口，可以指定使用add或update的标识符，实现不同情况下进行不同的校验</p><p>比如：校验类使用了add和update，意思是这个属性属于这两个组，需要add和update的标识符校验</p><p>​           接口加入了add组的校验，意思是调属性的时候会去校验使用了add组下的属性</p><p>简单理解：属性 接口 一样的标识符，我就校验你</p><ol><li><p>给校验注解标注什么情况需要校验,==不指定group的属性，接口使用分组校验，则不生效==；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableId<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableName<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>AddGroup<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>UpdateGroup<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 品牌 *  * @author lpc * @email lpc@gmail.com * @date 2021-12-06 12:34:46 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"pms_brand"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 品牌id     */</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"修改必须指定品牌id"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Null</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"新增id必须为空"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableId</span>    <span class="token keyword">private</span> Long brandId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 品牌名     */</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"品牌名必须提交"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 品牌logo地址     */</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@URL</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"logo必须是一个合法的url地址"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String logo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 介绍     */</span>    <span class="token keyword">private</span> String descript<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 显示状态[0-不显示；1-显示]     */</span>    <span class="token keyword">private</span> Integer showStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 检索首字母     */</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"/^[a-zA-Z]$/"</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"检索首字母必须是一个字母"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String firstLetter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 排序     */</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"排序必须大于等于0"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer sort<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>controller指定接口什么情况校验，add都时候：<code>@Validated(AddGroup.class)</code>，update都时候：<code>@Validated(UpdateGroup.class)</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 添加*/</span><span class="token keyword">public</span> R <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> BrandEntity brand<span class="token comment" spellcheck="true">/*, BindingResult result*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   brandService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 修改 */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span><span class="token keyword">public</span> R <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestBody</span> BrandEntity brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>   brandService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2><span id="自定义校验">自定义校验</span></h2><ol><li><p>编写一个自定义的注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Constraint<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Payload<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 10/12/2021 下午 2:30 *@describe: *@vision */</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//绑定自定义校验器,可以添加多个校验器，适应不同d</span>        validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>ListValueConstrainValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ListValue</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//默认提示</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"{com.lpc.common.valid.ListValue.message}"</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">vals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>新建<code>ValidationMessages.properties</code>作为默认messages提示</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">com.lpc.common.valid.ListValue.message</span><span class="token punctuation">=</span><span class="token attr-value">必须提交指定都值</span></code></pre></li><li><p>编写一个自定义都校验器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ConstraintValidator<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ConstraintValidatorContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/12/2021 下午 2:37 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListValueConstrainValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>ListValue<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化方法</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>ListValue constraintAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vals <span class="token operator">=</span> constraintAnnotation<span class="token punctuation">.</span><span class="token function">vals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">:</span> vals<span class="token punctuation">)</span> <span class="token punctuation">{</span>      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断是否校验成功</span>  <span class="token comment" spellcheck="true">/**   *   * @param value 需要校验的值   * @param context   * @return   */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>Integer value<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>关联自定义的校验器和自定义的校验注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ListValue</span><span class="token punctuation">(</span>vals<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>groups<span class="token operator">=</span><span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">private</span> Integer showStatus<span class="token punctuation">;</span></code></pre></li></ol><h1><span id="时间格式化">时间格式化</span></h1><p>配置文件加入配置，格式化项目里全部的日期</p><p>阿里jsckson的</p><pre class=" language-yml"><code class="language-yml">spring:  jackson:    date-format: yyyy-MM-dd HH:mm:ss</code></pre><p>springmvc的</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.mvc.date-format</span><span class="token punctuation">=</span><span class="token attr-value">yyyy-MM-dd HH:mm:ss</span></code></pre><h1><span id="es">ES</span></h1><ul><li>1、导入依赖</li><li>2、编写配置 :给容器里注入RestHighLevelClient</li><li>3、参照官方文档操作api</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#匹配全部 排序 分页 筛选只显示两个字段</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"sort"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"balance"</span><span class="token keyword">:</span> <span class="token string">"desc"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span>,  <span class="token string">"from"</span><span class="token keyword">:</span> 5,  <span class="token string">"size"</span><span class="token keyword">:</span> 5,  <span class="token string">"_source"</span>:<span class="token punctuation">[</span><span class="token string">"balance"</span>,<span class="token string">"firstname"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#分词匹配 没有双引号绝对匹配</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"account_number"</span><span class="token keyword">:</span> 20    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#分词匹配</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"mill lane"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#不分词匹配</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_phrase"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"mill lane"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#多字段匹配 会分词</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"multi_match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token string">"mill"</span>,      <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"address"</span>,<span class="token string">"city"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#条件查询</span><span class="token comment" spellcheck="true">#must必须</span><span class="token comment" spellcheck="true">#must_not必须不满足</span><span class="token comment" spellcheck="true">#should满足不满足都行，满足得分高</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"gender"</span><span class="token keyword">:</span> <span class="token string">"M"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,                <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"mill"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>,      <span class="token string">"must_not"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token string">"18"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>,      <span class="token string">"should"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"lastname"</span><span class="token keyword">:</span> <span class="token string">"Wallace"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#filter不计算得分 结果过滤</span><span class="token comment" spellcheck="true">#ranger区间</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"gte"</span><span class="token keyword">:</span> 18,              <span class="token string">"lte"</span><span class="token keyword">:</span> 30            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"gte"</span><span class="token keyword">:</span> 18,            <span class="token string">"lte"</span><span class="token keyword">:</span> 30          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#term精确查询 123这种适合</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"term"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token string">"28"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#规定：</span><span class="token comment" spellcheck="true">#term 没有引号</span><span class="token comment" spellcheck="true">#macth 文本</span></code></pre><h2><span id="aggs">Aggs</span></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#搜索address中包含mill的所有人的年龄分布以及平均年龄和薪资</span><span class="token comment" spellcheck="true">#聚合aggs：</span><span class="token comment" spellcheck="true">#聚合age的所有情况(比如：38的有几位，28的有几位)</span><span class="token comment" spellcheck="true">#聚合类型:terms、avg</span><span class="token comment" spellcheck="true">#size大小：如果有100中情况，只展示10个</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"mill"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"ageAgg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"age"</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 10      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"ageAvg"</span>:<span class="token punctuation">{</span>       <span class="token string">"avg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>         <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"age"</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"balanceAvg"</span>:<span class="token punctuation">{</span>      <span class="token string">"avg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"balance"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"size"</span><span class="token keyword">:</span> 0<span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#按照年龄聚合，并且请求这些年龄段的这些人的平均薪资</span><span class="token comment" spellcheck="true">#子聚合</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"ageAgg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"age"</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 100      <span class="token punctuation">}</span>,      <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"balanceAvg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"avg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"balance"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资</span>GET bank/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"ageAgg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"age"</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 100      <span class="token punctuation">}</span>,      <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"genderAgg"</span>:<span class="token punctuation">{</span>          <span class="token string">"terms"</span>:<span class="token punctuation">{</span>             <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"gender.keyword"</span>          <span class="token punctuation">}</span>,          <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"balanceAvg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"avg"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"balance"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="mapping">Mapping</span></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看映射</span>GET /bank/_mapping<span class="token comment" spellcheck="true">#创建索引并指定映射</span>PUT /my_index<span class="token punctuation">{</span>  <span class="token string">"mappings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"properties"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"age"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span>,      <span class="token string">"email"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span>,      <span class="token string">"name"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#添加映射字段</span><span class="token comment" spellcheck="true">#index:false 禁止索引(默认true)，以后都不能被检索到：用于冗余字段</span>PUT /my_index/_mapping<span class="token punctuation">{</span>  <span class="token string">"properties"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"employee-id"</span>:<span class="token punctuation">{</span>      <span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"keyword"</span>,      <span class="token string">"index"</span>:false    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#修改映射字段：改不了，可以数据迁移(创建新的映射)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#数据迁移</span><span class="token comment" spellcheck="true">#新建一个映射</span>PUT /newbank<span class="token punctuation">{</span>  <span class="token string">"mappings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"properties"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"account_number"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"long"</span>      <span class="token punctuation">}</span>,      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span>,      <span class="token string">"age"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"integer"</span>      <span class="token punctuation">}</span>,      <span class="token string">"balance"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"long"</span>      <span class="token punctuation">}</span>,      <span class="token string">"city"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span>,      <span class="token string">"email"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span>,      <span class="token string">"employer"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span>,      <span class="token string">"firstname"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span>,      <span class="token string">"gender"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span>,      <span class="token string">"lastname"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,        <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"keyword"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>,            <span class="token string">"ignore_above"</span><span class="token keyword">:</span> 256          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>,      <span class="token string">"state"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,        <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"keyword"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"keyword"</span>,            <span class="token string">"ignore_above"</span><span class="token keyword">:</span> 256          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>GET /bank/_search<span class="token comment" spellcheck="true">#数据迁移</span><span class="token comment" spellcheck="true">#type有了写，没有不写，6版本以后渐渐没有type</span>POST _reindex<span class="token punctuation">{</span>  <span class="token string">"source"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"index"</span><span class="token keyword">:</span> <span class="token string">"bank"</span>,    <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"account"</span>  <span class="token punctuation">}</span>,  <span class="token string">"dest"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"index"</span><span class="token keyword">:</span> <span class="token string">"newbank"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>GET /newbank/_search</code></pre><h2><span id="分词">分词</span></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#分词</span><span class="token comment" spellcheck="true">#standard默认分词器 对英文分词的 需要安装中文分词器</span>POST _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"standard"</span>,  <span class="token string">"text"</span><span class="token keyword">:</span><span class="token string">"我是中国人"</span><span class="token punctuation">}</span></code></pre><p>安装中文分词器,再次运行，发现<code>中国人</code>分成了一个词</p><p>ik_smart:最佳分词</p><p>ik_max_word:最多分词</p><pre class=" language-bash"><code class="language-bash">POST _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"ik_smart"</span>,  <span class="token string">"text"</span><span class="token keyword">:</span><span class="token string">"我是中国人"</span><span class="token punctuation">}</span></code></pre><h1><span id="整合redis">整合Redis</span></h1><ol><li>引入data-redis-starter</li><li>简单配置redis的host等信息</li><li>使用springboot自动配置好的redisTemplate来操作redis</li></ol><p><img src="/2022/01/10/gulimall-bi-ji/image-20211218124613864.png" alt="image-20211218124613864"></p><p>1、缓存空结果：解决缓存穿透 </p><p>2、设置过期时间(加随机值):解决缓存雪崩 </p><p>3、加锁：解决缓存击穿</p><h1><span id="redisson">Redisson</span></h1><ol><li>引入依赖</li><li>配置redisson</li></ol><blockquote><p>解决的问题：</p></blockquote><ul><li>锁的自动续期：不会因为业务时间长，锁会过期；(默认存活时期是30秒，不够会续期)</li><li>没有死锁问题：加锁业务只要运行完成就不会续期，即使没有手动解锁，默认30秒以后自动解锁</li><li>加锁时会阻塞：等待业务没有锁的时候才去上锁</li></ul><blockquote><p>注意：手动指定过期时间没有看门狗续期</p></blockquote><p>原因：</p><ul><li>如果指定了超时时间，就会发送redis执行脚本，进行占锁，默认就是我们的超时时间</li><li>没有指定超时时间，就使用30*1000【LockWatchdogTimeout看门狗的默认时间】，只要占锁成功，就会启动一个定时任务【重新给锁设置过期时间，新的过期时间就是看门狗的默认时间】【续期时间：看门狗时间的1/3，就续满30时间】</li></ul><p>最佳实战：</p><ul><li>推荐指定超时时间(省掉了续期操作)，指定一个长时间就行，然后手动解锁</li></ul><blockquote><p>读写锁：</p></blockquote><ul><li>写锁没释放的时候，读锁会等待写锁释放才能获取。<ul><li>写+读：等待写锁释放</li><li>写+写：排队，阻塞方式</li><li>读+写：等待读锁释放</li><li>读+读：无序和没锁一样，并发时都能获取到读锁</li><li>==总结：只要有写，都必须等待==</li></ul></li><li>读锁：共享锁</li><li>写锁：排他锁/互斥锁/独享锁</li></ul><blockquote><p>信号量</p></blockquote><p>有3个停车位</p><p>停一辆车就-1个停车位</p><p>停车位=0时</p><p>就停不了车了</p><p>==停车位：信号量==</p><p>限流</p><blockquote><p>闭锁</p></blockquote><p>放假，锁门</p><p>5个班</p><p>所有班走完</p><p>才能锁门</p><p>==减法计数器：5变成0时才释放锁==</p><blockquote><p>缓存里的数据如何跟数据库保持一致</p></blockquote><p>缓存数据一致性问题?</p><p>1、双写模式（改数据库，改缓存）</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211218203305118.png" alt="image-20211218203305118"></p><p>有问题：</p><p>两次请求都采用双写模式来修改数据，</p><p>一个去改数据库，然后改缓存，</p><p>另一个也去改数据库，改缓存，</p><p>第二个比第一个改缓存改的快，</p><p>最后第一个把第二个的缓存也改了，</p><p>最终数据库存的是第二修改的数据，但缓存的是第一个存的数据。</p><ul><li>加锁</li><li>暂时数据不一致，等缓存数据过期，之后放入最新数据</li></ul><p>2、失效模式（改数据库，删缓存）</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211218203324229.png" alt="image-20211218203324229"></p><p>又没有把最新的数据更新到缓存</p><ul><li>加锁</li></ul><blockquote><p>数据一致性–解决方案</p></blockquote><p>所有数据都带过期时间</p><p>读数据的时候加入，分布式读写锁</p><p>Canal</p><h1><span id="整合spring-cache-简化缓存开发">整合spring cache 简化缓存开发</span></h1><ol><li><p>引入依赖</p></li><li><p>编写配置</p><ol><li><p>自动配置了</p><ul><li>CacheAutoConfiguration会导入RedisCacheConfiguration</li><li>自动配好了缓存管理器RedisCacheManager</li></ul></li><li><p>自己配置</p><ul><li><p>配置redis作为缓存在配置文件中</p></li><li><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cache.type</span><span class="token punctuation">=</span><span class="token attr-value">redis</span></code></pre></li></ul></li><li><p>测试使用缓存</p><pre class=" language-tex"><code class="language-tex">@Cacheable:触发将数据保存到缓存的操作@CacheEvict:触发将数据从缓存删除的操作   失效模式@CachePut:不影响方法执行更新缓存   双写模式@Caching:组合以上操作@CacheConfig:在类级别共享缓存的相同配置</code></pre><ol><li><p>开启缓存功能在启动类上</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span></code></pre></li><li><p>只需要使用注解就能完成缓存操作了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//每一个需要缓存的数据我们都来指定要放到那个名字的缓存【缓存分区(按照业务类型划分)】</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"catagory"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//代表当前方法的结果需要缓存。如果缓存中有，方法不用调用。如果缓存中没有，则执行方法返回结果，顺便把结果放入缓存。</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>CategoryEntity<span class="token operator">></span> <span class="token function">getLevel1Categorys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre></li><li><p>默认行为</p><ul><li>如果方法中有，方法不用调用</li><li>key默认自动生成<code>缓存的名字::SimpleKey []</code></li><li>缓存的value的值，默认使用jdk序列化后的数据作为value</li><li>默认过期时间，是-1，永不过期(需要自定义)</li></ul></li><li><p>自定义</p><ul><li><p>指定生成key，字符串记得加’’单引号</p><p><code>key属性，接收一个SpEl</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"catagory"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"'level1Categorys'"</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">key <span class="token operator">=</span> <span class="token string">"#root.method.name"</span>#使用方法名作为key，具体语法，百度</code></pre></li><li><p>自定义缓存存活时间</p><p>配置文件写入</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cache.redis.time-to-live</span><span class="token punctuation">=</span><span class="token attr-value">3600000#单位毫秒 1小时</span></code></pre></li><li><p>value保存为json格式</p><p>添加自己的配置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>CacheProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableCaching<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>GenericJackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>RedisSerializationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 19/12/2021 下午 12:37 * @describe: * @vision */</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCacheConfig</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 配置文件的设置没有用上，将配置文件的配置也设置进来   * @return   */</span>  <span class="token annotation punctuation">@Bean</span>  RedisCacheConfiguration <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span>CacheProperties cacheProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RedisCacheConfiguration config <span class="token operator">=</span> RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config <span class="token operator">=</span>config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config <span class="token operator">=</span>config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CacheProperties<span class="token punctuation">.</span>Redis redisProperties <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将配置文件中所有的配置都生效</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">prefixKeysWith</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isUseKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol></li><li><p>原理</p><p>CacheAutoConfiguration  –&gt;   RedisCacheConfiguration  –&gt;  </p><p>自动配置了RedisCacheManager –&gt;  初始化所有的缓存   –&gt;  每个缓存决定使用什么配置</p><p>–&gt;  使用默认配置(如果没有自定义配置)   –&gt;  想修改缓存配置，只需在容器中放一个 RedisCacheConfiguration即可 –&gt;他会自动应用到RedisCacheManager 管理的所有缓存分区中</p></li><li><p>其他配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#key前缀,没有默认使用缓存名字作为前缀 建议不指定，用默认分区作为前缀</span><span class="token attr-name">spring.cache.redis.key-prefix</span><span class="token punctuation">=</span><span class="token attr-value">CACHE_ </span><span class="token comment" spellcheck="true">#是否使用前缀，默认true开启</span><span class="token attr-name">spring.cache.redis.use-key-prefix</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#是否缓存空值</span><span class="token attr-name">spring.cache.redis.cache-null-values</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre></li><li><p>Spring-Cache的不足</p><ol><li><p>读模式</p><ul><li><p>缓存穿透 ：查询一个null数据。解决：缓存空数据。</p><p> Spring-Cache提供了</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#是否缓存空值</span><span class="token attr-name">spring.cache.redis.cache-null-values</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre></li><li><p>缓存击穿：大量请求同时查询一个正好过期的数据。解决：加锁</p><p>Spring-Cache提供，没有分布式锁，可以设置同步锁解决击穿</p><p>只有 @Cacheable有sync属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"catagory"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#root.method.name"</span><span class="token punctuation">,</span>sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></code></pre></li><li><p>缓存雪崩：当量缓存同时过期。解决：加过期时间</p><p>提供</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cache.redis.time-to-live</span><span class="token punctuation">=</span><span class="token attr-value">3600000</span></code></pre></li></ul></li><li><p>写模式：(缓存与数据库一致)</p><ul><li>读写加锁</li><li>进入Canal，感知mysql更新自动更新缓存</li><li>读多写多，直接去数据查询</li></ul></li><li><p>总结：</p><ul><li>常规数据(读多写少，及时性，一致性要求不高的；)，完全可以使用SpringCache</li><li>特殊数据：需要特殊设计</li></ul></li></ol></li></ol></li></ol><h1><span id="创建线程的四种方式">创建线程的四种方式</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20211222120545683.png" alt="image-20211222120545683"></p><p>推荐使用第四种</p><h2><span id="运行流程">运行流程：</span></h2><p>1、线程池创建，准备好 core 数量的核心线程，准备接受任务 </p><p>2、新的任务进来，用 core 准备好的空闲线程执行。 </p><ul><li><p>(1) 、core 满了，就将再进来的任务放入阻塞队列中。空闲的 core 就会自己去阻塞队 </p><p>列获取任务执行 </p><p>(2) 、阻塞队列满了，就直接开新线程执行，最大只能开到 max 指定的数量 </p><p>(3) 、max 都执行好了。Max-core 数量空闲的线程会在 keepAliveTime 指定的时间后自 </p><p>动销毁。最终保持到 core 大小 </p><p>(4) 、如果线程数开到了 max 的数量，还有新任务进来，就会使用 reject 指定的拒绝策 </p><p>略进行处理 </p></li></ul><p>3、所有的线程创建都是由指定的 factory 创建的。</p><h1><span id="重定向传值">重定向传值</span></h1><p>使用<code>RedirectAttributes redirectAttributes</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//下一个页面只要取了这个数据，session里就会删掉,利用session，需要解决session共享问题</span>redirectAttributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"errors"</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重定向携带数据，放在?后边</span>redirectAttributes<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"skuId"</span><span class="token punctuation">,</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代替Model model</p><p>原理:使用了session(分布式需要解决共享问题)</p><h1><span id="gitee授权登录">Gitee授权登录</span></h1><p><a href="https://gitee.com/api/v5/oauth_doc#/">https://gitee.com/api/v5/oauth_doc#/</a></p><h1><span id="session共享问题">Session共享问题</span></h1><p>解决方案：</p><ol><li><p>session复制(不推荐)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227101822692.png" alt="image-20211227101822692"></p></li><li><p>客户端存储(不推荐)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227102158141.png" alt="image-20211227102158141"></p></li><li><p>利用hash一致性</p><ul><li>你的session存储到a服务器，那你以后的请求都落到a服务器处理</li></ul><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227102255532.png" alt="image-20211227102255532"></p></li><li><p>统一存储</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227103916077.png" alt="image-20211227103916077"></p></li><li><p>子域共享</p><ul><li>继承了父亲的session</li></ul><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227104616271.png" alt="image-20211227104616271"></p><p>子域怎么方父域？</p><ul><li><p>加入配置类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>session<span class="token punctuation">.</span>web<span class="token punctuation">.</span>http<span class="token punctuation">.</span>CookieSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>session<span class="token punctuation">.</span>web<span class="token punctuation">.</span>http<span class="token punctuation">.</span>DefaultCookieSerializer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 27/12/2021 下午 12:23 *@describe: *@vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallSessionConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> CookieSerializer <span class="token function">cookieSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      DefaultCookieSerializer cookieSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultCookieSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//指定作用域</span>      cookieSerializer<span class="token punctuation">.</span><span class="token function">setDomainName</span><span class="token punctuation">(</span><span class="token string">"gulimall.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cookieSerializer<span class="token punctuation">.</span><span class="token function">setCookieName</span><span class="token punctuation">(</span><span class="token string">"GULISESSION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cookieSerializer<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><h2><span id="json序列化存入redis">JSON序列化存入Redis</span></h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> RedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">springSessionDefaultRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1><span id="整合spring-session">整合Spring Session</span></h1><p><a href="https://docs.spring.io/spring-session/reference/2.6.1/guides/boot-redis.html">https://docs.spring.io/spring-session/reference/2.6.1/guides/boot-redis.html</a></p><p>示例在gulimall-auth-server服务下</p><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--spring session--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定session在session中</span><span class="token attr-name">spring.session.store-type</span><span class="token punctuation">=</span><span class="token attr-value">redis</span><span class="token attr-name">server.servlet.session.timeout</span><span class="token punctuation">=</span><span class="token attr-value">30m</span></code></pre></li><li><p>加入配置注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableRedisHttpSession</span></code></pre></li></ol><h2><span id="核心原理">核心原理</span></h2><ol><li><p><code>@EnableRedisHttpSession</code>导入了<code>RedisHttpSessionConfiguration.class</code></p><ol><li><p>给容器中添加了一个组件:<code>RedisOperationsSessionRepository</code>:==redis操作session==</p></li><li><p>放了一个SessionRepositoryFilter:==session存储过滤器==,每个请求都要经过过滤器</p><ol><li><p>创建的时候，就自动从容器中获取到了SessionRepository【RedisOperationsSessionRepository】</p></li><li><p>核心原理</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211227155500104.png" alt="image-20211227155500104"></p><p>原生的request和response都被包装</p></li><li><p>以后我们获取session。request.getSession();</p></li><li><p>就等于WrappedRequest.getSession() ====&gt; SessionRepository中获取到</p></li></ol></li></ol></li></ol><p>==装饰者模式==</p><p>自定延期：页面刷新，redis中的过期时间也刷新了【spriong session中也提供了这个功能】</p><h1><span id="单点登录">单点登录</span></h1><p><a href="https://blog.csdn.net/qq_37126175/article/details/107750145">https://blog.csdn.net/qq_37126175/article/details/107750145</a></p><ol><li>客户端访问受保护的资源的时候<br> 1.1 判断session中是否有LoginUser<br> 1.2 判断请求路径中是否有访问令牌token<br> 1.3 如果上述都没有的情况，跳转到登录服务器SSOServer+redirectUrl地址（带上当前网址，为了后面登录后跳转）<pre class=" language-java"><code class="language-java"> <span class="token keyword">return</span> <span class="token string">"redirect:"</span><span class="token operator">+</span>ssoServer<span class="token operator">+</span><span class="token string">"?redirect_url=http://client2.com:8082/employees"</span><span class="token punctuation">;</span></code></pre></li><li>SsoServer登录服务器<br> 2.1 首先判断cookie中是否有登录记录，如果cookie中有记录取出cookie对应的token值，<pre><code> 带上访问令牌重定向到redirect_url=http://client2.com:8082/employees";</code></pre> 2.2 没有cookie则跳转到login.html登录页面输入登录信息<br> 2.3 登录页面发送表单post请求登录，验证登录信息成功后<pre><code> 2.3.1 传一个UUID作为key，value作为userID 将该键值对放入认证服务器的Cookie中在认证系统中记录登录标记   </code></pre><pre class=" language-java"><code class="language-java"> Cookie sso_token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"sso_token"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> ​    2.3.2 重定向到回调地址+访问令牌<pre class=" language-java"><code class="language-java"> <span class="token keyword">return</span> <span class="token string">"redirect:"</span><span class="token operator">+</span>url<span class="token operator">+</span><span class="token string">"?token="</span><span class="token operator">+</span>token<span class="token punctuation">;</span>        </code></pre></li></ol><p>==关键：给认证服务器留下痕迹==</p><h1><span id="threadlocal">ThreadLocal</span></h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>UserInfoTo<span class="token operator">></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>UserInfoTo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>cart服务用到：</p><p>加入了拦截器，每一个请求过来先经过拦截器，然后放入一个ThreadLocal线程，里面放入一些数据</p><pre class=" language-java"><code class="language-java">UserInfoTo userInfoTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfoTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userInfoTo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>之后这个请求是哪个处理器处理，就可以获取到这些数据，实现数据共享==(仅这条线程可以获取)==</p><pre class=" language-java"><code class="language-java">UserInfoTo userInfoTo <span class="token operator">=</span> CartInterceptor<span class="token punctuation">.</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1><span id="消息中间件">消息中间件</span></h1><ol><li>大多应用中，可通过消息服务中间件来提升系统==异步通信、扩展解耦==能力 </li><li>消息服务中两个重要概念： 消息代理（message broker）和目的地（destination） 当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。 </li><li>消息队列主要有两种形式的目的地 <ol><li>队列（queue）：点对点消息通信（point-to-point）【4】</li><li> 主题（topic）：发布（publish）/订阅（subscribe）消息通信 【5】</li></ol></li><li>点对点式： <ul><li>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列</li><li>消息只有唯一的发送者和接受者，但并不是说只能有一个接收者</li></ul></li><li>发布订阅式：<ul><li>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么就会在消息到达时同时收到消息</li></ul></li><li>JMS（Java Message Service）JAVA消息服务：<ul><li>基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS实现</li></ul></li><li>AMQP（Advanced Message Queuing Protocol）<ul><li>高级消息队列协议，也是一个消息代理的规范，兼容JMS</li><li>RabbitMQ是AMQP的实现</li></ul></li><li>Spring支持 <ul><li>spring-jms提供了对JMS的支持</li><li>spring-rabbit提供了对AMQP的支持</li><li>需要ConnectionFactory的实现来连接消息代理</li><li>提供JmsTemplate、RabbitTemplate来发送消息 </li><li>@JmsListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息<strong>代理发布的消息</strong></li><li>@EnableJms、@EnableRabbit开启支持</li></ul></li><li>Spring Boot自动配置 <ul><li><strong>JmsAutoConfiguration</strong> </li><li><strong>RabbitAutoConfiguration</strong></li></ul></li><li>市面的MQ产品<ul><li>ActiveMQ、RabbitMQ、RocketMQ、Kafka</li></ul></li></ol><h2><span id="jms与amqp">JMS与AMQP</span></h2><p><img src="/2022/01/10/gulimall-bi-ji/image-20211229193030127.png" alt="image-20211229193030127"></p><h2><span id="rabbitmq概念">RabbitMQ概念</span></h2><p><strong>RabbitMQ</strong>简介：</p><p>RabbitMQ是一个由erlang开发的AMQP(Advanved Message Queue Protocol)的开源实现。 </p><p><strong>核心概念</strong> </p><p><strong>Message</strong> </p><p>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成， </p><p>这些属性包括<strong>routing-key</strong>（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可 能需要持久性存储）等。 </p><p><strong>Publisher</strong> </p><p>消息的生产者，也是一个向交换器发布消息的客户端应用程序。 </p><p><strong>Exchange</strong> </p><p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。 </p><p>Exchange有4种类型：direct(默认)，fanout, topic, 和headers，不同类型的Exchange转发消息的策略有所区别</p><p><strong>Queue</strong> </p><p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。 </p><p><strong>Binding</strong> </p><p>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交 换器理解成一个由绑定构成的路由表。 Exchange 和Queue的绑定可以是多对多的关系。 </p><p><strong>Connection</strong> </p><p>网络连接，比如一个TCP连接。 </p><p><strong>Channel</strong> </p><p>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP 命令都是通过信道 发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都 是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</p><p><strong>Consumer</strong> </p><p>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。 </p><p><strong>Virtual Host</strong> </p><p>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加 </p><p>密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥 </p><p>有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时 </p><p>指定，RabbitMQ 默认的 vhost 是 / 。 </p><p><strong>Broker</strong> </p><p>表示消息队列服务器实体</p><h2><span id="图解">图解*</span></h2><p><img src="/2022/01/10/gulimall-bi-ji/image-20211229203021998.png" alt="image-20211229203021998"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230102538414.png" alt="image-20211230102538414"></p><h2><span id="安装rabbitmq">安装RabbitMQ</span></h2><pre class=" language-bash"><code class="language-bash">docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:managementdocker update rabbitmq --restart<span class="token operator">=</span>always </code></pre><p>4369, 25672 (Erlang发现&amp;集群端口) </p><p>5672, 5671 (AMQP端口) </p><p>15672 (web管理后台端口) </p><p><a href="http://192.168.67.217:15672/">http://192.168.67.217:15672/</a></p><p>账号：guest  密码：guest</p><p>61613, 61614 (STOMP协议端口) </p><p>1883, 8883 (MQTT协议端口) </p><p><a href="https://www.rabbitmq.com/networking.html">https://www.rabbitmq.com/networking.html</a></p><h2><span id="rabbitmq运行机制">RabbitMQ运行机制</span></h2><p>AMQP 中消息的路由过程和 Java 开发者熟悉的 JMS 存在一些差别， AMQP 中增加了 <strong>Exchange</strong> 和<strong>Binding</strong> 的角色。生产者把消息发布 到 Exchange 上，消息最终到达队列 并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230102556932.png" alt="image-20211230102556932"></p><h2><span id="交换机类型">交换机类型</span></h2><p><strong>Exchange</strong>分发消息时根据类型的不同分发策略有区别，目前共四种类型：<strong>direct</strong>、 <strong>fanout</strong>、<strong>topic</strong>、<strong>headers</strong> 。headers 匹配 AMQP 消息的 header 而不是路由键， headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接 看另外三种类型：</p><blockquote><p><strong>点对点</strong></p></blockquote><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230103737114.png" alt="image-20211230103737114"></p><blockquote><p><strong>广播</strong></p></blockquote><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230103746996.png" alt="image-20211230103746996"></p><blockquote><p><strong>主题</strong>(发布订阅)</p></blockquote><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230103942776.png" alt="image-20211230103942776"></p><h2><span id="测试">测试</span></h2><ol><li><p>创建交换机(学会创建，一会删除)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230104850416.png" alt="image-20211230104850416"></p></li><li><p>创建队列(一会测试需要)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230110459661.png" alt="image-20211230110459661"></p><p>再次创建多个队列</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230111847002.png" alt="image-20211230111847002"></p></li><li><p>绑定队列(学会绑定)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230110826071.png" alt="image-20211230110826071"></p></li></ol><h3><span id="点对点">点对点</span></h3><ol><li><p>添加交换机</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112212685.png" alt="image-20211230112212685"></p></li><li><p>绑定队列(上边创建的四个)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112438859.png" alt="image-20211230112438859"></p></li><li><p>发消息(在交换机下)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112642515.png" alt="image-20211230112642515"></p><p>队列</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112708761.png" alt="image-20211230112708761"></p></li><li><p>获取消息</p><p>进入队列，获取消息(消息还在)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230112849235.png" alt="image-20211230112849235"></p><p>再次获取(队列中删除消息)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230113020273.png" alt="image-20211230113020273"></p><p>==关键：交换机(direct)发消息指定路由键==</p></li></ol><h3><span id="广播">广播</span></h3><ol><li><p>创建交换机</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230114950610.png" alt="image-20211230114950610"></p></li><li><p>绑定队列</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230115118335.png" alt="image-20211230115118335"></p></li><li><p>发消息</p></li><li><p>查看</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230115935711.png" alt="image-20211230115935711"></p><p>与交换机绑定的队列全都接收到了消息</p><p>==关键：与交换机(fanout)绑定==</p></li></ol><h3><span id="主题">主题</span></h3><ol><li><p>创建交换机</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145410988.png" alt="image-20211230145410988"></p></li><li><p>添加队列(指定路由键)</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145645244.png" alt="image-20211230145645244"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145656331.png" alt="image-20211230145656331"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145707967-16408474292471.png" alt="image-20211230145707967"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145714636.png" alt="image-20211230145714636"></p><p>总览</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230145750146.png" alt="image-20211230145750146"></p></li><li><p>发消息</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230150004276.png" alt="image-20211230150004276"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230150011732.png" alt="image-20211230150011732"></p><p>全部都接收到了消息(都匹配到了这个消息的路由键)</p><p>再次发送消息</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230150158980.png" alt="image-20211230150158980"></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230150148306.png" alt="image-20211230150148306"></p><p>只有lpc.news接受到了消息(.news匹配到了这个消息的路由键)</p><p>==关键：模糊匹配==</p></li></ol><h2><span id="rabbitmq消息确认机制-可靠抵达">RabbitMQ消息确认机制-可靠抵达</span></h2><p>保证消息不丢失，可靠抵达，可以使用事务消息，性能下降250倍，为此引入确认机制 </p><p>• <strong>publisher</strong> confirmCallback 确认模式 </p><p>• <strong>publisher</strong> returnCallback 未投递到 queue 退回模式 </p><p>• <strong>consumer</strong> ack机制 </p><p><img src="/2022/01/10/gulimall-bi-ji/image-20211230194121178.png" alt="image-20211230194121178"></p><blockquote><p>可靠抵达-ConfirmCallback</p></blockquote><p>==spring.rabbitmq.publisher-confirms=true==</p><ul><li>在创建 connectionFactory 的时候设置 PublisherConfirms(true) 选项，开启 confirmcallback。 </li><li>CorrelationData：用来表示当前消息唯一性。 </li><li>消息只要被 broker 接收到就会执行 confirmCallback，如果是 cluster 模式，需要所有 broker 接收到才会调用 confirmCallback。 </li><li>被 broker 接收到只能表示 message 已经到达服务器，并不能保证消息一定会被投递 到目标 queue 里。所以需要用到接下来的 returnCallback 。</li></ul><pre class=" language-JAVA"><code class="language-JAVA">/* 定制RabbitTemplate  * 1、服务器收到消息就回调  *     1、spring.rabbitmq.publisher-confirms=true  *     2、设置确认回调ConfirmCallback  * */  @PostConstruct//MyRabbitConfig对象创建以后执行这个方法  public void initRabbitTemplate(){    // 设置确认回调    rabbitTemplate.setConfirmCallback(        new RabbitTemplate.ConfirmCallback() {          /**           * 1、只要消息抵达Broker就b=true           *           * @param correlationData 当前消息的唯一关联数据(唯一id) 发送消息端携带           * @param b 消息是否成功收到           * @param s 失败原因           */          @Override          public void confirm(CorrelationData correlationData, boolean b, String s) {            System.out.println("correlationData"+s+",b"+b+",s"+s);          }        });  }</code></pre><blockquote><p>可靠抵达-ReturnCallback</p></blockquote><p>==spring.rabbitmq.publisher-returns=true==</p><p>==spring.rabbitmq.template.mandatory=true==</p><ul><li>confrim 模式只能保证消息到达 broker，不能保证消息准确投递到目标 queue 里。在有些业务场景下，我们需要保证消息一定要投递到目标 queue 里，此时就需要用到 return 退回模式。 </li><li>这样如果未能投递到目标 queue 里将调用 returnCallback ，可以记录下详细到投递数据，定期的巡检或者自动纠错都需要这些数据</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 定制RabbitTemplate * 1、服务器收到消息就回调 *     1、spring.rabbitmq.publisher-confirms=true *     2、设置确认回调回调ConfirmCallback * 2、消息正确抵达队列进行回调 *     1、spring.rabbitmq.publisher-returns=true *     2、spring.rabbitmq.template.mandatory=true *     3、设置确认回调ReturnCallback * */</span><span class="token annotation punctuation">@PostConstruct</span> <span class="token comment" spellcheck="true">// MyRabbitConfig对象创建以后执行这个方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initRabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 设置确认回调</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 1、只要消息抵达Broker就b=true         *         * @param correlationData 当前消息的唯一关联数据(唯一id) 发送消息端携带         * @param b 消息是否成功收到         * @param s 失败原因         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"correlationData"</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">",b"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">",s"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置消息抵达队列的确认回调</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 只要消息没有成功抵达消息队列，触发失败回调         * @param message 投递失败的消息的详细信息         * @param i 回复的状态码         * @param s 回复的文本内容         * @param s1 当时这个消息是哪个交换机发的         * @param s2 当时这个消息用的那个路由键         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> String s<span class="token punctuation">,</span> String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fail Message["</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">"]"</span><span class="token operator">+</span><span class="token string">"状态码"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"文本"</span><span class="token operator">+</span><span class="token string">"s"</span><span class="token operator">+</span><span class="token string">"exchange"</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"路由键"</span><span class="token operator">+</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>可靠抵达-Ack消息确认机制</p></blockquote><ul><li>消费者获取到消息，成功处理，可以回复Ack给Broker <ul><li>basic.ack用于肯定确认；broker将移除此消息</li><li>basic.nack用于否定确认；可以指定broker是否丢弃此消息，可以批量</li><li>basic.reject用于否定确认；同上，但不能批量</li></ul></li><li>默认自动ack，消息被消费者收到，就会从broker的queue中移除 </li><li>queue无消费者，消息依然会被存储，直到消费者消费 </li><li>消费者收到消息，默认会自动ack。但是如果无法确定此消息是否被处理完成,或者成功处理。我们可以开启手动ack模式 <ul><li>消息处理成功，ack()，接受下一个消息，此消息broker就会移除</li><li>消息处理失败，nack()/reject()，重新发送给其他人进行处理，或者容错处理后ack</li><li>消息一直没有调用ack/nack方法，broker认为此消息正在被处理，不会投递给别人，此时客户端断开，消息不会被broker移除，会投递给别人</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> <span class="token number">3</span>、消费端确认（保证每一条消息被正确消费<span class="token punctuation">,</span>此时才可以broker删除这个消息）<span class="token operator">*</span>      spring<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>acknowledge<span class="token operator">-</span>mode<span class="token operator">=</span>manual<span class="token operator">*</span>     <span class="token number">1</span>、默认是自动确认的，只要接受到消息，客户端会自动确认，服务端就会删除这条消息<span class="token operator">*</span>        问题：<span class="token operator">*</span>           我们收到很多消息，自动回复给服务器，只有一个消息处理，然后宕机，发现消息丢失<span class="token operator">*</span>           手动确认：只要没有确认 ，消息就还在<span class="token operator">*</span>     <span class="token number">2</span>、如何签收<span class="token operator">*</span>          签收消息 channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>          拒签消息 channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>配置</p><p>#手动ack消息<br>==spring.rabbitmq.listener.simple.acknowledge-mode=manual==</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//chanel内按顺序自增</span><span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//签收消息 false非批量 true批量</span>   channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//拒签消息 第二个参数是否批量 第三个参数是否从新放回队列</span>   <span class="token comment" spellcheck="true">//channel.basicNack(deliveryTag,false,true);</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2><span id="延时队列">延时队列</span></h2><p>使用场景</p><p>比如未付款订单，超过一定时间后，系统自动取消订单并释放占有物品。</p><p><strong>常用解决方案：</strong> </p><p>spring的 schedule 定时任务轮询数据库 </p><p><strong>缺点：</strong> </p><p>消耗系统内存、增加了数据库的压力、存在较大的时间误差 </p><p><strong>解决：</strong>rabbitmq的消息TTL和死信Exchange结合</p><blockquote><p>消息的TTL（Time To Live）</p></blockquote><ul><li>消息的TTL就是消息的存活时间。</li><li>RabbitMQ可以对队列和消息分别设置TTL。<ul><li>对队列设置就是队列没有消费者连着的保留时间，也可以对每一个单独的消息做单独的设置。超过了这个时间，我们认为这个消息就死了，称之为死信。</li><li>如果队列设置了，消息也设置了，那么会取小的。所以一个消息如果被路由到不同的队列中，这个消息死亡的时间有可能不一样（不同的队列设置）。这里单讲单个消息的TTL，因为它才是实现延迟任务的关键。可以通过设置消息的expiration字段或者x-message-ttl属性来设置时间，两者是一样的效果。</li></ul></li></ul><blockquote><p>Dead Letter Exchanges（DLX） </p></blockquote><ul><li>一个消息在满足如下条件下，会进死信路由，记住这里是路由而不是队列，一个路由可以对应很多队列。（什么是死信） <ul><li>一个消息被Consumer拒收了，并且reject方法的参数里requeue是false。也就是说不会被再次放在队列里，被其他消费者使用。（basic.reject/ basic.nack）requeue=false</li><li>上面的消息的TTL到了，消息过期了。</li><li>队列的长度限制满了。排在前面的消息会被丢弃或者扔到死信路由上 </li></ul></li><li>Dead Letter Exchange其实就是一种普通的exchange，和创建其他exchange没有两样。只是在某一个设置Dead Letter Exchange的队列中有消息过期了，会自动触发消息的转发，发送到Dead Letter Exchange中去。</li><li>我们既可以控制消息在一段时间后变成死信，又可以控制变成死信的消息被路由到某一个指定的交换机，结合二者，其实就可以实现一个延时队列</li><li>手动ack&amp;异常消息统一放在一个队列处理建议的两种方式<ul><li>catch异常后，<strong>手动发送到指定队列</strong>，然后使用channel给rabbitmq确认消息已消费</li><li>给Queue绑定死信队列，使用nack（requque为false）确认消息消费失败</li></ul></li></ul><h1><span id="简单整合rabbitmq测试">简单整合RabbitMQ测试</span></h1><ol><li><strong>引入</strong> spring-boot-starter-amqp</li><li><strong>application.yml</strong>配置</li><li><strong>测试RabbitMQ</strong><ol><li><strong>AmqpAdmin</strong>：管理组件</li><li><strong>RabbitTemplate</strong>：消息发送处理组件</li><li>@RabbitListener 监听消息的方法可以有三种参数（不分数量，顺序） 类+方法上</li><li>@RabbieHandler 方法上 (结合@RabbitListener使用，重载区分不同的消息)</li></ol></li></ol><blockquote><p>order服务</p></blockquote><ol><li><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.67.217</span><span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span><span class="token attr-name">spring.rabbitmq.virtual-host</span><span class="token punctuation">=</span><span class="token attr-value">/</span></code></pre></li><li><p>开启功能<code>@EnableRabbit</code></p></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>order<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>AmqpAdmin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallOrderApplicationTests</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 1、如何创建Exchange、Queue、Binding   *     1)、使用AmqpAdmin进项创建   * 2、如何发消息   * */</span>  <span class="token annotation punctuation">@Autowired</span> AmqpAdmin amqpAdmin<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建交换机对象</span>    <span class="token comment" spellcheck="true">// DirectExchange(String name, boolean durable, boolean autoDelete, Map&lt;String, Object></span>    <span class="token comment" spellcheck="true">// arguments)</span>    DirectExchange directExchange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    amqpAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Exchange[{}]创建成功"</span><span class="token punctuation">,</span> <span class="token string">"hello-java-exchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建队列</span>    <span class="token comment" spellcheck="true">// Queue(String name, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String,</span>    <span class="token comment" spellcheck="true">// Object> arguments)</span>    Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"hello-java-queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    amqpAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Queue[{}]创建成功"</span><span class="token punctuation">,</span> <span class="token string">"hello-java-queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token comment" spellcheck="true">//绑定</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    destination 目的地</span>    <span class="token comment" spellcheck="true">//    DestinationType目的地类型</span>    <span class="token comment" spellcheck="true">//    exchange交换机</span>    <span class="token comment" spellcheck="true">//    routingKey 路由键</span>    <span class="token comment" spellcheck="true">// Binding(String destination, Binding.DestinationType destinationType, String exchange, String</span>    <span class="token comment" spellcheck="true">// routingKey, Map&lt;String, Object> arguments)</span>    <span class="token comment" spellcheck="true">//将exchange指定的交换机和指定的目的地绑定，使用路由键</span>    Binding binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"hello-java-queue"</span><span class="token punctuation">,</span>            Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span><span class="token string">"hello-java"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    amqpAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Binding[{}]创建成功"</span><span class="token punctuation">,</span> <span class="token string">"hello-java-binding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用消息转换器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>Jackson2JsonMessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>MessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 30/12/2021 下午 6:33 *@describe: *@vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRabbitConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> MessageConverter <span class="token function">messageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发消息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1、发送消息</span>  OrderReturnReasonEntity entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderReturnReasonEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  entity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>  entity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  entity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"呵呵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span><span class="token string">"hello-java"</span><span class="token punctuation">,</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息发送完成{}"</span><span class="token punctuation">,</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接收消息</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// queues监听的所有队列</span><span class="token comment" spellcheck="true">// 类型org.springframework.amqp.core.Message</span><span class="token comment" spellcheck="true">//  参数可以写一下类型</span><span class="token comment" spellcheck="true">//  1、Message message，原生消息详细信息  头+体</span><span class="token comment" spellcheck="true">//  2、T&lt;发送的消息类型>  用什么类型发，用什么类型收</span><span class="token comment" spellcheck="true">//  3、Channel channel 当前传输数据的通道</span><span class="token comment" spellcheck="true">//  Queue：可以有很多人来监听，但只有一个能接收到消息</span><span class="token comment" spellcheck="true">// 场景：</span><span class="token comment" spellcheck="true">//     1)、订单服务有多个  同一个消息，只有一个人能接收到</span><span class="token comment" spellcheck="true">//     2)、只有一个消息处理完，才能继续接受下一个消息</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello-java-queue"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recieveMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> OrderReturnReasonEntity content<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// "id":1,"name":"呵呵","sort":null,"status":null,"createTime":1640861388816}</span>   <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 消息头属性信息</span>   MessageProperties properties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受到的消息："</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"内容=>"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//chanel内按顺序自增</span>   <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//签收消息 false非批量 true批量</span>      channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//拒签消息 第三个参数是否从新放回队列</span>      <span class="token comment" spellcheck="true">//channel.basicNack(deliveryTag,false,true);</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h1><span id="feigen失去请求头问题">Feigen失去请求头问题</span></h1><p>浏览器和Feign发请求有区别</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220101145913579.png" alt="image-20220101145913579"></p><p>解决(feign在执行远程调用前，会构造请求，期间会调用一些拦截器来增强这个请求(默认没有))</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220101150326845.png" alt="image-20220101150326845"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"requestInterceptor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> RequestInterceptor <span class="token function">requestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>RequestTemplate requestTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1、RequestContextHolder拿到刚进来的请求</span>      ServletRequestAttributes attributes <span class="token operator">=</span>          <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      HttpServletRequest request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 2、同步请求头  Cookie</span>      String cookie <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>异步出现问题</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220101155955059.png" alt="image-20220101155955059"></p><p>解决方法：异步执行之前放入数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取这个线程的请求数据</span>RequestAttributes requestAttributes <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> getAddressFuture <span class="token operator">=</span>   CompletableFuture<span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span>   <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//执行远程之前把请求数据放入这个异步y</span>      RequestContextHolder<span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>MemberAddressVo<span class="token operator">></span> address <span class="token operator">=</span> memberFeignService<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span>memberRespVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      confirmVo<span class="token punctuation">.</span><span class="token function">setMemberAddressVos</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   executor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1><span id="接口幂等性问题解决方案">接口幂等性问题解决方案</span></h1><ol><li>token机制</li><li>各种锁机制</li><li>各种唯一约束</li><li>防重表</li><li>全局请求唯一id</li></ol><h2><span id="锁定库存逻辑">锁定库存逻辑</span></h2><p><img src="/2022/01/10/gulimall-bi-ji/image-20220103132327092.png" alt="image-20220103132327092"></p><h1><span id="分布式事务">分布式事务</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20220103150151689.png" alt="image-20220103150151689"></p><h2><span id="本地事务失效问题">本地事务失效问题：</span></h2><p>同一个对象内事务方法互调默认失效，原因，绕过了代理对象</p><p>事务使用代理对象来控制</p><p>解决：使用代理对象来调用事务方法</p><ol><li><p>引入aop-starter,他里边引入了aspectj</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>启动类加入注解<code>@EnableAspectJAutoProxy</code>,开启aspectj动态代理功能，以后所有的动态代理都是aspectj创建的，好处没有接口也可以创建动态代理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>exposeProxy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//exposeProxy堆外暴露代理对象</span></code></pre></li><li><p>本类互调用代理对象</p><pre class=" language-JAVA"><code class="language-JAVA">//获取当前类代理对象OrderServiceImpl orderService = (OrderServiceImpl) AopContext.currentProxy();//转为当前类对象//调用本类方法(a方法里的事务也生效了)orderService.a();</code></pre></li></ol><h2><span id="cap-定理与-base-理论"><strong>CAP</strong> <strong>定理与</strong> <strong>BASE</strong> <strong>理论</strong></span></h2><ol><li><p><strong>CAP</strong> <strong>定理</strong> </p><p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中</p><ul><li>一致性（Consistency）：<ul><li>在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本） </li></ul></li><li>可用性（Availability）<ul><li>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据 更新具备高可用性）</li></ul></li><li>分区容错性（Partition tolerance） <ul><li>大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。 分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务器放在美国，这就是两个区，它们之间可能无法通信。 </li></ul></li></ul><p>CAP 原则指的是，这三个要素最多只能同时实现两点，<strong>不可能三者兼顾</strong>。</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220103182053917.png" alt="image-20220103182053917"></p><p>一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，剩下的 C 和 A 无法同时做到。 </p><p>分布式系统中实现一致性的 raft 算法、paxos </p></li><li><p><strong>面临的问题</strong></p><p>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到 99.99999%（N 个 9）即保证 P 和 A，舍弃 C。</p></li><li><p><strong>BASE</strong> <strong>理论</strong> </p><p>是对 CAP 理论的延伸，思想是即使无法做到强一致性（CAP 的一致性就是强一致性），但可以采用适当的采取弱一致性，即<strong>最终一致性</strong>。</p><p>BASE 是指 ：</p><ul><li>基本可用（Basically Available）<ul><li>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性（例如响应时间、功能上的可用性），允许损失部分可用性。需要注意的是，基本可用绝不等价于系统不可用。<ul><li>响应时间上的损失：正常情况下搜索引擎需要在 0.5 秒之内返回给用户相应的查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了 1~2 秒。</li><li>功能上的损失：购物网站在购物高峰（如双十一）时，为了保护系统的稳定性，部分消费者可能会被引导到一个降级页面。 </li></ul></li></ul></li><li>软状态（ Soft State） <ul><li>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据会有多个副本，允许不同副本同步的延时就是软状态的体现。mysql replication 的异步复制也是一种体现。</li></ul></li><li>最终一致性（ Eventual Consistency）<ul><li>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</li></ul></li></ul></li><li><p><strong>强一致性、弱一致性、最终一致性</strong></p><p>从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是<strong>强一致性</strong>。如果能容忍后续的部分或者全部访问不到，则是<strong>弱一致性</strong>。如果经过一段时间后要求能访问到更新后的数据，则是<strong>最终一致性</strong></p></li></ol><h2><span id="分布式事务几种方案"><strong>分布式事务几种方案</strong></span></h2><ol><li><strong>2PC</strong> <strong>模式</strong> </li><li><strong>柔性事务-TCC事务补偿型方案</strong> </li><li><strong>柔性事务-最大努力通知型方案</strong></li><li><strong>柔性事务-可靠消息+最终一致性方案（异步确保型）</strong></li></ol><h2><span id="使用seata解决分布式事务">使用SEATA解决分布式事务</span></h2><p><a href="https://seata.io/zh-cn/docs/user/quickstart.html">https://seata.io/zh-cn/docs/user/quickstart.html</a></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220104103334489.png" alt="image-20220104103334489"></p><p>准备前提：所有微服务的数据库加入<code>undo_log</code>表</p><p>安装事务协调器<code>seata-server</code>:<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><ol><li><p>导入依赖  seata-all:0.7.1</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--seata--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>解压启动seata-server</p><p>  registry.conf：注册中心配置,修改type = “nacos”</p></li><li><p>所有用到分布式事务的微服务使用seata DataSourceProxy代理数据源(0.9以后默认，不用配置了)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>DataSourceProxy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 4/1/2022 上午 11:50 * @describe: * @vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySeataConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span> DataSourceProperties dataSourceProperties<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span>DataSourceProperties dataSourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HikariDataSource hikariDataSource <span class="token operator">=</span>        dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>HikariDataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>dataSourceProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      hikariDataSource<span class="token punctuation">.</span><span class="token function">setPoolName</span><span class="token punctuation">(</span>dataSourceProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>hikariDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>每个微服务,都必须导入 <code>registry.conf </code>和  <code>file.conf</code>，file.conf里边的名字必须个当前应用名一致</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">vgroup_mapping.gulimall-order-fescar-service-group</span> <span class="token punctuation">=</span> <span class="token attr-value">"default"</span></code></pre><p><img src="/2022/01/10/gulimall-bi-ji/image-20220104120702681.png" alt="image-20220104120702681"></p><p>不想改名字的话，有一个配置，也可以</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.alibaba.seata.tx-service-group</span><span class="token punctuation">=</span><span class="token attr-value">gulimall-order-fescar-service-group</span></code></pre></li><li><p>启动测试</p></li><li><p>给分布式大事务的入口标注@GlobalTransactional</p></li><li><p>每个远程的小事务@Transactional</p></li></ol><h2><span id="使用延时队列解决分布式事务">使用延时队列解决分布式事务</span></h2><p><img src="/2022/01/10/gulimall-bi-ji/image-20220104190808406.png" alt="image-20220104190808406"></p><p>订单服务</p><p>创建模型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Exchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>TopicExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 4/1/2022 下午 7:09 * @describe: * @vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMqConfig</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//监听过期队列</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"order.release.order. queue"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span>OrderEntity entity<span class="token punctuation">,</span> Channel channel<span class="token punctuation">,</span> Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到过期的订单信息，准备关闭订单"</span><span class="token operator">+</span>entity<span class="token punctuation">.</span><span class="token function">getOrderSn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 这些组件都会自动创建(RabbitMQ中没有)</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Queue <span class="token function">orderDelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// String name, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object></span>      <span class="token comment" spellcheck="true">// arguments</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*    x-dead-letter-exchange: order-event-exchange    x-dead-letter-routing-key: order.release.order    x-message-ttl: 60000     */</span>      arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> <span class="token string">"order-event-exchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> <span class="token string">"order.release.order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"order.delay.queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> queue<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Queue <span class="token function">orderReleaseOrderQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"order.release.order. queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> queue<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Exchange <span class="token function">orderEventExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// String name, boolean durable, boolean autoDelete, Map&lt;String, Object> arguments</span>      TopicExchange topicExchange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"order-event-exchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> topicExchange<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Binding <span class="token function">orderCreateOrderBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// String destination, Binding.DestinationType destinationType, String exchange, String</span>      <span class="token comment" spellcheck="true">// routingKey, Map&lt;String, Object> arguments</span>      Binding binding <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>         <span class="token string">"order.delay.queue"</span><span class="token punctuation">,</span>         Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>         <span class="token string">"order-event-exchange"</span><span class="token punctuation">,</span>         <span class="token string">"order.create.order"</span><span class="token punctuation">,</span>         null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> binding<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Binding <span class="token function">orderReleaseOrderBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Binding binding <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>         <span class="token string">"order.release.order. queue"</span><span class="token punctuation">,</span>         Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>         <span class="token string">"order-event-exchange"</span><span class="token punctuation">,</span>         <span class="token string">"order.release.order"</span><span class="token punctuation">,</span>         null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> binding<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>库存服务</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105104619442.png" alt="image-20220105104619442"></p><p>具体在代码里</p><h3><span id="保证消息可靠性">保证消息可靠性</span></h3><blockquote><p>如何保证消息可靠性-==消息丢失==</p></blockquote><ol><li>消息丢失<ul><li>消息发送出去，由于网络问题没有抵达服务器 <ul><li>做好容错方法（try-catch），发送消息可能会网络失败，失败后要有重试机制，可记录到数据库，采用定期扫描重发的方式</li><li>做好日志记录，每个消息状态是否都被服务器收到都应该记录 </li><li>做好定期重发，如果消息没有发送成功，定期去数据库扫描未成功的消息进行重发 </li></ul></li><li>• 消息抵达Broker，Broker要将消息写入磁盘（持久化）才算成功。此时Broker尚未持久化完成，宕机。<ul><li>publisher也必须加入确认回调机制，确认成功的消息，修改数据库消息状态。</li></ul></li><li>自动ACK的状态下。消费者收到消息，但没来得及消息然后宕机 <ul><li>一定开启手动ACK，消费成功才移除，失败或者没来得及处理就noAck并重新入队</li></ul></li></ul></li></ol><blockquote><p>如何保证消息可靠性-==消息重复==</p></blockquote><ol><li>消息重复<ul><li>消息消费成功，事务已经提交，ack时，机器宕机。导致没有ack成功，Broker的消息重新由unack变为ready，并发送给其他消费者 </li><li>消息消费失败，由于重试机制，自动又将消息发送出去</li><li>成功消费，ack时宕机，消息由unack变为ready，Broker又重新发送<ul><li>消费者的业务消费接口应该设计为<strong>幂等性</strong>的。比如扣库存有工作单的状态标志</li><li>使用<strong>防重表</strong>（redis/mysql），发送消息每一个都有业务的唯一标识，处理过就不用处理 </li><li>rabbitMQ的每一个消息都有redelivered字段，可以获取<strong>是否是被重新投递过来的</strong>，而不是第一次投递过来的</li></ul></li></ul></li></ol><blockquote><p>如何保证消息可靠性-==消息积压==</p></blockquote><ol><li>消息积压<ul><li>消费者宕机积压 </li><li>消费者消费能力不足积压</li><li>发送者发送流量太大<ul><li>上线更多的消费者，进行正常消费 </li><li>上线专门的队列消费服务，将消息先批量取出来，记录数据库，离线慢慢处理</li></ul></li></ul></li></ol><h1><span id="内网穿透">内网穿透</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105211855363.png" alt="image-20220105211855363"></p><hr><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105211906799.png" alt="image-20220105211906799"></p><hr><p><a href="https://i.xiaomy.net/#/">https://i.xiaomy.net/#/</a></p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105211927855.png" alt="image-20220105211927855"></p><hr><p>==nginx必须配置==</p><pre class=" language-bash"><code class="language-bash">listen       80<span class="token punctuation">;</span>server_name gulimall.com  *.gulimall.com  vywc7tu7.dongtaiyuming.net<span class="token punctuation">;</span>location /payed/ <span class="token punctuation">{</span>proxy_set_header Host order.gulimall.com<span class="token punctuation">;</span>proxy_pass http://gulimall<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/01/10/gulimall-bi-ji/image-20220106155949815.png" alt="image-20220106155949815"></p><h1><span id="定时任务和异步">定时任务和异步</span></h1><ol><li><p>@EnableScheduling开启定时任务功能</p><p>==自动配置类：TaskSchedulingAutoConfiguration==</p></li><li><p>@Scheduled开启定时任务</p><ul><li><p>spring中是由6位组成，没有第七位年</p></li><li><p>在周的位置，1-7分别是周一到周日</p></li><li><p>一般情况下，我们的定时任务不应该阻塞(默认是阻塞，会阻塞下一个定时任务,造成执行时间不一致)</p><ul><li>可以使用异步的方式，用自己的线程池</li></ul></li><li><p>支持定时任务线程池(默认里面只有一个连接，所以阻塞)，支持配置</p><ul><li><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.task.execution.pool.core-size</span><span class="token punctuation">=</span><span class="token attr-value">5</span></code></pre><p>不一定生效</p></li><li><p>让异步任务执行</p><p>@EnableAsync开启异步任务功能</p><p>==自动配置类：TaskExecutionAutoConfiguration==</p><p>里面默认大小是8个连接</p><p>@Async 这个方法是一个异步方法</p></li></ul></li></ul></li><li><p>解决：使用异步+定时任务来完成定时任务补阻塞功能</p></li></ol><h1><span id="分布式定时任务">分布式定时任务</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20220108165844144.png" alt="image-20220108165844144"></p><p>加入分布式锁</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220108165933306.png" alt="image-20220108165933306"></p><h1><span id="秒杀服务流量削峰">秒杀服务流量削峰</span></h1><p>使用redis和消息队列</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220105104036300.png" alt="image-20220109151246747"></p><h1><span id="整合sentinel">整合Sentinel</span></h1><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></p><ol><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>下载sentinel控制台</p><p>启动</p><pre class=" language-bash"><code class="language-bash">java -jar sentinel-dashboard-1.6.3.jar --server.port<span class="token operator">=</span>8333</code></pre></li><li><p>加入配置，配置控制台地址信息</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.sentinel.transport.dashboard</span><span class="token punctuation">=</span><span class="token attr-value">localhost:8333</span><span class="token attr-name">spring.cloud.sentinel.transport.port</span><span class="token punctuation">=</span><span class="token attr-value">8719</span></code></pre></li><li><p>在控制台调整参数，【默认所有的流控设置默认保存在内存中，重启失效】</p></li></ol><h2><span id="流控限流">流控/限流</span></h2><h3><span id="信息审计模块endpoint">信息审计模块Endpoint</span></h3><p>每个微服务都导入</p><ol><li><p>导入依赖</p><pre class=" language-XML"><code class="language-XML"><dependency>   <groupid>org.springframework.boot</groupid>   <artifactid>spring-boot-starter-actuator</artifactid></dependency></code></pre></li><li><p>暴露endpoint 路径</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span></code></pre></li><li><p>自定义流控返回</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>seckill<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>callback<span class="token punctuation">.</span>UrlBlockHandler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>callback<span class="token punctuation">.</span>WebCallbackManager<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>BlockException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/1/2022 下午 12:39 * @describe: 阻塞返回 * @vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeckillSentinelConfig</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">SeckillSentinelConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      WebCallbackManager<span class="token punctuation">.</span><span class="token function">setUrlBlockHandler</span><span class="token punctuation">(</span>         <span class="token keyword">new</span> <span class="token class-name">UrlBlockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blocked</span><span class="token punctuation">(</span>               HttpServletRequest httpServletRequest<span class="token punctuation">,</span>               HttpServletResponse httpServletResponse<span class="token punctuation">,</span>               BlockException e<span class="token punctuation">)</span>               <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>               R r <span class="token operator">=</span>                  R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>                  BizCodeEnum<span class="token punctuation">.</span>TO_MANY_REQUEST<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BizCodeEnum<span class="token punctuation">.</span>TO_MANY_REQUEST<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               httpServletResponse<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               httpServletResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               httpServletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2><span id="熔断降级">熔断降级</span></h2><p>保护Feign的远程调用</p><h4><span id="调用方熔断">调用方熔断：</span></h4><ol><li><p>导入依赖<code>spring-cloud-starter-openfeign</code>，还有<code>spring-cloud-starter-alibaba-sentinel</code>,我们的服务都导入了</p></li><li><p>配置文件打开 Sentinel 对 Feign 的支持<code>feign.sentinel.enabled=true</code></p></li><li><p>改代码</p><p>远程【可能会出现错误的调用，假设远程服务宕机】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>feign<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>fallback<span class="token punctuation">.</span>SeckillFeignServiceFallBcak<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 9/1/2022 上午 11:33 * @describe: * @vision */</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"gulimall-seckill"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> SeckillFeignServiceFallBcak<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SeckillFeignService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sku/seckill/{skuId}"</span><span class="token punctuation">)</span>  R <span class="token function">getSkuSeckillInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"skuId"</span><span class="token punctuation">)</span> Long skuId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>熔断【如果调用失败，就返回这个熔断方法】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>fallback<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>SeckillFeignService<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 10/1/2022 下午 1:38 * @describe: * @vision */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeckillFeignServiceFallBcak</span> <span class="token keyword">implements</span> <span class="token class-name">SeckillFeignService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> R <span class="token function">getSkuSeckillInfo</span><span class="token punctuation">(</span>Long skuId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"熔断方法调用。。。getSkuSeckillInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>TO_MANY_REQUEST<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BizCodeEnum<span class="token punctuation">.</span>TO_MANY_REQUEST<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h4><span id="调用方降级">调用方降级：</span></h4><p>手动加入降级策略：</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110135050091.png" alt="image-20220110135050091"></p><p>例：指定远程超过指定时间，就降级调用我自己的熔断</p><p>远程没有达到我的标准，我就降级，去执行我自己的策略</p><p>这些标准有RT、异常比例、异常数等</p><h4><span id="被调用方">被调用方：</span></h4><p>也可以指定流控和降级</p><p>使用场景：超大流量的时候，必须牺牲一些远程服务，就可以使用降级策略，远程过来的请求，我不执行业务，我直接降级返回我熔断的数据</p><p>全局考虑，一般不建议使用</p><h2><span id="自定义受保护的资源">自定义受保护的资源</span></h2><h3><span id="代码方式">代码方式:</span></h3><pre class=" language-JAVA"><code class="language-JAVA">try(Entry entry = SphU.entry("SeckillSkus")){   //业务...}catch(BlockException e){   log.info("资源被限流。。。");}</code></pre><p>控制台里会有SeckillSkus，我们可以对他进行限流和降级，如果不满足标准就会执行catch</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110142157595.png" alt="image-20220110142157595"></p><h3><span id="注解方式">注解方式</span></h3><p><code>@SentinelResource</code> 注解用来标识资源是否被限流、降级。</p><p><code>@SentinelResource</code> 还提供了其它额外的属性如 <code>blockHandler</code>，<code>blockHandlerClass</code>，<code>fallback</code> 用于表示限流或降级的操作（注意有方法签名要求），更多内容可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">Sentinel 注解支持文档</a>。</p><p>若不配置 <code>blockHandler</code>、<code>fallback</code> 等函数，则被流控降级时方法会直接抛出对应的 BlockException；若方法未定义 <code>throws BlockException</code> 则会被 JVM 包装一层 <code>UndeclaredThrowableException</code>。</p><blockquote><p>注：一般推荐将 <code>@SentinelResource</code> 注解加到服务实现上，而在 Web 层直接使用 Spring Cloud Alibaba 自带的 Web 埋点适配。Sentinel Web 适配同样支持配置自定义流控处理逻辑，参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6%E7%9A%84%E9%80%82%E9%85%8D#web-%E9%80%82%E9%85%8D">相关文档</a>。</p></blockquote><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>SeckillSkuRedisTo<span class="token operator">></span><span class="token function">blockHandler</span><span class="token punctuation">(</span>BlockException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"getCurrentSeckillSkusResource被限流了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"getCurrentSeckillSkusResource"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>SeckillSkuRedisTo<span class="token operator">></span> <span class="token function">getCurrentSeckillSkus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//业务</span><span class="token punctuation">}</span></code></pre><p>@SentinelResource标注这个保护的方法，如果没有达到一些标准(限流/降级策略)，就去执行blockHandler指定的熔断方法(这个方法参数和原方法参数一样，可以带一个默认的BlockException来获取异常原因)</p><p>blockHandler：针对于指定方法被降级的调用</p><p>fallback：抛出异常执行逻辑 </p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">注解支持</a></p><p>==无论是哪种方式，一定要配置被限流后的默认返回==</p><p>url请求可以设置统一返回 WebCallbackManager 上边限流有</p><h2><span id="网关流控">网关流控</span></h2><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81</a></p><ol><li><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-sentinel-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>启动网关</p></li><li><p>使用新版控制台可以感知到请求的路由</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110150204092.png" alt="image-20220110150204092"></p><p>可以做一些限制</p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110150329150.png" alt="image-20220110150329150"></p></li></ol><h2><span id="网关流控返回">网关流控返回</span></h2><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.gulimall.gateway.config;import com.alibaba.csp.sentinel.adapter.gateway.sc.callback.BlockRequestHandler;import com.alibaba.csp.sentinel.adapter.gateway.sc.callback.GatewayCallbackManager;import com.alibaba.fastjson.JSON;import com.lpc.common.exception.BizCodeEnum;import com.lpc.common.utils.R;import org.springframework.context.annotation.Configuration;import org.springframework.web.reactive.function.server.ServerResponse;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;/** * @author: lpc * @date: 10/1/2022 下午 3:12 * @describe: * @vision */@Configurationpublic class SentinelGagewayConfig {   //TODO 响应式编程  public SentinelGagewayConfig() {    GatewayCallbackManager.setBlockHandler(        new BlockRequestHandler() {          // 网关限流了就调用此回调          @Override          public Mono<serverresponse> handleRequest(              ServerWebExchange serverWebExchange, Throwable throwable) {            R error =                R.error(                    BizCodeEnum.TO_MANY_REQUEST.getCode(), BizCodeEnum.TO_MANY_REQUEST.getMsg());            String string = JSON.toJSONString(error);            Mono<serverresponse> body = ServerResponse.ok().body(Mono.just(string), String.class);            return body;          }        });  }}</serverresponse></serverresponse></code></pre><h1><span id="sleuthzipkin服务链路追踪">Sleuth+Zipkin服务链路追踪</span></h1><h2><span id="整合sleuth">整合Sleuth</span></h2><ol><li><p>服务提供者与消费者导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--链路追踪--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-sleuth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>打开 debug 日志 </p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">logging.level.org.springframework.cloud.openfeign</span><span class="token punctuation">:</span> <span class="token attr-value">debug </span><span class="token attr-name">logging.level.org.springframework.cloud.sleuth</span><span class="token punctuation">:</span> <span class="token attr-value">debug</span></code></pre></li><li><p>发起一次远程调用，观察控制台 </p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110160510595.png" alt="image-20220110160510595"></p><p>DEBUG [user-service,541450f08573fff5,541450f08573fff5,false]</p><p>user-service：服务名 </p><p>541450f08573fff5：是 TranceId，一条链路中，只有一个 TranceId </p><p>541450f08573fff5：是 spanId，链路中的基本工作单元 id </p><p>false：表示是否将数据输出到其他服务，true 则会把信息输出到其他可视化的服务上观察</p></li></ol><h2><span id="整合zipkin可视化观察">整合zipkin可视化观察</span></h2><ol><li><p>docker 安装 zipkin 服务器</p><pre class=" language-bash"><code class="language-bash">docker run -d -p 9411:9411 openzipkin/zipkin</code></pre></li><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>zipkin 依赖也同时包含了 sleuth，可以省略 sleuth 的引用</p></li><li><p>添加 zipkin 相关配置 </p><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110161758025.png" alt="image-20220110161758025"></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.zipkin.base-url</span><span class="token punctuation">=</span><span class="token attr-value">http://192.168.67.217:9411</span><span class="token attr-name">spring.zipkin.discovery-client-enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">spring.zipkin.sender.type</span><span class="token punctuation">=</span><span class="token attr-value">web</span><span class="token attr-name">spring.sleuth.sampler.probability</span><span class="token punctuation">=</span><span class="token attr-value">1</span></code></pre></li></ol><p><a href="http://192.168.67.217:9411/zipkin/">http://192.168.67.217:9411/zipkin/</a></p><h2><span id="追踪数据持久化">追踪数据持久化</span></h2><p><a href="https://github.com/openzipkin/zipkin#storage-component">https://github.com/openzipkin/zipkin#storage-component</a></p><p>通过 docker 的方式 </p><pre class=" language-bash"><code class="language-bash">docker run --env STORAGE_TYPE<span class="token operator">=</span>elasticsearch --env ES_HOSTS<span class="token operator">=</span>192.168.67.217:9200 openzipkin/zipkin-dependencies</code></pre><h1><span id="总结">总结</span></h1><p><img src="/2022/01/10/gulimall-bi-ji/image-20220110171227575.png" alt="image-20220110171227575"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2022/01/08/typora-jian-dan-shi-yong/"/>
      <url>/2022/01/08/typora-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1><span id="markdown学习">Markdown学习</span></h1><h2><span id="标题">标题</span></h2><h3><span id="三级标题">三级标题</span></h3><h4><span id="四级标题">四级标题</span></h4><p>使用快捷键：[ctrl+(0-6)]</p><h2><span id="字体">字体</span></h2><p><strong>ctrl+b粗体</strong></p><p><em>ctrl+i斜体</em></p><p><u>ctrl+u下划线</u></p><p><del>alt+shift+5删除线</del></p><h2><span id="引用">引用</span></h2><blockquote><p>学java,走上人生巅峰  </p></blockquote><p>【 &gt;+空格 或者 ctril+shift+q】</p><h2><span id="分割线">分割线</span></h2><hr><hr><p>【三个- 或者 三个*】</p><h2><span id="图片">图片</span></h2><pre class=" language-tex"><code class="language-tex">![](图片路径)或者ctrl+shift+i或者直接截图粘贴</code></pre><p><img src="https://img2.baidu.com/it/u=1110695959,2322594919&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg" alt="截图"></p><h2><span id="超链接">超链接</span></h2><p>【<a href></a> 或者 ctrl+k】</p><p><a href="https://www.bilibili.com/">点击跳转到b站</a></p><p>按ctrl打开</p><h2><span id="列表">列表</span></h2><p>【有序列表 ctrl+shift+[】</p><ol><li>A</li><li>B</li><li>C</li></ol><p>【无序列表 ctrl+shift+]】</p><ul><li>A</li><li>B</li><li>C</li></ul><h2><span id="表格">表格</span></h2><p>【ctrl+t】</p><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>1991.1.1</td></tr></tbody></table><h2><span id="代码">代码</span></h2><p>【ctrl+shift+k】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 文本工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2022/01/08/jvm/"/>
      <url>/2022/01/08/jvm/</url>
      
        <content type="html"><![CDATA[<h1><span id="jvm探究">JVM探究</span></h1><h2><span id="面试常见">面试常见：</span></h2><ul><li>请你谈谈你对JVM的理解? java8虚拟机和之前的变化更新?</li><li>什么是OOM，什么是栈溢出StackOverFlowError? 怎么分析? </li><li>JVM的常用调优参数有哪些? </li><li>内存快照如何抓取，怎么分析Dump文件？</li><li>谈谈JVM中，类加载器你的认识</li></ul><h2><span id="jvm的位置">JVM的位置</span></h2><p><img src="/2022/01/08/jvm/image-20211126152848661.png" alt="image-20211126152848661"></p><h2><span id="jvm的体系结构">JVM的体系结构</span></h2><p><img src="/2022/01/08/jvm/image-20211126154123790.png" alt="image-20211126154123790"></p><p>图 .java-&gt;.class的变化</p><p>百分之<strong>99的JVM调优都是在堆中调优</strong>，Java栈、本地方法栈、程序计数器是不会有垃圾存在的。</p><p><img src="/2022/01/08/jvm/image-20211126154421727.png" alt="image-20211126154421727"></p><h2><span id="类加载器">类加载器</span></h2><p><strong>作用：加载Class文件~</strong></p><p><img src="/2022/01/08/jvm/image-20211126160353174.png" alt="image-20211126160353174"></p><p>图 类在经过Class Loader之后的变化</p><ol><li>启动类(根)加载器  </li><li>扩展类加载器 </li><li>应用程序/系统加载器 </li><li>自定义类加载器</li></ol><h2><span id="双亲委派机制">双亲委派机制</span></h2><p>检查顺序从下至上，加载顺序从上到下。</p><p><img src="/2022/01/08/jvm/image-20211126163101723.png" alt="image-20211126163101723"></p><p>如果一个类加载器需要加载类，那么首先它会把这个类请求委派给父类加载器去完成，每一层都是如此。一直递归到顶层，当父加载器无法完成这个请求时，子类才会尝试去加载。</p><h2><span id="沙箱安全机制">沙箱安全机制</span></h2><p>Java安全模型的核心就是Java沙箱(sandbox) ,  什么是沙箱?沙箱是一个限制程序运行的环境。沙箱机制就是<strong>将Java代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问</strong>，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。  沙箱主要限制系统资源访问，那系统资源包括什么? CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。  所有的Java程序运行都可以指定沙箱，可以定制安全策略。  在Java中将执行程序分成本地代码和远程代码两种，本地代码默认视为可信任的，而远程代码则被看作是不受信的。对于授信的本地代码,可以访问一切本地资源。而对于非授信的远程代码在早期的Java实现中，安全依赖于沙箱Sandbox)机制。如下图所示JDK1.0安全模型</p><p><img src="/2022/01/08/jvm/image-20211126163559531.png" alt="image-20211126163559531"></p><p>图 JDK1.0安全模型</p><p> 但如此严格的安全机制也给程序的功能扩展带来障碍，比如当用户希望远程代码访问本地系统的文件时候，就无法实现。因此在后续的Java1.1版本中，针对安全机制做了改进，增加了安全策略，允许用户指定代码对本地资源的访问权限。如下图所示JDK1.1安全模型</p><p><img src="/2022/01/08/jvm/image-20211126163628041.png" alt="image-20211126163628041"></p><p>图 JDK1.1安全模型</p><p> 在Java1.2版本中，再次改进了安全机制，增加了代码签名。不论本地代码或是远程代码，都会按照用户的安全策略设定，由类加载器加载到虚拟机中权限不同的运行空间，来实现差异化的代码执行权限控制。如下图所示</p><p><img src="/2022/01/08/jvm/image-20211126163649772.png" alt="image-20211126163649772"></p><p>图 JDK1.6安全模型</p><p><strong>组成沙箱的基本组件</strong><br>●字节码校验器(bytecode verifier) :确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</p><p> ●类裝载器(class loader) :其中类装载器在3个方面对Java沙箱起作用  </p><ul><li><p> 它防止恶意代码去干涉善意的代码;  </p></li><li><p> 它守护了被信任的类库边界;  </p></li><li><p> 它将代码归入保护域,确定了代码可以进行哪些操作。  </p></li></ul><p>虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成， 每一个被装载的类将有一个名字，这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。  </p><p>类装载器采用的机制是双亲委派模式。  </p><p>1.从最内层JVM自带类加载器开始加载,外层恶意同名类得不到加载从而无法使用;  </p><p>2.由于严格通过包来区分了访问域,外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效。 </p><ul><li><p>存取控制器(access controller) :存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定,可以由用户指定。 </p></li><li><p>安全管理器(security manager) : 是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。 </p></li><li><p>安全软件包(security package) : java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括: </p></li></ul><ul><li><p> 安全提供者 </p></li><li><p> 消息摘要  </p></li><li><p>​    数字签名 </p></li><li><p>​    加密  </p></li><li><p>​    鉴别</p></li></ul><h2><span id="native">Native</span></h2><ul><li> native :凡是带了native关键字的，说明java的作用范围达不到了，回去调用底层c语言的库!</li><li> 会进入本地方法栈  调用本地方法本地接口 JNI (Java Native Interface)</li><li> JNI作用:开拓Java的使用，融合不同的编程语言为Java所用!最初: C、C++ </li><li> Java诞生的时候C、C++横行，想要立足，必须要有调用C、C++的程序 </li><li> 它在内存区域中专门开辟了一块标记区域: Native Method Stack，登记native方法 </li><li> 在最终执行的时候，加载本地方法库中的方法通过JNI </li><li> 例如：Java程序驱动打印机，管理系统，掌握即可，在企业级应用比较少  private native void start0(); </li><li> //调用其他接口:Socket. . WebService<del>. .http</del></li></ul><p><strong>Native Method Stack</strong><br> 它的具体做法是Native Method Stack中登记native方法，在( Execution Engine )执行引擎执行的时候加载Native Libraies。[本地库]</p><p><strong>Native Interface本地接口</strong><br> 本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序, Java在诞生的时候是C/C++横行的时候，想要立足，必须有调用C、C++的程序，于是就在内存中专门开辟了块区域处理标记为native的代码，它的具体做法是在Native Method Stack 中登记native方法,在( Execution Engine )执行引擎执行的时候加载Native Libraies。  目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间通信很发达，比如可以使用Socket通信,也可以使用Web Service等等，不多做介绍!</p><h2><span id="pc寄存器">PC寄存器</span></h2><p> 程序计数器: Program Counter Register </p><p> 每个线程都有一个程序计数器，是线程私有的，就是一个指针, 指向方法区中的方法字节码(用来存储指向像一条指令的地址， 也即将要执行的指令代码)，在执行引擎读取下一条指令, 是一个非常小的内存空间，几乎可以忽略不计</p><h2><span id="方法区method-area">方法区Method Area</span></h2><p>方法区是被所有线程共享,所有字段和方法字节码，以及一些特殊方法，如构造函数,接口代码也在此定义,简单说，所有定义的方法的信息都保存在该区域,此区域属于共享区间;  </p><p><strong>静态变量、常量、类信息(构造方法、接口定义)、运行时的常量池存在方法区中，但是实例变量存在堆内存中</strong></p><h2><span id="栈">栈</span></h2><p>栈:先进后出 </p><p>桶:后进先出 </p><p>队列:先进先出( FIFO : First Input First Output ) </p><p>栈:<strong>栈内存,主管程序的运行,生命周期和线程同步</strong>; <strong>线程结束，栈内存也就是释放,对于栈来说,不存在垃圾回收问题</strong> 一旦线程结束，栈就Over! </p><p>栈放什么东西：<strong>8大基本类型+对象引用+实例的方法</strong></p><p><strong>栈运行原理:栈帧</strong> 栈满了: StackOverflowError</p><p>栈帧图解 栈底部子帧指向上一个栈的方法 上一个栈的父帧指向栈底部方法：</p><p><img src="/2022/01/08/jvm/image-20211126200939380.png" alt="image-20211126200939380"></p><p>栈 堆 方法区交互关系：</p><p><img src="/2022/01/08/jvm/image-20211126195741076.png" alt="image-20211126195741076"></p><h2><span id="三种jvm">三种JVM</span></h2><ul><li><p>Sun公司HotSpot Java Hotspot™ 64-Bit Server VM (build 25.181-b13,mixed mode)</p><p><img src="/2022/01/08/jvm/image-20211126201732562.png" alt="image-20211126201732562"></p></li><li><p> BEA JRockit </p></li><li><p>IBM J9VM</p><p> 我们学习都是: Hotspot</p></li></ul><h2><span id="堆">堆</span></h2><p>Heap, <strong>一个JVM只有一个堆内存</strong>，堆内存的大小是可以调节的。 </p><p>类加载器读取了类文件后，一般会把什么东西放到堆中? 类, 方法，常量,变量~，保存我们所有引用类型的真实对象; </p><p>堆内存中还要细分为三个区域: </p><ul><li>新生区(伊甸园区) Young/New </li><li>养老区old </li><li>永久区Perm</li></ul><p>堆内存详细划分:</p><p><img src="/2022/01/08/jvm/image-20211126210515466.png" alt="image-20211126210515466"></p><p>GC垃圾回收,主要是在伊甸园区和养老区~ </p><p>假设内存满了,OOM,堆内存不够! java.lang.OutOfMemoryError:Java heap space </p><p>永久存储区里存放的都是Java自带的 例如lang包中的类 如果不存在这些，Java就跑不起来了 在JDK8以后，<strong>永久存储区改了个名字(元空间)</strong></p><p>堆内存溢出:</p><p><img src="/2022/01/08/jvm/image-20211126210758616.png" alt="image-20211126210758616"></p><h2><span id="新生区-老年区">新生区、老年区</span></h2><p>新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。</p><h3><span id="新生区">新生区</span></h3><ul><li>类:诞生和成长的地方，甚至死亡; </li><li>伊甸园，所有的对象都是在伊甸园区new出来的! </li><li>幸存者区(0,1)</li></ul><p> 重GC和轻GC：</p><p><img src="/2022/01/08/jvm/image-20211126211301542.png" alt="image-20211126211301542"></p><p><strong>伊甸园满了就触发轻GC，经过轻GC存活下来的就到了幸存者区，幸存者区满之后意味着新生区也满了，则触发重GC，经过重GC之后存活下来的就到了养老区。</strong> 真理:经过研究，99%的对象都是临时对象!|</p><h2><span id="永久区">永久区</span></h2><p><strong>这个区域常驻内存的。用来存放JDK自身携带的Class对象。Interface元数据，存储的是Java运行时的一些环境</strong>，这个区域不存在垃圾回收，关闭虚拟机就会释放内存</p><ul><li> jdk1.6之前:永久代,常量池是在方法区; </li><li>jdk1.7:永久代,但是慢慢的退化了，去永久代，常量池在堆中 </li><li>jdk1.8之后:无永久代,常量池在元空间</li></ul><p>JVM探究:</p><p><img src="/2022/01/08/jvm/image-20211126214302376.png" alt="image-20211126214302376"></p><p>元空间：逻辑上存在，物理上不存在 (因为存储在本地磁盘内) 所以最后并不算在JVM虚拟机内存中</p><h2><span id="堆内存调优">堆内存调优</span></h2><p>默认情况下: 分配的总内存 是电脑内存的1/4,而初始化的内存: 1/64</p><p>OOM:堆内存溢出</p><ol><li>尝试扩大堆内存看结果<ul><li>-Xms1024m -Xmx1024m -xx:+PrintGCDetails</li></ul></li><li>分析内存,看一下哪个地方出现了问题 (专业工具)</li></ol><p>在一个项目中,突然出现了OOM故障,那么该如何排除~研究为什么出错</p><ul><li>能够看到代码第几行出错:内存快照分析工具,MAT,Jprofiler</li><li>Dubug,一行行分析代码</li></ul><h3><span id="matjprogiler作用"><strong>MAT,Jprogiler作用:</strong></span></h3><ul><li>分析Dump内存文件,快速定位内存泄漏</li><li>获得堆中的数据</li><li>获得大的对象</li></ul><h3><span id="jprofiler安装过程"><strong>Jprofiler安装过程</strong></span></h3><p><a href="https://www.bilibili.com/video/BV1iJ411d7jS?p=9&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1iJ411d7jS?p=9&amp;spm_id_from=pageDriver</a></p><h3><span id="jprofiler使用"><strong>jprofiler使用</strong></span></h3><p>-Xms 设置初始化内存分配大小 1/64</p><p>-Xmx 设置最大分配内存,默认1/4</p><pre><code>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</code></pre><p><img src="/2022/01/08/jvm/image-20211126222814130.png" alt="image-20211126222814130"></p><p><img src="/2022/01/08/jvm/image-20211126222831181.png" alt="image-20211126222831181"></p><h2><span id="gc">GC</span></h2><p>GC:作用区域 堆+方法区</p><p>JVM在进行GC时，并不是对这三个区域统一回收。大部分时候，回收都是新生代~</p><ul><li>新生代</li><li>幸存区（form ， to）</li><li>老年区</li></ul><p>GC两种：轻GC（普通GC），重GC（全局GC）</p><p><strong>GC题目</strong></p><ul><li>JVM的内存模型和分区~详细到每个区放什么?</li><li>堆里面的分区有哪些? Eden,form,to,老年区,说说他们的特点?</li><li>GC的算法有哪些? 标记清除法 , 标记压缩 , 复制算法, 引用计数器, 怎么用的?</li><li>轻GC和重GC分别在什么时候发生?</li></ul><h2><span id="常用算法"><strong>常用算法</strong></span></h2><h3><span id="引用计数法"><strong>引用计数法</strong></span></h3><p><img src="/2022/01/08/jvm/image-20211126224431634.png" alt="image-20211126224431634"></p><h3><span id="复制算法"><strong>复制算法</strong></span></h3><p><img src="/2022/01/08/jvm/image-20211126225939278.png" alt="image-20211126225939278"></p><p><img src="/2022/01/08/jvm/image-20211126230421699.png" alt="image-20211126230421699"></p><ul><li>好处:没有内存的碎片</li><li>坏处:浪费了内存空间:多了一半空间永远是空 to.假设对象100%存活(极端情况)</li></ul><p><strong>复制算法最佳使用场景</strong>:对象存活度较低的时候:新生区;</p><h3><span id="标记清除算法"><strong>标记清除算法</strong></span></h3><p><img src="/2022/01/08/jvm/image-20211126230939034.png" alt="image-20211126230939034"></p><ul><li>优点:不需要额外的空间</li><li>缺点:两次扫描,严重浪费时间,会产生内存碎片</li></ul><h3><span id="标记压缩优化标记清除"><strong>标记压缩(优化标记清除)</strong></span></h3><p><img src="/2022/01/08/jvm/image-20211126231326610.png" alt="image-20211126231326610"></p><ul><li>三部曲:标记,清除.压缩</li></ul><h3><span id="如何选择四种算法">如何选择四种算法:</span></h3><p><strong>内存效率</strong>:复制算法&gt;标记清除算法&gt;标记压缩算法(时间复杂度)</p><p><strong>内存整齐度</strong>:复制算法=标记压缩算法&gt;标记清除算法</p><p><strong>内存利用率</strong>:标记压缩算法=标记清除算法&gt;复制算法</p><p>难道没有一个最优的算法吗?</p><p>答案:<strong>没有</strong>,没有最好的算法,只有最合适的算法—-&gt;GC:分带收集算法</p><p><strong>年轻代:</strong></p><ul><li>存活率低</li><li>复制算法</li></ul><p><strong>老年代：</strong></p><ul><li>区域大：存活率高</li><li>标记清除（内存碎片不是太多）+标记压缩混合实现</li></ul><h2><span id="jmm">JMM</span></h2><p><a href="https://blog.csdn.net/qq_33805483/article/details/104099089">JAVA面试题——JMM内存模型_Huntermax LC的博客-CSDN博客_jmm面试题</a></p><h3><span id="什么是jmm">什么是JMM？</span></h3><p>JMM ：（java Memory Model 缩写）java内存模型</p><h3><span id="他是干什么的">他是干什么的？</span></h3><p><img src="/2022/01/08/jvm/image-20211126232747637.png" alt="image-20211126232747637"></p><p>解决共享对象可见性的问题：volilate</p><h3><span id="他该如何学习">他该如何学习</span></h3><p>JMM ：抽象的概念，理论</p><p><img src="/2022/01/08/jvm/image-20211126232830203.png" alt="image-20211126232830203"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/01/08/docker-wei-wan/"/>
      <url>/2022/01/08/docker-wei-wan/</url>
      
        <content type="html"><![CDATA[<h1><span id="docker概述">Docker概述</span></h1><h2><span id="docker为什么出现">Docker为什么出现？</span></h2><ul><li>开发和运维两套环境，而环境配置十分麻烦。<br>如在Windows上开发，要发布到Linux上运行。Docker给以上问题提出了解决方案：<br>Java — Jar(环境）—打包项目带上环境（镜像）—Docker仓库（应用商店）—下载镜像—直接运行</li><li>Docker的思想来自于集装箱，核心思想：隔离。<br>即将应用打包装箱，每个箱子是互相隔离的，可以将服务器利用到极致。</li></ul><table><thead><tr><th>虚拟机</th><th>Docker</th></tr></thead><tbody><tr><td>linux centos原生镜像（一个电脑）</td><td>隔离镜像（最核心的环境 +jdk +mysql等)</td></tr><tr><td>需要开启多个虚拟机</td><td>运行镜像就可以了</td></tr><tr><td>几GB</td><td>几MB</td></tr></tbody></table><h3><span id="官方文档">官方文档</span></h3><blockquote><p><a href="https://docs.docker.com/">https://docs.docker.com/</a></p></blockquote><h3><span id="仓库地址">仓库地址</span></h3><blockquote><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p></blockquote><h2><span id="docker能做什么">Docker能做什么？</span></h2><h3><span id="传统虚拟机与docker对比">传统虚拟机与Docker对比</span></h3><p><img src="/2022/01/08/docker-wei-wan/image-20211203221343920.png" alt="image-20211203221343920"></p><h3><span id="docker的优点">Docker的优点</span></h3><ul><li>==不模拟完整的操作系统==，系统内核（kernel）非常小，更少的抽象层（GuestOS：如Centos）</li><li>容器内的应用直接运行在宿主机的内核，容器本身没有自己的内核，也没有虚拟硬件。</li><li>每个容器相互隔离，内部都有属于自己的文件系统，互不影响。</li></ul><h3><span id="docker实现devops开发-运维">Docker实现DevOps（开发、运维）</span></h3><ul><li>应用更快速的交付和部署<br>打包镜像发布测试，一键运行；不再需要写大量帮助文档，安装程序</li><li>更便捷的升级和扩缩容？<br>部署应用就和搭积木一样</li><li>更简单的系统运维<br>开发和测试的环境高度一致</li><li>更高效的计算资源利用<br>内核级别的虚拟化，可以在一个物理机上运行很多的容器实例，服务器性能可以被压榨到极致。</li></ul><h1><span id="docker安装">Docker安装</span></h1><h2><span id="docker的基本组成">Docker的基本组成</span></h2><p><img src="/2022/01/08/docker-wei-wan/image-20211203221425267.png" alt="image-20211203221425267"></p><ul><li>镜像（image）：镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件。它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。相当于一个模板，通过这个模板来创建容器服务，可以通过一个镜像创建多个容器。</li><li>容器（container）：独立运行一个或一组应用/基本命令有：启动，停止，删除等/可理解为一个简单的linux系统。</li><li>仓库（repository）：存放镜像的地方（公有/私有）</li></ul><h2><span id="安装docker">安装Docker</span></h2><blockquote><p>环境</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#系统内核是3.10以上都</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># uname -r</span>3.10.0-1160.el7.x86_64</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#系统版本</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/os-release </span>NAME<span class="token operator">=</span><span class="token string">"CentOS Linux"</span>VERSION<span class="token operator">=</span><span class="token string">"7 (Core)"</span>ID<span class="token operator">=</span><span class="token string">"centos"</span>ID_LIKE<span class="token operator">=</span><span class="token string">"rhel fedora"</span>VERSION_ID<span class="token operator">=</span><span class="token string">"7"</span>PRETTY_NAME<span class="token operator">=</span><span class="token string">"CentOS Linux 7 (Core)"</span>ANSI_COLOR<span class="token operator">=</span><span class="token string">"0;31"</span>CPE_NAME<span class="token operator">=</span><span class="token string">"cpe:/o:centos:centos:7"</span>HOME_URL<span class="token operator">=</span><span class="token string">"https://www.centos.org/"</span>BUG_REPORT_URL<span class="token operator">=</span><span class="token string">"https://bugs.centos.org/"</span>CENTOS_MANTISBT_PROJECT<span class="token operator">=</span><span class="token string">"CentOS-7"</span>CENTOS_MANTISBT_PROJECT_VERSION<span class="token operator">=</span><span class="token string">"7"</span>REDHAT_SUPPORT_PRODUCT<span class="token operator">=</span><span class="token string">"centos"</span>REDHAT_SUPPORT_PRODUCT_VERSION<span class="token operator">=</span><span class="token string">"7"</span></code></pre><blockquote><p>安装</p></blockquote><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true">#1卸载旧的版本</span> <span class="token function">sudo</span> yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine <span class="token comment" spellcheck="true">#2需要都安装包</span> yum <span class="token function">install</span> -y yum-utils <span class="token comment" spellcheck="true">#3设置镜像都仓库</span> yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class="token comment" spellcheck="true">#更新yum索引</span> yum makecache fast <span class="token comment" spellcheck="true">#4安装docker相关都 docker-ce 社区版 ee企业版</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io <span class="token comment" spellcheck="true">#5启动</span> systemctl start docker <span class="token comment" spellcheck="true">#查看版本</span> docker version</code></pre><p><img src="/2022/01/08/docker-wei-wan/image-20211203233145061.png" alt="image-20211203233145061"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#7helloworld</span>docker run hello-world</code></pre><p><img src="/2022/01/08/docker-wei-wan/image-20211203233340101.png" alt="image-20211203233340101"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#8查看下载的helloworld的镜像</span> docker images  <span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    feb5d9fea6a5   2 months ago   13.3kB</code></pre><p>了解：卸载docker</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#1 卸载依赖</span>yum remove docker-ce docker-ce-cli containerd.io<span class="token comment" spellcheck="true">#2 删除资源</span><span class="token function">rm</span> -rf /var/lib/docker <span class="token comment" spellcheck="true">#默认工作路径</span><span class="token function">rm</span> -rf /var/lib/containerd</code></pre><blockquote><p>阿里云镜像加速</p></blockquote><p><img src="/2022/01/08/docker-wei-wan/image-20211203234251906.png" alt="image-20211203234251906"></p><p>配置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/Docker<span class="token punctuation">(</span>未完<span class="token punctuation">)</span>/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://i9mrrdt7.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><h2><span id="docker运行原理">Docker运行原理</span></h2><p><img src="/2022/01/08/docker-wei-wan/image-20211204085305456.png" alt="image-20211204085305456"></p><h2><span id="底层原理">底层原理</span></h2><blockquote><p><strong>Docker是怎么工作的？</strong></p></blockquote><p>Docker是一个<strong>Client-Server结构</strong>的系统，Server以守护进程运行在主机上。通过Socket从客户端进行访问。</p><p>Docker-Server接受到Docker-Clent的指令，就会执行</p><p><img src="/2022/01/08/docker-wei-wan/image-20211204085911889.png" alt="image-20211204085911889"></p><blockquote><p><strong>Docker为什么比vm快？</strong></p></blockquote><ol><li><p>Docker有着比虚拟更少的抽象层</p><p><img src="/2022/01/08/docker-wei-wan/image-20211204090059690.png" alt="image-20211204090059690"></p></li><li><p>docker用的是宿主机的内核，vm需要Guest OS</p></li></ol><p>所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统，避免引导。</p><p>虚拟机加载Guest OS，分钟级别。docker利用宿主机的操作系统，没有这个过程，秒级！</p><p><img src="/2022/01/08/docker-wei-wan/image-20211204090530567.png" alt="image-20211204090530567"></p><h1><span id="docker的常用命令">Docker的常用命令</span></h1><h2><span id="帮助命令">帮助命令</span></h2><pre class=" language-bash"><code class="language-bash">docker version           <span class="token comment" spellcheck="true">#dacker版本信息</span>docker info              <span class="token comment" spellcheck="true"># 系统信息，包括镜像和容器的数量 详细</span>docker --help            <span class="token comment" spellcheck="true"># 帮助信息</span></code></pre><p>帮助文档地址：<a href="https://docs.docker.com/engine/reference/commandline/Docker(%E6%9C%AA%E5%AE%8C)/">https://docs.docker.com/engine/reference/commandline/Docker(未完)/</a></p><p>Docker采用联合文件系统，不同镜像的相同文件无需再次下载：</p><h2><span id="镜像命令">镜像命令</span></h2><blockquote><p><strong>docker images 查看所有本地的镜像</strong></p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    feb5d9fea6a5   2 months ago   13.3kB<span class="token comment" spellcheck="true">#REPOSITORY 仓库源</span><span class="token comment" spellcheck="true">#TAG        镜像的标签</span><span class="token comment" spellcheck="true">#IMAGE ID   镜像id</span><span class="token comment" spellcheck="true">#CREATED    镜像创建时间</span><span class="token comment" spellcheck="true">#SIZE       镜像大小</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images --help</span>Usage:  docker images <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>List imagesOptions:  -a, --all             Show all images <span class="token punctuation">(</span>default hides intermediate images<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#所有镜像</span>      --digests         Show digests  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print images using a Go template      --no-trunc        Don't truncate output  -q, --quiet           Only show image IDs <span class="token comment" spellcheck="true">#只显示id</span></code></pre><blockquote><p><strong>docker search搜索镜像</strong></p></blockquote><p><img src="/2022/01/08/docker-wei-wan/image-20211204092314231.png" alt="image-20211204092314231"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#可选项 过滤</span>--filter<span class="token operator">=</span>STARS<span class="token operator">=</span>3000 <span class="token comment" spellcheck="true">#STARS大于3000的</span></code></pre><p><img src="/2022/01/08/docker-wei-wan/image-20211204092441801.png" alt="image-20211204092441801"></p><blockquote><p><strong>docker pull 下载镜像</strong></p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull --help</span>Usage:  docker pull <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span>Pull an image or a repository from a registryOptions:  -a, --all-tags                Download all tagged images <span class="token keyword">in</span> the repository      --disable-content-trust   Skip image verification <span class="token punctuation">(</span>default true<span class="token punctuation">)</span>      --platform string         Set platform <span class="token keyword">if</span> server is multi-platform capable  -q, --quiet                   Suppress verbose output</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#下载镜像 默认最新版</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql</span>Using default tag: latest <span class="token comment" spellcheck="true">#默认最新版</span>latest: Pulling from library/mysqlffbb094f4f9e: Pull complete  <span class="token comment" spellcheck="true"># 分层下载，docker image的核心 联合文件系统</span>df186527fc46: Pull complete fa362a6aa7bd: Pull complete 5af7cb1a200e: Pull complete 949da226cc6d: Pull complete bce007079ee9: Pull complete eab9f076e5a3: Pull complete 8a57a7529e8d: Pull complete b1ccc6ed6fc7: Pull complete b4af75e64169: Pull complete 3aed6a9cd681: Pull complete 23390142f76f: Pull complete Digest: sha256:ff9a288d1ecf4397967989b5d1ec269f7d9042a46fc8bc2c3ae35458c1a26727<span class="token comment" spellcheck="true">#签名</span>Status: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest<span class="token comment" spellcheck="true"># 真实地址</span><span class="token comment" spellcheck="true">#docker pull mysql  等价  docker pull mysql docker.io/library/mysql:latest</span><span class="token comment" spellcheck="true">#指定版本下载</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql:5.7</span>5.7: Pulling from library/mysqlffbb094f4f9e: Already exists df186527fc46: Already exists fa362a6aa7bd: Already exists 5af7cb1a200e: Already exists 949da226cc6d: Already exists bce007079ee9: Already exists eab9f076e5a3: Already exists c7b24c3f27af: Pull complete 6fc26ff6705a: Pull complete bec5cdb5e7f7: Pull complete 6c1cb25f7525: Pull complete Digest: sha256:d1cc87a3bd5dc07defc837bc9084f748a130606ff41923f46dec1986e0dc828dStatus: Downloaded newer image <span class="token keyword">for</span> mysql:5.7docker.io/library/mysql:5.7</code></pre><p><img src="/2022/01/08/docker-wei-wan/image-20211204093406822.png" alt="image-20211204093406822"></p><blockquote><p><strong>docker rmi 删除镜像</strong></p></blockquote><p><img src="/2022/01/08/docker-wei-wan/image-20211204093552184.png" alt="image-20211204093552184"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#根据id删除镜像 docker rmi -f id            #rmi：remove image</span><span class="token comment" spellcheck="true">#删除多个镜像 docker rmi -f id id id</span><span class="token comment" spellcheck="true">#批量删除镜像 docker rmi -f $(docker images -aq )#-qa所有镜像id</span></code></pre><h2><span id="容器命令">容器命令</span></h2><p><strong>说明：我们有了镜像才可以创建容器，下载一个centos镜像来测试学习</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull centos</span>Using default tag: latestlatest: Pulling from library/centosa1d0c7532777: Pull complete Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177Status: Downloaded newer image <span class="token keyword">for</span> centos:latestdocker.io/library/centos:latest</code></pre><p><strong>新建容器并启动</strong></p><pre class=" language-bash"><code class="language-bash">docker run<span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image<span class="token comment" spellcheck="true">#参数说明</span>--name<span class="token operator">=</span><span class="token string">"Name"</span> <span class="token comment" spellcheck="true">#容器名字 tomcat01 tomcat02 用来区分容器</span>-d  <span class="token comment" spellcheck="true">#后台方式运行</span>-i-t  <span class="token comment" spellcheck="true">#-i -t使用交互方式运行，进入容器查看内容</span>-p  <span class="token comment" spellcheck="true">#指定容器都端口</span>   -p ip:主机端口:容器端口   -p 主机端口:容器端口<span class="token punctuation">(</span>常用<span class="token punctuation">)</span>   -p 容器端口   容器端口-P  <span class="token comment" spellcheck="true">#随机指定端口</span></code></pre><p>启动进入容器</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED        SIZEcentos       latest    5d0da3dc9764   2 months ago   231MB<span class="token comment" spellcheck="true">#进入</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it centos /bin/bash </span><span class="token punctuation">[</span>root@7e56a6cea1e3 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>bin  etc   lib      lost+found  mnt  proc  run   srv  tmp  vardev  home  lib64  media       opt  root  sbin  sys  usr <span class="token comment" spellcheck="true">#退出</span><span class="token punctuation">[</span>root@7e56a6cea1e3 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit      </span><span class="token keyword">exit</span></code></pre><p>列出所有正在运行都容器</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#列出当前正在运行都容器</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps </span>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span class="token comment" spellcheck="true">#+曾经运行过的</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -a </span><span class="token comment" spellcheck="true">#-n=?  </span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -a -n=1 #显示一个</span>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                     PORTS     NAMES7e56a6cea1e3   centos    <span class="token string">"/bin/bash"</span>   4 minutes ago   Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> 4 minutes ago             objective_babbage<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -aq #曾经运行过的 id</span>7e56a6cea1e3e12f46d4a3ca2d927293a81ce4a2cf912c7a</code></pre><p>退出容器</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span>         <span class="token comment" spellcheck="true">#直接停止退出</span>ctrl+P+Q     <span class="token comment" spellcheck="true">#不停止退出 快捷键</span></code></pre><p>删除容器</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">rm</span> 容器id       <span class="token comment" spellcheck="true">#删除一个</span>docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span> <span class="token comment" spellcheck="true">#删除全部容器</span>docker <span class="token function">ps</span> -a -q <span class="token operator">|</span><span class="token function">xargs</span> docker <span class="token function">rm</span> <span class="token comment" spellcheck="true">#删除所有容器</span></code></pre><p><strong>启动停止容器的操作</strong></p><pre class=" language-bash"><code class="language-bash">docker start 容器id  <span class="token comment" spellcheck="true">#启动</span>docker restart      <span class="token comment" spellcheck="true">#重启</span>docker stop         <span class="token comment" spellcheck="true">#停止当前正在运行的容器</span>docker <span class="token function">kill</span>         <span class="token comment" spellcheck="true">#强制停止</span></code></pre><h2><span id="其他常用命令">其他常用命令</span></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#后台启动 -d</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d centos</span>bfc0b10e1406b7a54d58bc8e9a33a8fc07c722655a97491d96c4315e03e48eee<span class="token comment" spellcheck="true">#发现并没有正在运行</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps </span>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span class="token comment" spellcheck="true">#常见都坑：docker 容器使用后台运行 就必须要有一个前台进程，docker发现没有应用，就会自动停止</span><span class="token comment" spellcheck="true">#nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就没有程序了</span></code></pre><p><strong>查看日志</strong></p><pre class=" language-bash"><code class="language-bash">容器内输入：docker logs -tf --tail 条数 容器id <span class="token comment" spellcheck="true">#查看容器日志</span>docker logs -tf 容器id <span class="token comment" spellcheck="true">#全部</span></code></pre><p><strong>查看容器中进程信息</strong></p><p>docker top 容器id</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it centos /bin/bash</span><span class="token punctuation">[</span>root@93c5e4c77a8c /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES93c5e4c77a8c   centos    <span class="token string">"/bin/bash"</span>   9 seconds ago   Up 8 seconds             ecstatic_visvesvaraya<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker top 93c5e4c77a8c #查看信息</span>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                64999               64981               0                   10:33               ?                   00:00:00            /bin/bash</code></pre><p><strong>查看容器元数据</strong></p><p>==docker inspect== 容器id</p><p><img src="/2022/01/08/docker-wei-wan/image-20211204103624348.png" alt="image-20211204103624348"></p><p><strong>进入当前正在运行都容器</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#我们通常容器都是使用后台方式运行，需要进入容器，修改一些配置</span><span class="token comment" spellcheck="true">#命令</span>docker <span class="token function">exec</span> -it 容器id bashshell  <span class="token comment" spellcheck="true">#交互执行</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES93c5e4c77a8c   centos    <span class="token string">"/bin/bash"</span>   6 minutes ago   Up 6 minutes             ecstatic_visvesvaraya<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it 93c5e4c77a8c /bin/bash</span><span class="token punctuation">[</span>root@93c5e4c77a8c /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#方式二 直接进入当前命令行</span>docker attach 容器id<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES93c5e4c77a8c   centos    <span class="token string">"/bin/bash"</span>   8 minutes ago   Up 8 minutes             ecstatic_visvesvaraya<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker attach  93c5e4c77a8c </span><span class="token punctuation">[</span>root@93c5e4c77a8c /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#区别</span><span class="token comment" spellcheck="true">#docker exec 进入容器后开启一个新的终端 常用</span><span class="token comment" spellcheck="true">#docker attach 进入容器当前正在执行的终端！不会开启新的终端</span></code></pre><p><strong>拷贝容器文件到宿主机</strong></p><p>docker cp</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker attach f007d1d8f220 #进入容器</span><span class="token punctuation">[</span>root@f007d1d8f220 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token punctuation">[</span>root@f007d1d8f220 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd home/</span><span class="token punctuation">[</span>root@f007d1d8f220 home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token punctuation">[</span>root@f007d1d8f220 home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch test.java #创建文件</span><span class="token punctuation">[</span>root@f007d1d8f220 home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>test.java<span class="token punctuation">[</span>root@f007d1d8f220 home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit</span><span class="token keyword">exit</span><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker cp f007d1d8f220:/home/test.java /home #从容器中复制文件到宿主机</span><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll  #查看</span>总用量 4drwx------. 15 <span class="token function">lpc</span>  <span class="token function">lpc</span>  4096 11月  8 14:35 <span class="token function">lpc</span>-rw-r--r--.  1 root root    0 12月  4 10:47 test.java<span class="token comment" spellcheck="true">#现在手动，未来我们可以使用-v卷技术，可以实现自动</span></code></pre><h2><span id="小结">小结</span></h2><p><img src="/2022/01/08/docker-wei-wan/image-20211204090846807.png" alt="image-20211204090846807"></p><pre class=" language-shell"><code class="language-shell">attach      Attach to a running container            # 当前shell下attach连接指定运行镜像build       Build an image from a Dockerfile         # 通过Dockerfile定制镜像commit      Create a new image from a container changes   #提交当前容器为新镜像cp          Copy files/folders from the containers filesystem to the host path   # 从容器中拷贝指定文件或者目录到宿主机中create      Create a new container                   # 创建一个新的容器，同run，但不启动容器diff        Inspect changes on a container‘s filesystem   # 查看docker容器变化events      Get real time events from the server     # 从docker服务获取容器实时事件exec        Run a command in an existing container   # 在已存在的容器上运行命令export      Stream the contents of a container as a tar archive  # 导出容器的内容流作为一个tar归档文件[对应import]history     Show the history of an image             # 展示一个镜像形成历史images      List images                              # 列出系统当前镜像import      Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]info        Display system-wide information          # 显示系统相关信息inspect     Return low-level information on a container   # 查看容器详细信息kill        Kill a running container                 # kill指定docker容器load        Load an image from a tar archive         # 从一个tar包中加载一个镜像[对应save]login       Register or Login to the docker registry server  # 注册或者登陆一个docker源服务器logout      Log out from a Docker registry server    # 从当前Docker registry 退出logs        Fetch the logs of a container  # 输出当前容器日志信息port        Lookup the public-facting port which is NAT-ed to PRIVATE_PORT   # 查看映射端口对应的容器内部源端口pause       Pause all processes within a container   # 暂停容器ps          List containers                          # 列出容器列表pull        Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像push        Push an image or a repository to the docker registry server   # 推送指定镜像或者库镜像至docker源服务器restart     Restart a running container              # 重启运行的容器rm          Remove one or more containers            # 移除一个或者多个容器rmi         Remove one or more images                # 移除一个或者多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可以继续或 -f 强制删除]run         Run a command in a new container         # 创建一个新的容器并运行一个命令save        Save an image to a tar archive           # 保存一个镜像为一个tar包[对应load]search      Search for an image on the Docker Hub    # 在docker hub 中搜索镜像start       Start a stopped containers               # 启动容器stop        Stop a running containers                # 停止容器tag         Tag an image into a repository           # 给源中镜像大标签top         Lookup the running processes of a container   # 查看容器中运行的进程信息unpause     Unpause a paused container               # 取消暂停容器versiohn    Show the docker version information      # 查看docker版本号wait        Blocke until a container stops, then print its exit code # 截取容器停止时的退出状态值</code></pre><p>具体建议百度:<a href="https://www.baidu.com/s?tn=59044660_hao_pg&amp;ie=utf-8&amp;wd=docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8">docker命令</a></p><h2><span id="作业">作业</span></h2><blockquote><p>安装nginx</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#搜索nginx </span>docker search nginx<span class="token comment" spellcheck="true">#下载</span>docker pull nginx<span class="token comment" spellcheck="true">#启动</span><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d --name nginx01 -p 3344:80 nginx</span>b6c9414cfb3cb47c9998dc7f56c798cd88512f614ea53ceb80084f1bb3b2a4b8<span class="token comment" spellcheck="true">#测试</span><span class="token punctuation">[</span>root@DTXG home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl localhost:3344</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">#进入容器</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMESb6c9414cfb3c   nginx     <span class="token string">"/docker-entrypoint.…"</span>   6 minutes ago   Up 6 minutes   0.0.0.0:3344-<span class="token operator">></span>80/tcp, :::3344-<span class="token operator">></span>80/tcp   nginx01<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it nginx01 /bin/bash #进入容器</span>root@b6c9414cfb3c:/<span class="token comment" spellcheck="true"># whereis nginx</span>nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginxroot@b6c9414cfb3c:/<span class="token comment" spellcheck="true"># cd /etc/nginx/  </span>root@b6c9414cfb3c:/etc/nginx<span class="token comment" spellcheck="true"># ls   #开到nginx的配置</span>conf.d        mime.types  nginx.conf     uwsgi_paramsfastcgi_params    modules     scgi_params<span class="token comment" spellcheck="true">#停止容器</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMESb6c9414cfb3c   nginx     <span class="token string">"/docker-entrypoint.…"</span>   10 minutes ago   Up 10 minutes   0.0.0.0:3344-<span class="token operator">></span>80/tcp, :::3344-<span class="token operator">></span>80/tcp   nginx01<span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker stop b6c9414cfb3c  #停止容器</span>b6c9414cfb3c</code></pre><p>记得开放端口</p><p><img src="/2022/01/08/docker-wei-wan/image-20211204112817196.png" alt="image-20211204112817196"></p><p>外面访问<a href="http://192.168.67.217:3344/">Welcome to nginx!</a></p><p><img src="/2022/01/08/docker-wei-wan/image-20211204112913741.png" alt="image-20211204112913741"></p><p>思考问题：我们每次改动nginx配合文件，都需要进入容器内部？十分麻烦</p><p>我们可以在容器外部提供一个映射路径，实现外部修改，内部自动同步？</p><p>-v卷技术</p><blockquote><p>安装tomcat</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#官方的使用</span>docker run -it --rm tomcat:9.0<span class="token comment" spellcheck="true">#我们之前的启动都是后台，停止之后，容器还可以查到，</span><span class="token comment" spellcheck="true">#docker run -it --rm ，一般用来测试，用完就删</span><span class="token comment" spellcheck="true">#下载</span>docker pull tomcat:9.0<span class="token comment" spellcheck="true">#启动</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 3355:8080 --name tomcat01 tomcat</span>de15b848175942fed8fd5c07b5b7e01aa984555a849ea10c37e686a1d8391076<span class="token comment" spellcheck="true">#访问网址发现404</span><span class="token comment" spellcheck="true">#进入容器</span><span class="token punctuation">[</span>root@DTXG ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat01 /bin/bash</span>root@de15b8481759:/usr/local/tomcat<span class="token comment" spellcheck="true"># cd webapps</span>root@de15b8481759:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># ls -l</span>total 0<span class="token comment" spellcheck="true">#webapps 没有东西 linux的命令也少了</span><span class="token comment" spellcheck="true">#原因：阿里云镜像原因，默认最小镜像，所有不必要的都剔除了，保证最小可运行的环境</span>root@de15b8481759:/usr/local/tomcat<span class="token comment" spellcheck="true"># cp -r webapps.dist webapps</span><span class="token comment" spellcheck="true">#再次访问 成功</span></code></pre><blockquote><p>部署es+kibana</p></blockquote><pre class=" language-shell"><code class="language-shell">#es 暴露的端口非常多#es 十分耗内存#es 的数据一般需要放置到安全的目录！挂载#--net somenetwork ? 网络配置#下载启动docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.6.2#查看[root@DTXG ~]# curl localhost:9200{  "name" : "a3f5c919d106",  "cluster_name" : "docker-cluster",  "cluster_uuid" : "e6PvfA7sSHaes8Afauxl_w",  "version" : {    "number" : "7.6.2",    "build_flavor" : "default",    "build_type" : "docker",    "build_hash" : "ef48eb35cf30adf4db14086e8aabd07ef6fb113f",    "build_date" : "2020-03-26T06:34:37.794943Z",    "build_snapshot" : false,    "lucene_version" : "8.4.0",    "minimum_wire_compatibility_version" : "6.8.0",    "minimum_index_compatibility_version" : "6.0.0-beta1"  },  "tagline" : "You Know, for Search"}#docker stats 查看docker容器内存消耗#增加内存限制 -e 环境配置docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.6.2</code></pre><p><img src="/2022/01/08/docker-wei-wan/image-20220122102704327.png" alt="image-20220122102704327"></p><p>加入限制后：</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122102617970.png" alt="image-20220122102617970"></p><blockquote><p>使用kibana连接es?</p></blockquote><p><img src="/2022/01/08/docker-wei-wan/image-20220122103051056.png" alt="image-20220122103051056"></p><h3><span id="可视化">可视化</span></h3><ul><li><p>portainer(先用)</p><pre class=" language-shell"><code class="language-shell">docker run -d -p 8088:9000 \--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</code></pre></li><li><p>Rancher(CI/CD再使用)</p></li></ul><h4><span id="什么是portainer">什么是portainer?</span></h4><p>Docker图形化界面管理工具！提供一个后台面板供我们操作！</p><p>访问测试：外网8088：<a href="http://192.168.67.217:8088/#/init/admin">http://192.168.67.217:8088/#/init/admin</a></p><p><img src="/2022/01/08/docker-wei-wan/image-20220122103803990.png" alt="image-20220122103803990"></p><p>设置密码12345678,选择本地</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122103903354.png" alt="image-20220122103903354"></p><p>进入</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122104034720.png" alt="image-20220122104034720"></p><h1><span id="docker镜像详解">Docker镜像详解</span></h1><h2><span id="镜像是什么">镜像是什么</span></h2><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件。</p><p>所有的应用，直接打包docker镜像，就可以直接跑起来！</p><p>如何得到镜像：</p><ul><li>从远程仓库下载</li><li>拷贝</li><li>自己制作一个镜像 DockerFile</li></ul><h2><span id="docker镜像加载原理">Docker镜像加载原理</span></h2><blockquote><p>UnionFs （联合文件系统)</p></blockquote><p>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像</p><p><strong>特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加 kernel, Linux刚启动时会加载bootfs文件系统，在 Docker镜像的最底层是 bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122104300326-16428194595391.png" alt="image-20220122104300326"></p><p>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122105349733.png" alt="image-20220122105349733"></p><p>对于一个精简的OS,rootfs可以很小，只需要包合最基本的命令，工具和程序库就可以了，因为底层直接用Host(本机)的kernel，自己只需要提供rootfs就可以了。</p><p>由此可见对于不同的Linux发行版， boots基本是一致的， rootfs会有差別，因此不同的发行版可以公用bootfs.</p><p>==虚拟机是分钟级别，容器是秒级！==</p><h2><span id="分层理解">分层理解</span></h2><blockquote><p>分层的镜像</p></blockquote><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122105650483.png" alt="image-20220122105650483"></p><p>思考：</p><p>为什么Docker镜像要采用这种分层的结构呢？</p><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层的方式可以通过<code>docker image inspect name</code>命令</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122110638465.png" alt="image-20220122110638465"></p><p><strong>理解：</strong></p><p> 所有的 Docker镜像都起始于一个基础镜像层，当进行修改或培加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，<br>就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创健第三个镜像层该像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122110814639.png" alt="image-20220122110814639"></p><p> 在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122110837407.png" alt="image-20220122110837407"></p><p> 上图中的镜像层跟之前图中的略有区別，主要目的是便于展示文件<br>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122110955319.png" alt="image-20220122110955319"></p><p> 这种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统</p><p>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于 Linux中对应的件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW [1]。</p><p>下图展示了与系统显示相同的三层镜像。所有镜像层堆并合井，对外提供统一的视图</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122111141470.png" alt="image-20220122111141470"></p><blockquote><p>特点</p></blockquote><p><strong>Docker 镜像都是只读的</strong>，当容器启动时，一个新的可写层加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！</p><h2><span id="commit镜像">commit镜像</span></h2><pre class=" language-shell"><code class="language-shell">docker commit 提交容器成为一个新的副本# 命令和git原理类似docker commit -m="描述信息" -a="作者" 容器id 目标镜像名:[TAG]</code></pre><p>实战测试</p><pre class=" language-shell"><code class="language-shell"># 1、启动一个默认的tomcatdocker run -d -p 8080:8080 tomcat# 2、发现这个默认的tomcat 是没有webapps应用，官方的镜像默认webapps下面是没有文件的！docker exec -it 容器id# 3、拷贝文件进去cp -r webapps.dist/* webapps# 4、将操作过的容器通过commit调教为一个镜像！我们以后就使用我们修改过的镜像即可，这就是我们自己的一个修改的镜像。#docker commit -m="描述信息" -a="作者" 容器id 目标镜像名:[TAG]docker commit -a="dtxg" -m="add webapps app" e2ac9f32a68a tomcat02:1.0</code></pre><p><img src="/2022/01/08/docker-wei-wan/image-20220122112311897.png" alt="image-20220122112311897"></p><h1><span id="容器数据卷">容器数据卷</span></h1><h2><span id="什么是容器数据卷">什么是容器数据卷?</span></h2><p>为了实现数据持久化，使容器之间可以共享数据。可以将容器内的目录，挂载到宿主机上或其他容器内，实现同步和共享的操作。即使将容器删除，挂载到本地的数据卷也不会丢失。</p><h2><span id="使用容器数据卷">使用容器数据卷</span></h2><p>使用命令：-v</p><pre class=" language-shell"><code class="language-shell">dokcer run -it -v #主机内目录:容器内目录 镜像名/id</code></pre><p>将容器内目录挂载到主机内目录上，通过<strong>docker inspect</strong>命令查看该容器即可以看到挂载信息：</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122114310193.png" alt="image-20220122114310193"></p><p>建立挂载关系后，只要使用命令在容器内内新建一个文件,主机的目录里也会有这个文件</p><p>从而实现了容器和主机的文件同步和共享</p><h2><span id="匿名挂载">匿名挂载</span></h2><p>没名字的挂载</p><pre><code>docker run -d  -v 容器内目录  镜像名/id  # 匿名挂载</code></pre><h2><span id="具名挂载">具名挂载</span></h2><p>有名字的挂载</p><pre><code>docker run -d  -v 卷名:容器内目录  镜像名/id  # 具名挂载</code></pre><p>指定路径挂载</p><pre><code>docker run -d  -v /主机路径:容器内目录  镜像名/id  # 具名挂载</code></pre><p><strong>docker volume</strong> </p><p><img src="/2022/01/08/docker-wei-wan/image-20220122134203652.png" alt="image-20220122134203652"></p><p><strong>docker volume ls</strong>命令查看所有挂载的卷：</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122134457402.png" alt="image-20220122134457402"></p><p><strong>docker volume inspect 卷名</strong>找到主机内目录：</p><p><img src="/2022/01/08/docker-wei-wan/image-20220122134537414.png" alt="image-20220122134537414"></p><p>所有docker容器内的卷，在未指定主机内目录时，都在：*/var/lib/Docker(未完)/volumes/卷名/_data* 下，可通过具名挂载可以方便的找到卷，因此广泛使用这种方式进行挂载。</p><h2><span id="数据卷容器">数据卷容器</span></h2><pre class=" language-shell"><code class="language-shell">docker run -it --name container02 --volumes from container01 镜像名/id  # 将两个容器进行挂载#容器2挂载到了容器1，现在容器1叫做数据卷容器</code></pre><p>container01里的某个文件挂载到外边(本机的一个目录)</p><p>container02的volumes来自container01(容器2挂载到容器1)</p><p>现在是三者互通，任何一个地方的文件发生改变，另外两个都能感应到</p><p>虽然容器2的卷挂载了容器1，但实际是所有容器都挂载到了本机，</p><p>尽管容器2挂载了容器1，容器1 删了容器2还挂载在本机</p><h1><span id="dockerfile">DockerFile</span></h1><p>Dockerfile是用来构建docker镜像的文件</p><h2><span id="构建步骤">构建步骤</span></h2><p>编写一个dockerfile文件,随后运行命令：</p><pre class=" language-shell"><code class="language-shell">docker build -f 文件路径 -t 标签 .  # 文件名为Dockerfile时可省略且最后的.不要忽略docker run     # 运行镜像docker push    # 发布镜像</code></pre><h2><span id="dockerfile命令">dockerfile命令</span></h2><table><thead><tr><th>命令</th><th>效果</th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像：Centos/Ubuntu</td></tr><tr><td>MAINTAINER</td><td>镜像作者+邮箱</td></tr><tr><td>RUN</td><td>镜像构建的时候需要运行的命令</td></tr><tr><td>ADD</td><td>为镜像添加内容（压缩包）</td></tr><tr><td>WORKDIR</td><td>镜像工作目录（进入容器时的目录）</td></tr><tr><td>VOLUME</td><td>挂载的目录</td></tr><tr><td>EXPOSE</td><td>暴露端口配置</td></tr><tr><td>CMD/ENTRYPOINT</td><td>指定这个容器启动时要运行的命令（CMD替代先前命令，ENTRYPOINT在先前命令后追加）</td></tr><tr><td>COPY</td><td>类似于ADD，将文件拷贝到镜像中</td></tr><tr><td>ENV</td><td>构建时设置环境变量</td></tr></tbody></table><h2><span id="构建过程">构建过程</span></h2><ul><li>每个保留关键字（指令）都必须是大写字母</li><li>从上到下顺序执行</li><li>“#” 表示注释</li><li>每一个指令都会创建提交一个新的镜像层并提交</li></ul><h2><span id="构建实例">构建实例</span></h2><p><a href="https://github.com/CentOS/sig-cloud-instance-images/blob/b2d195220e1c5b181427c3172829c23ab9cd27eb/Docker(%E6%9C%AA%E5%AE%8C)/Dockerfile">https://github.com/CentOS/sig-cloud-instance-images/blob/b2d195220e1c5b181427c3172829c23ab9cd27eb/Docker(未完)/Dockerfile</a></p><p><img src="/2022/01/08/docker-wei-wan/image-20220123141814543.png" alt="image-20220123141814543"></p><blockquote><p>自己创建一个镜像</p></blockquote><pre class=" language-shell"><code class="language-shell"># 1、编写脚本[root@DTXG dockerfile]# vim mydockerfile[root@DTXG dockerfile]# cat mydockerfile FROM centosMAINTAINER dtxg<xxx@qq.com>ENV MYPATH /usr/localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo "---end---"CMD /bin/bash# 2、构建 docker build -f 脚本 -t 镜像名:版本 .[root@DTXG dockerfile]# docker build -f mydockerfile -t mycentos:0.1 .[root@DTXG dockerfile]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED          SIZEmycentos              0.1       40d82e4f5718   40 seconds ago   326MB# 3、测试[root@DTXG dockerfile]# docker run -it mycentos:0.1[root@6a2a19d5ab6c local]# pwd/usr/local</xxx@qq.com></code></pre><p>查看构建过程<code>docker history</code></p><pre class=" language-shell"><code class="language-shell">[root@DTXG dockerfile]# docker history 40d82e4f5718IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT40d82e4f5718   5 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "/bin…   0B        44bd2084ef1b   5 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        07b80a57a87f   5 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        7887c8986ee8   5 minutes ago   /bin/sh -c #(nop)  EXPOSE 80                    0B        0cf57fd4c4e5   5 minutes ago   /bin/sh -c yum -y install net-tools             28.4MB    25aa75617da6   5 minutes ago   /bin/sh -c yum -y install vim                   66.3MB    8e9a6faf2ee5   5 minutes ago   /bin/sh -c #(nop) WORKDIR /usr/local            0B        afcc60bb6a03   5 minutes ago   /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B        d2271549fded   5 minutes ago   /bin/sh -c #(nop)  MAINTAINER dtxg<xxx@qq.co… 4 0b 5d0da3dc9764 months ago bin sh -c #(nop) cmd [" bash"] <missing>      4 months ago    /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        <missing>      4 months ago    /bin/sh -c #(nop) ADD file:805cb5e15fb6e0bb0…   231MB</missing></xxx@qq.co…></code></pre><blockquote><p>发布自己的镜像</p></blockquote><p>登录</p><pre class=" language-shell"><code class="language-shell">[root@DTXG dockerfile]# docker login --helpUsage:  docker login [OPTIONS] [SERVER]Log in to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username</code></pre><p>发布</p><pre class=" language-shell"><code class="language-shell">docker push 镜像名:版本</code></pre><h1><span id="docker网络">Docker网络</span></h1><h2><span id="理解doker0">理解Doker0</span></h2>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2022/01/08/vue/"/>
      <url>/2022/01/08/vue/</url>
      
        <content type="html"><![CDATA[<h1><span id="笔记">笔记</span></h1><h2><span id="脚手架文件结构">脚手架文件结构</span></h2><pre class=" language-tex"><code class="language-tex">├── node_modules  项目依赖├── public  放置静态资源│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源（多个组件gong）│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2><span id="于不同版本的vue">于不同版本的Vue</span></h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2><span id="vueconfigjs配置文件">vue.config.js配置文件</span></h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2><span id="ref属性">ref属性</span></h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref="xxx"&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref="xxx"&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2><span id="props配置项">props配置项</span></h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name="xxx"/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:['name'] </code></p></li><li><p>第二种方式（限制类型）：<code>props:{name:String}</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><pre class=" language-js"><code class="language-js">props<span class="token punctuation">:</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span>String<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型</span>    required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//必要性</span>    <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'老王'</span> <span class="token comment" spellcheck="true">//默认值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><h2><span id="mixin混入">mixin(混入)</span></h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p> 第一步定义混合：</p><pre class=" language-tex"><code class="language-tex">{    data(){....},    methods:{....}    ....}</code></pre><p> 第二步使用混入：</p><p> ​    全局混入：<code>Vue.mixin(xxx)</code><br> ​    局部混入：<code>mixins:['xxx']    </code></p></li></ol><h2><span id="插件">插件</span></h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><pre class=" language-js"><code class="language-js">对象<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 添加全局过滤器</span>    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 添加全局指令</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3. 配置全局混入(合)</span>    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4. 添加实例方法</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myMethod <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myProperty <span class="token operator">=</span> xxxx<span class="token punctuation">}</span></code></pre></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2><span id="scoped样式">scoped样式</span></h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2><span id="总结todolist案例">总结TodoList案例</span></h2><ol><li><p>组件化编码流程：</p><p> ​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p> ​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p> ​            1).一个组件在用：放在组件自身即可。</p><p> ​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p> ​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p> ​    (1).父组件 ==&gt; 子组件 通信</p><p> ​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2><span id="webstorage">webStorage</span></h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem('key', 'value');</code></p><pre><code>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem('person');</code></p><p> ​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem('key');</code></p><p> ​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p> ​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2><span id="组件的自定义事件">组件的自定义事件</span></h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu="test"/&gt;</code>  或 <code>&lt;Demo v-on:atguigu="test"/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Demo ref<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'atguigu'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit('atguigu',数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off('atguigu')</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on('atguigu',回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2><span id="全局事件总线globaleventbus">全局事件总线（GlobalEventBus）</span></h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">//安装全局事件总线，$bus就是当前应用的vm</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><pre class=" language-js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">demo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>提供数据：<code>this.$bus.$emit('xxxx',数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2><span id="消息订阅与发布pubsub">消息订阅与发布（pubsub）</span></h2><ol><li><p>  一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from 'pubsub-js'</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><pre class=" language-js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">demo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//订阅消息</span><span class="token punctuation">}</span></code></pre></li><li><p>提供数据：<code>pubsub.publish('xxx',数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2><span id="nexttick">nextTick</span></h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2><span id="vue封装的过度与动画">Vue封装的过度与动画</span></h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><pre class=" language-vue"><code class="language-vue"><transition name="hello">    <h1 v-show="isShow"><span id="你好啊">你好啊！</span></h1></transition></code></pre></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2><span id="vue脚手架配置代理">vue脚手架配置代理</span></h2><h3><span id="方法一">方法一</span></h3><p>​    在vue.config.js中添加如下配置：</p><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>  proxy<span class="token punctuation">:</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">}</span></code></pre><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3><span id="方法二">方法二</span></h3><p>​    编写vue.config.js配置具体代理规则：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>      proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api1'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 匹配所有以 '/api1'开头的请求路径</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 代理目标的基础路径</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'^/api1'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">'/api2'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 匹配所有以 '/api2'开头的请求路径</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 代理目标的基础路径</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'^/api2'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080   changeOrigin默认值为true*/</span></code></pre><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2><span id="插槽">插槽</span></h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><pre class=" language-vue"><code class="language-vue">父组件中：        <category>           <div>html结构1</div>        </category>子组件中：        <template>            <div>               <!-- 定义插槽 -->               <slot>插槽默认内容...</slot>            </div>        </template></code></pre></li><li><p>具名插槽：</p><pre class=" language-vue"><code class="language-vue">父组件中：        <category>            <template slot="center">              <div>html结构1</div>            </template>            <template v-slot:footer>               <div>html结构2</div>            </template>        </category>子组件中：        <template>            <div>               <!-- 定义插槽 -->               <slot name="center">插槽默认内容...</slot>               <slot name="footer">插槽默认内容...</slot>            </div>        </template></code></pre></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><pre class=" language-vue"><code class="language-vue">父组件中：        <category>            <template scope="scopeData">                <!-- 生成的是ul列表 -->                <ul>                    <li v-for="g in scopeData.games" :key="g">{{g}}</li>                </ul>            </template>        </category>        <category>            <template slot-scope="scopeData">                <!-- 生成的是h4标题 -->                <h4 v-for="g in scopeData.games" :key="g"><span id="g">{{g}}</span></h4>            </template>        </category>子组件中：        <template>            <div>                <slot :games="games"></slot>            </div>        </template>                <script>            export default {                name:'Category',                props:['title'],                //数据在子组件自身                data() {                    return {                        games:['红色警戒','穿越火线','劲舞团','超级玛丽']                    }                },            }        </script></code></pre></li></ol></li></ol></li></ol><h2><span id="vuex">Vuex</span></h2><h3><span id="1概念">1.概念</span></h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3><span id="2何时使用">2.何时使用？</span></h3><p>​        多个组件需要共享数据时</p><h3><span id="3搭建vuex环境">3.搭建vuex环境</span></h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//准备actions对象——响应组件中用户的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//准备mutations对象——修改state中的数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//准备state对象——保存具体的数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    state<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><pre class=" language-js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token comment" spellcheck="true">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment" spellcheck="true">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>    store<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol><h3><span id="4基本使用">4.基本使用</span></h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//响应组件中加的动作</span>    <span class="token function">jia</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('actions中的jia被调用了',miniStore,value)</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行加</span>    <span class="token function">JIA</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('mutations中的JIA被调用了',state,value)</span>        state<span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>   sum<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    state<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch('action中的方法名',数据)</code> 或 <code>$store.commit('mutations中的方法名',数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3><span id="5getters的使用">5.getters的使用</span></h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><pre class=" language-js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    getters<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3><span id="6四个map方法的使用">6.四个map方法的使用</span></h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//借助mapState生成计算属性：sum、school、subject（对象写法）</span>     <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sum<span class="token punctuation">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span>school<span class="token punctuation">:</span><span class="token string">'school'</span><span class="token punctuation">,</span>subject<span class="token punctuation">:</span><span class="token string">'subject'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//借助mapState生成计算属性：sum、school、subject（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//借助mapGetters生成计算属性：bigSum（对象写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bigSum<span class="token punctuation">:</span><span class="token string">'bigSum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//借助mapGetters生成计算属性：bigSum（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>incrementOdd<span class="token punctuation">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token punctuation">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//靠mapActions生成：increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>increment<span class="token punctuation">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token punctuation">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//靠mapMutations生成：JIA、JIAN（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3><span id="7模块化命名空间">7.模块化+命名空间</span></h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//开启命名空间</span>  state<span class="token punctuation">:</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//开启命名空间</span>  state<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment" spellcheck="true">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre></li><li><p>开启命名空间后，组件中读取getters数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//方式二：借助mapGetters读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中调用dispatch</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>incrementOdd<span class="token punctuation">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token punctuation">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中调用commit</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>increment<span class="token punctuation">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token punctuation">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre></li></ol><h2><span id="路由">路由</span></h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3><span id="1基本使用">1.基本使用</span></h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">//引入Luyou 组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token comment" spellcheck="true">//创建router实例对象，去管理一组一组的路由规则</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>About        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>Home        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//暴露router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre></li><li><p>实现切换（active-class可配置高亮样式）</p><pre class=" language-vue"><code class="language-vue"><router-link active-class="active" to="/about">About</router-link></code></pre></li><li><p>指定展示位置</p><pre class=" language-vue"><code class="language-vue"><router-view></router-view></code></pre></li></ol><h3><span id="2几个注意点">2.几个注意点</span></h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3><span id="3多级路由多级路由">3.多级路由（多级路由）</span></h3><ol><li><p>配置路由规则，使用children配置项：</p><pre class=" language-js"><code class="language-js">routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>About<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>Home<span class="token punctuation">,</span>        children<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//通过children配置子级路由</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span><span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//此处一定不要写：/news</span>                component<span class="token punctuation">:</span>News            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//此处一定不要写：/message</span>                component<span class="token punctuation">:</span>Message            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>跳转（要写完整路径）：</p><pre class=" language-vue"><code class="language-vue"><router-link to="/home/news">News</router-link></code></pre><h3><span id="4路由的query参数">4.路由的query参数</span></h3></li><li><p>传递参数</p><pre class=" language-vue"><code class="language-vue"><!-- 跳转并携带query参数，to的字符串写法 --><router-link :to="/home/message/detail?id=666&title=你好">跳转</router-link>                <!-- 跳转并携带query参数，to的对象写法 --><router-link :to="{        path:'/home/message/detail',        query:{           id:666,            title:'你好'        }    }">跳转</router-link></code></pre></li><li><p>接收参数：</p><pre class=" language-js"><code class="language-js">$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title</code></pre></li></ol><h3><span id="5命名路由">5.命名路由</span></h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Demo<span class="token punctuation">,</span>    children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'test'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>Test<span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>                      name<span class="token punctuation">:</span><span class="token string">'hello'</span> <span class="token comment" spellcheck="true">//给路由命名</span>                    path<span class="token punctuation">:</span><span class="token string">'welcome'</span><span class="token punctuation">,</span>                    component<span class="token punctuation">:</span>Hello<span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>简化跳转：</p><pre class=" language-vue"><code class="language-vue"><!--简化前，需要写完整的路径 --><router-link to="/demo/test/welcome">跳转</router-link><!--简化后，直接通过名字跳转 --><router-link :to="{name:'hello'}">跳转</router-link><!--简化写法配合传递参数 --><router-link :to="{        name:'hello',        query:{           id:666,            title:'你好'        }    }">跳转</router-link></code></pre></li></ol></li></ol><h3><span id="6路由的params参数">6.路由的params参数</span></h3><ol><li><p>配置路由，声明接收params参数</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Home<span class="token punctuation">,</span>    children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>News        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            component<span class="token punctuation">:</span>Message<span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>                    path<span class="token punctuation">:</span><span class="token string">'detail/:id/:title'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//使用占位符声明接收params参数</span>                    component<span class="token punctuation">:</span>Detail                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>传递参数</p><pre class=" language-vue"><code class="language-vue"><!-- 跳转并携带params参数，to的字符串写法 --><router-link :to="/home/message/detail/666/你好">跳转</router-link>                <!-- 跳转并携带params参数，to的对象写法 --><router-link :to="{        name:'xiangqing',        params:{           id:666,            title:'你好'        }    }">跳转</router-link></code></pre><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><pre class=" language-js"><code class="language-js">$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>title</code></pre><h3><span id="7路由的props配置">7.路由的props配置</span></h3></li></ol><p>​    作用：让路由组件更方便的收到参数</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Detail<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span>    <span class="token comment" spellcheck="true">// props:{a:900}</span>    <span class="token comment" spellcheck="true">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span>    <span class="token comment" spellcheck="true">// props:true</span>        <span class="token comment" spellcheck="true">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span>    <span class="token function">props</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            title<span class="token punctuation">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="8ltrouter-linkgt的replace属性">8.<code>&lt;router-link&gt;</code>的replace属性</span></h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3><span id="9编程式路由导航">9.编程式路由导航</span></h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   name<span class="token punctuation">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>   params<span class="token punctuation">:</span><span class="token punctuation">{</span>      id<span class="token punctuation">:</span>xxx<span class="token punctuation">,</span>      title<span class="token punctuation">:</span>xxx   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   name<span class="token punctuation">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>   params<span class="token punctuation">:</span><span class="token punctuation">{</span>      id<span class="token punctuation">:</span>xxx<span class="token punctuation">,</span>      title<span class="token punctuation">:</span>xxx   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//后退</span><span class="token comment" spellcheck="true">//-3后退3步</span><span class="token comment" spellcheck="true">//3前进退3步</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//可前进也可后退</span></code></pre></li></ol><h3><span id="10缓存路由组件">10.缓存路由组件</span></h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><pre class=" language-vue"><code class="language-vue"><keep-alive include="News">     <router-view></router-view></keep-alive></code></pre><h3><span id="11两个新的生命周期钩子">11.两个新的生命周期钩子</span></h3></li><li><p>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</p></li><li><p>具体名字：</p><ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3><span id="12路由守卫">12.路由守卫</span></h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全局前置守卫：初始化时执行、每次路由切换前执行</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断当前路由是否需要进行权限控制</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//权限控制的具体规则</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//放行</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// next({name:'guanyu'})</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//放行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//全局后置守卫：初始化时执行、每次路由切换后执行</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>         document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title <span class="token comment" spellcheck="true">//修改网页的title</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'vue_test'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>独享守卫:</p><pre class=" language-js"><code class="language-js"><span class="token function">beforeEnter</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEnter'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断当前路由是否需要进行权限控制</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// next({name:'guanyu'})</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>组件内守卫：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//进入守卫：通过路由规则，进入该组件时被调用</span>beforeRouteEnter <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//离开守卫：通过路由规则，离开该组件时被调用</span>beforeRouteLeave <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3><span id="13路由器的两种工作模式">13.路由器的两种工作模式</span></h3></li><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/2022/01/08/juc/"/>
      <url>/2022/01/08/juc/</url>
      
        <content type="html"><![CDATA[<h1><span id="什么是juc">什么是JUC？</span></h1><p>指的是java.util包下的三个工具类：</p><ol><li>java.util.concurrent</li><li>java.util.concurrent.atomic</li><li>java.util.concurrent.locks</li></ol><p>实现<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&amp;q=%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>的三种方式：</p><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li></ol><p><strong>Runnable</strong>没有返回值、效率相比于Callable相对较低！</p><p><strong>业务</strong>：普通的线程代码 Thread</p><p><strong>1.什么是JUC?（java util concurrent）</strong></p><p><strong>2.java线程和进程</strong></p><p><strong>3.Lock锁中的synchonized部分</strong></p><p><strong>4.8锁现象</strong></p><p><strong>5.不安全的集合类</strong></p><h1><span id="线程和进程">线程和进程</span></h1><p><strong>进程</strong>：是一个程序，一个进程包含多个线程，且至少包含一个。</p><p><strong>Java默认有两个线程：main 和 GC。</strong>Java是<strong>不能开启线程的</strong>，底层是调用start0()是一个native方法，由底层的C++方法编写。java无法直接操作硬件。</p><p><strong>并发：</strong>CPU单核，多个线程共用一个资源，快速交替方式达到并行的假象。本质-&gt;充分利用cpu资源。</p><p><strong>并行：</strong>CPU多核，多个线程同时执行</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取cpu核数*</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>线程有几个状态：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State<span class="token punctuation">{</span>      NEW<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//新生</span>      RUNNABLE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//运行</span>      BLOCKED<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//阻塞</span>      BLOCKED<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//等待</span>      TIMED_WAITING<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时等待</span>      TERMINATED<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止</span><span class="token punctuation">}</span></code></pre><h1><span id="wait和sleep的区别"><strong>wait和sleep的区别</strong></span></h1><p>wait:来自Object类，<strong>会释放锁</strong>，<strong>必须</strong>在同步代码块中使用，<strong>不需要</strong>捕获异常</p><p>让当前线程进入等待状态，当别的其他线程调用notify()或者notifyAll()方法时，当前线程进入就绪状态。wait方法必须在同步上下文中调用。也就是说，<strong>如果想要调用wait方法，前提是必须获取对象上的锁资源。当wait方法调用时，当前线程会释放已获取的对象锁资源，并进入等待队列</strong>，其他线程就可以尝试获取对象上的锁资源。</p><p>sleep：来自Thread类是一个静态方法，<strong>不会释放锁！</strong>（睡着了），可以在<strong>任何地方</strong>使用，<strong>必须</strong>要捕获异常</p><p>让当前线程休眠指定时间。休眠时间的准确性依赖于系统时钟和CPU调度机制。不释放以获取的锁资源，<strong>如果sleep方法在同步上下文中调用，那么其他线程是无法进入当前同步快或者同步方法中的</strong>。可通过interrupt()方法来唤醒休眠线程。</p><h1><span id="lock锁">Lock锁(*)</span></h1><h2><span id="传统的synchronized锁队列锁"><strong>传统的synchronized锁：队列锁</strong></span></h2><p><strong>sychronized的作用：</strong></p><p>在并发编程中会存在线程安全问题，主要原因是存在共享数据和多线程共同操作共享数据。关键字sychronized可以保证在同一时刻只有一个线程可以执行某个方法或某个代码块（临界区），同时synchronized可以保证一个线程的变化可见。</p><p>只有共享资源读写访问才需要同步化，如果不是共享资源就没有必要同步。</p><p><strong>三种应用方式</strong></p><ul><li>修饰<strong>实例</strong>方法，对当前实例进行加锁，进入同步代码前需获得当前<strong>实例的锁</strong></li><li>修饰<strong>静态</strong>方法，对类对象加锁，要先获得当前<strong>类对象的锁</strong></li><li>修饰<strong>代码块</strong>，指定加锁对象，对给定对象加锁，要先获得给定<strong>对象的锁</strong></li></ul><p><strong>同步方法（静态方法、实例方法）</strong></p><p><strong>用sychronized修饰的方法就叫做同步方法，保证A线程执行该方法的时候，其他线程只能在方法外等着。</strong></p><pre class=" language-JAVA"><code class="language-JAVA">synchronized public void doWorlk(){     ...}</code></pre><p>对于非静态类方法，同步锁就是this(实例对象)</p><p>对于静态类方法，同步锁是当前方法所在类的字节码对象（类对象）</p><p><strong>同步代码块</strong></p><pre class=" language-JAVA"><code class="language-JAVA">syschronized(同步锁){  ....}</code></pre><p><strong>同步锁：</strong>在任何时候最多只能有一个线程有同步锁，其他线程只能在代码块外等着。</p><p>为保证每个线程都能正常执行原子操作，Java引入了线程同步机制。java程序运行使用任何对象作为同步监听对象，但一般的，我们把<strong>当前并发访问的共同资源作为同步监听对象。</strong></p><p><strong>举个栗子：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>IF_ACMPEQ<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 12:31 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketDemo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    并发：多个线程同时操作同一个资源类，把资源类丢入线程</span>    Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"B"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"C"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//    票数</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  买票的方式</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了"</span> <span class="token operator">+</span> number<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"票，剩余"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当多个线程同时对一个对象的一个方法进行操作，只有一个线程能够抢到锁。因为一个对象只有一把锁，一个线程获取了该对象的锁之后，其他线程无法获取该对象的锁，就不能访问该对象的其他synchronized实例方法，但是可以访问非synchronized修饰的方法。</p><h2><span id="lock接口"><strong>Lock接口</strong></span></h2><p>Lock所是一个接口，其所有的实现类为</p><ul><li>ReentrantLock(可重入锁)</li><li>ReentrantReadWriteLock.ReadLock(可重入读写锁的读锁)</li><li>ReentrantReadWriteLock.WriteLock(可重入读写锁的写锁)</li></ul><p>Lock实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。Lock接口的实现允许锁在不同的作用范围内获取和释放，并允许以任何顺序获取和释放多个所。随着灵活的增加，也带来了更多的责任。不使用块结构锁就失去了使用synchronized方法和语句时会出现的锁自动释放功能。在大多数情况下，应使用以下语句：</p><pre class=" language-java"><code class="language-java">Lock l <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>      l<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加锁</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// access the resource protected by this lock</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         l<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解锁</span>     <span class="token punctuation">}</span></code></pre><p>加锁和解锁出现在不同作用范围中是，需谨慎确保锁定是所执行的所有代码用try-finally或try-catch保护，以确保在必要时释放锁。</p><p><strong>公平锁：</strong>十分公平，遵循先来后到</p><p><strong>非公平锁：</strong>十分不公平，出现插队现象</p><p><strong>可重入锁：</strong>如果锁具备可重入性，则称为可（可以）重（再次）入(进入同步域，即同步代码块/方法)锁(同步锁)。可重入就是指某个线程已经获得某个锁，可以再次获取相同的锁而不会出现死锁。</p><p><strong>举个栗子：</strong>修改栗子1使用lock</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.demo01;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * @author: lpc * @date: 28/11/2021 下午 12:31 * @describe: * @vision */public class SaleTicketDemo02 {  public static void main(String[] args) {    //    并发：多个线程同时操作同一个资源类，把资源类丢入线程      Ticket2 ticket2 = new Ticket2();      new Thread(() -> { for(int i = 0; i < 60; i++){ticket2.sale();} }, "A").start();      new Thread(() -> { for(int i = 0; i < 60; i++){ticket2.sale();} }, "B").start();      new Thread(() -> { for(int i = 0; i < 60; i++){ticket2.sale();} }, "C").start();    }}class Ticket2 {  //    票数  private int number = 50;  Lock lock = new ReentrantLock();  //  买票的方式  public  void sale() {    lock.lock(); // 加锁    try {      if (number > 0) {        System.out.println(Thread.currentThread().getName() + "卖出了" + number-- + "票，剩余" + number);      }    } catch (Exception e) {      e.printStackTrace();    } finally {      lock.unlock(); // 解锁    }  }}</code></pre><h2><span id="synchronized和lock锁的区别"><strong>synchronized和Lock锁的区别</strong></span></h2><p><strong>synchronized:</strong></p><ul><li>是java内置的关键字</li><li>无法获取锁的状态</li><li>会自动释放锁</li><li>线程一在获得锁的情况下阻塞了，第二个线程就只能傻傻的等着</li><li>是不可中断的、非公平的、<strong>可重入锁</strong></li><li>适合锁少量的同步代码</li><li>有代码块锁和方法锁</li></ul><p><strong>Lock:</strong></p><ul><li>是java的一个类</li><li>可判断是否获取了锁</li><li>需手动释放锁，如果不释放会造成死锁</li><li>线程一在获得锁的情况下阻塞了，可以使用tryLock()尝试获取锁</li><li>非公平的、可判断的、<strong>可重入锁</strong></li><li>适合锁大量的同步代码</li><li>只有代码块锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（拥有更多的子类）</li></ul><h2><span id="生产者和消费者"><strong>生产者和消费者</strong></span></h2><h3><span id="synchronized版">synchronized版</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pc<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 1:11 * @describe: * 线程之间通信问题：生产者和消费者问题？(口诀：等待，业务，唤醒) * 等待唤醒，通知唤醒 线程交替执行 * A B 操作同一个变量 num=0 * A num+1 * B num-1 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                  date<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                  date<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"B"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Date</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// +1</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 等待</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    number<span class="token operator">++</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知其他线程，我+1完毕了</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// -1</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 等待</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    number<span class="token operator">--</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知其他线程，我-1完毕了</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果有abcd4个线程2+2-，这时候就会出现问题：虚假唤醒</p><p><img src="/2022/01/08/juc/image-20211128133149073.png" alt="image-20211128133149073"></p><p><strong>if改为while</strong></p><h3><span id="juc版">JUC版</span></h3><p><img src="/2022/01/08/juc/image-20211128144543100.png" alt="image-20211128144543100"></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.pc;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * @author: lpc * @date: 28/11/2021 下午 1:11 * @describe:  * 线程之间通信问题：生产者和消费者问题？(口诀：等待，业务，唤醒)  * 等待唤醒，通知唤醒 线程交替执行  * A B 操作同一个变量  * num=0  * A num+1  * B num-1 * @vision */public class B {  public static void main(String[] args) {    Date2 date = new Date2();    new Thread(            () -> {              for (int i = 0; i < 10; i++) {                try {                  date.increment();                } catch (InterruptedException e) {                  e.printStackTrace();                }              }            },            "A")        .start();    new Thread(            () -> {              for (int i = 0; i < 10; i++) {                try {                  date.decrement();                } catch (InterruptedException e) {                  e.printStackTrace();                }              }            },            "B")        .start();    new Thread(            () -> {              for (int i = 0; i < 10; i++) {                try {                  date.increment();                } catch (InterruptedException e) {                  e.printStackTrace();                }              }            },            "C")            .start();    new Thread(            () -> {              for (int i = 0; i < 10; i++) {                try {                  date.decrement();                } catch (InterruptedException e) {                  e.printStackTrace();                }              }            },            "D")            .start();  }}class Date2 {  private int number = 0;  Lock lock = new ReentrantLock();  Condition condition = lock.newCondition();  //      condition.await(); 等待  //    condition.signalAll(); 唤醒全部  // +1  public  void increment() throws InterruptedException {    lock.lock();    try {      while (number != 0) {        // 等待        condition.await();      }      number++;      System.out.println(Thread.currentThread().getName() + "==>" + number);      // 通知其他线程，我+1完毕了      condition.signalAll();    } catch (InterruptedException e) {      e.printStackTrace();    } finally {      lock.unlock();    }  }  // -1  public  void decrement() throws InterruptedException {    lock.lock();    try {      while (number == 0) {        // 等待        condition.await();      }      number--;      System.out.println(Thread.currentThread().getName() + "==>" + number);      // 通知其他线程，我-1完毕了      condition.signalAll();    } catch (InterruptedException e) {      e.printStackTrace();    } finally {      lock.unlock();    }  }}</code></pre><p>无序</p><p><img src="/2022/01/08/juc/image-20211128145637224.png" alt="image-20211128145637224"></p><h4><span id="condition监视器顺序唤醒线程">Condition监视器（顺序唤醒线程）</span></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 1:11 * @describe: A 执行完调用B B 执行完调用C C 执行完调用A * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Date3 date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               date<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        date<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        date<span class="token punctuation">.</span><span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 资源类</span><span class="token keyword">class</span> <span class="token class-name">Date3</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Lock lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1A 2B 3C</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务，判断-->执行-->通知</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 等待</span>        condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>AAAAAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//      唤醒指定的人 B</span>      number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      condition2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通知监视器2</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务，判断-->执行-->通知</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//等待</span>        condition2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      number<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//      唤醒3</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>BBBBBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      condition3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务，判断-->执行-->通知</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//等待</span>        condition3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//通知1</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>CCCCCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      condition1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="8锁现象">8锁现象</span></h1><p>掌握8中锁的现象永远知道<strong>锁的是谁</strong>！</p><p><strong>深刻理解我们的锁</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 3:15 * @describe: * 8锁 就是关于锁的8个问题 * 1、标准情况下，两个线程，先打印发短信还是打电话?  1/发短信 2/打电话 * 2、sendSms延迟4秒，两个线程，先打印发短信还是打电话 ?  1/发短信 2/打电话 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>      Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//现象二时添加，让线程先睡4秒种</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现象一：两个方法都使用synchronized关键字，一个对象两个线程，先执行<strong>发短信</strong></p><p><strong>原因：synchronized 锁的对象是方法都调用者，两个方法是同一个所 ，谁先拿到谁执行</strong> </p><p>现象二：让线程先睡4秒，结果依然是先<strong>发短信</strong></p><p><strong>原因：synchronized 锁的对象是方法都调用者，两个方法是同一个所 ，谁先拿到谁执行</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 3:15 * @describe: * 8锁 就是关于锁的8个问题 * 3、增加了一个普通方法，先打印发短信，还是hello? * 4、两个对象，两个同步方法 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//两个对象</span>      Phone2 phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Phone2 phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone1<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone2</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// synchronized 锁的对象是方法都调用者</span><span class="token comment" spellcheck="true">// 两个方法是同一个所 ，谁先拿到谁执行</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//现象二时添加，让线程先睡4秒种</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这里没有所，不是同步方法，不受锁的影响</span>  <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现象三：在之前代码的基础上，新添加一个普通的方法，一个对象两个线程，此时先执行<strong>hello方法</strong></p><p><strong>原因：普通方法没有锁就不是同步方法不受锁的影响，又由于时间的延迟，所以先打印hello</strong></p><p>现象四：新实例化一个phone对象，使用不同的对象去调用方法，两个对象两个线程，此时先执行<strong>打电话</strong></p><p><strong>原因：使用了不同的对象，以至于是锁的对象不是同一个，因为延时所以先打电话</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 3:15 * @describe: * 8锁 就是关于锁的8个问题 * 5、两个方法增加了static，只用一个对象先打印打电话？发短信？ * 6、两个对象，两个同步方法 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Phone3 phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Phone3 phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone1<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone3</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// synchronized 锁的对象是方法都调用者</span><span class="token comment" spellcheck="true">// 两个方法是同一个所 ，谁先拿到谁执行</span><span class="token comment" spellcheck="true">// 加了static 类一加载就有了  锁的Class模板(Class唯一，所以锁也是唯一)</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//现象二时添加，让线程先睡4秒种</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现象五：在之前代码的基础上，方法前添加static关键字，一个对象两个线程，先执行<strong>发短信</strong></p><p><strong>原因：加入了static，锁的对象变成了Class(Class唯一，所以锁也是唯一)，谁拿到锁谁先执行</strong></p><p>现象六：再添加一个对象，使用不同的对象进行方法的打印，两个对象两个线程，依然是先执行<strong>发短信</strong></p><p><strong>原因：加入了static，锁的对象变成了Class(Class唯一，所以锁也是唯一)两个对象用一把锁，谁拿到锁谁先执行</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 3:15 * @describe: * 8锁 就是关于锁的8个问题 * 7、一个static方法一个普通方法，只用一个对象先打印打电话？发短信？ * 8、一个static方法一个普通方法，两个对象，两个线程，先打印打电话？发短信？ * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Phone4 phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Phone4 phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone1<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone4</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 静态同步方法</span><span class="token comment" spellcheck="true">//    锁的是Class模板</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  普通同步方法</span><span class="token comment" spellcheck="true">//    锁的调用者</span>  <span class="token keyword">public</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一个static方法一个普通方法，只用一个对象先打印打电话？发短信？<strong>打电话</strong></p><p><strong>原因：static synchronized锁的是Classs,ynchronized锁的是调用者，用的是Class都锁，因为延时4，所以打印打电话</strong></p><p>一个static方法一个普通方法，两个对象，两个线程，先打印打电话？发短信？<strong>打电话</strong></p><p><strong>原因：用的是Class都锁，因为延时4，所以打印打电话</strong></p><blockquote><p><strong>只有当锁的对象或模板时同一个的时候，才能借助调用的顺序来执行。</strong></p></blockquote><h1><span id="不安全的集合类"><strong>不安全的集合类</strong></span></h1><h2><span id="list"><strong>list</strong></span></h2><p><strong>不安全类是什么？</strong></p><p>不安全类是指在多线程并发的时候不能保证数据正确性的类，通常是由于这些类并没有加锁造成的。</p><p><strong>为什么不设计成加锁的？</strong></p><p>其实，在list之前有个集合类vector，它是内部加锁，它是一个线程安全类。不优先使用它的原因是加锁可以保证数据的正确性，但却降低了并发效率。list单线程安全，多线程不安全。并发条件下会产生<strong>ConcurrentModificationException异常（并发修改异常）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>unsafe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CopyOnWriteArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 4:10 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// java.util.ConcurrentModificationException 并发修改异常</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 解决方案     * 1、 List&lt;String> list = new Vector&lt;>();     * 2、 List&lt;String> list = Collections.synchronizedList(new ArrayList&lt;>());     * 3、 List&lt;String> list = new     * CopyOnWriteArrayList&lt;>();     */</span>    <span class="token comment" spellcheck="true">// CopyOnWrite写入时复制 COW 计算机程序设计领域都一种优化策略</span>    <span class="token comment" spellcheck="true">// 在写入都时候避免覆盖，造成数据问题</span>    <span class="token comment" spellcheck="true">// CopyOnWrite使用了lock</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>如何做到保证数据的正确性呢？</strong></p><ol><li>vector替代list（并发效率低）</li><li>用Collections.synchronizedList(list)包装list（有synchronized修饰的方法效率低）</li><li>使用juc里的<strong>CopyOnWriteArrayList</strong>替代list(推荐使用)写入时复制，读写分离的思想。</li></ol><p><strong>CopyOnWriteArrayList 写时复制，读写分离</strong></p><p>既能保证数据的正确性，又不会使并发效率变低。它的add源码：</p><p><img src="/2022/01/08/juc/image-20211128163846972.png" alt="image-20211128163846972"></p><ol><li>复制一个原来数组副本，在副本里“写入元素”，最后再用写完的副本替换原本的数组，即我们在</li><li>“写”时可以“读”，这两个操作所使用的不是一个数组，不会产生影响。</li></ol><p>这样写时复制实现了读写分离，我们不需要在读的时候加锁（之前读需要加锁是因为读写不能同时进行，但一旦给读加了锁，那么读也不能同时进行，就降低了并发效率）</p><p>但是，我们每“写入”一个元素就要复制扩容一次数组，是非常耗时耗资源的，所以当我们需要写入较多数据的时候，CopyOnArrayList就不那么合适了。</p><h2><span id="set">Set</span></h2><p>也是不安全的集合类</p><p>将不安全的集合变成安全集合的方法：</p><ul><li>使用Collections工具类的<strong>synchronized</strong>包装的Set类</li><li>使用CopyOnWriteArraySet 写入复制的<strong>JUC</strong>解决方案</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>unsafe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CopyOnWriteArraySet<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 4:41 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// java.util.ConcurrentModificationException</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetTest</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 解决方案</span>    <span class="token comment" spellcheck="true">// 1、Set&lt;String> set = Collections.synchronizedSet(new HashSet&lt;>());</span>    <span class="token comment" spellcheck="true">// 2、 Set&lt;String> set = new CopyOnWriteArraySet&lt;>();</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="hashset底层是什么">HashSet底层是什么？</span></h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认的空参初始化方法</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//使用HashSet的add方法，依然是调用HashMap的底层put方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>也就是说HashSet的底层就是HashMap</p><h2><span id="map"><strong>Map</strong></span></h2><p>默认<strong>加载因子是0.75</strong>,默认的<strong>初始容量是16</strong></p><p><img src="/2022/01/08/juc/image-20211128170110672.png" alt="image-20211128170110672"></p><p>同样的HashMap基础类也存在<strong>并发修改异常</strong>！</p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.unsafe;import java.util.HashMap;import java.util.Map;import java.util.UUID;/** * @author: lpc * @date: 28/11/2021 下午 4:52 * @describe: * @vision *///java.util.ConcurrentModificationExceptionpublic class MapTest {  public static void main(String[] args) {    // map 是这样用的吗？  不是，工作中不使用这个    // 默认等价什么？ new HashMap<>(16,0.75);    /**     * 解决方案     * 1. Map<string, string> map = Collections.synchronizedMap(new HashMap<>());     * 2. Map<string, string> map = new ConcurrentHashMap<>();    */    Map<string, string> map = new ConcurrentHashMap<>();    // 加载因子、初始化容量    for (int i = 1; i < 100; i++) {      new Thread(()->{        map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(0,5));        System.out.println(map);      },String.valueOf(i)).start();    }  }}</string,></string,></string,></code></pre><p><strong>TODO:研究ConcurrentHashMap底层原理：</strong></p><h1><span id="callable">Callable</span></h1><p><strong>1、可以有返回值；<br>2、可以抛出异常；<br>3、方法不同，run()/call()</strong></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.callabel;import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.FutureTask;/** * @author: lpc * @date: 28/11/2021 下午 5:31 * @describe: * @vision */public class CallableTest {  public static void main(String[] args) throws ExecutionException, InterruptedException {    //放入Thread中使用，结果会被缓存    MyThread myThread = new MyThread();    FutureTask futureTask = new FutureTask(myThread);    new Thread(futureTask,"A").start();    new Thread(futureTask,"B").start();    // 这个get方法可能会被阻塞，如果在call方法中是一个耗时的方法，所以一般情况我们会把这个放在最后，或者使用异步通信    Integer integer = (Integer) futureTask.get();    System.out.println(integer);  }}class MyThread implements Callable<integer> {  @Override  public Integer call() throws Exception {    System.out.println("call");    return 1024;  }}</integer></code></pre><h1><span id="常用的辅助类">常用的辅助类</span></h1><h2><span id="countdownlatch">CountDownLatch</span></h2><p>减法计数器</p><p><img src="/2022/01/08/juc/image-20211128180749718.png" alt="image-20211128180749718"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>add<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 6:08 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// 计数器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 总数是6 必须要执行任务的时候 再使用</span>    CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"go out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// -1</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待计数器归0 在向下执行</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"close door"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主要方法：</p><ul><li>countDown 减一操作；</li><li>await 等待计数器归零</li></ul><p>await 等待计数器归零，就唤醒，再继续向下运行</p><h2><span id="cyclickbarrier">CyclickBarrier</span></h2><p>加法计数器</p><p><img src="/2022/01/08/juc/image-20211128181943651.png" alt="image-20211128181943651"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>add<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BrokenBarrierException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CyclicBarrier<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 6:20 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//    集齐7课龙珠召唤神龙</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 召唤龙珠的线程  第二个参数是线程</span>    CyclicBarrier cyclicBarrier <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span>            <span class="token number">7</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"召唤神龙成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//  Lambda能拿到i吗</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"拿到了"</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">"颗龙珠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="semaphore">Semaphore</span></h2><p>信号量</p><p><img src="/2022/01/08/juc/image-20211128182926615.png" alt="image-20211128182926615"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>add<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Semaphore<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 6:30 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 线程容量 限流</span>    Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//          acquire() 得到许可证</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                  semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"抢到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"离开车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// release() 释放许可证</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">1</span>抢到车位<span class="token number">3</span>抢到车位<span class="token number">2</span>抢到车位<span class="token number">1</span>离开车位<span class="token number">2</span>离开车位<span class="token number">3</span>离开车位<span class="token number">5</span>抢到车位<span class="token number">4</span>抢到车位<span class="token number">6</span>抢到车位<span class="token number">5</span>离开车位<span class="token number">4</span>离开车位<span class="token number">6</span>离开车位</code></pre><p>原理：</p><p><strong>semaphore.acquire()获得资源，如果资源已经使用完了，就等待资源释放后再进行使用！</strong></p><p><strong>semaphore.release()释放，会将当前的信号量释放+1，然后唤醒等待的线程！</strong></p><p>作用： 多个共享资源互斥的使用！ 并发限流，控制最大的线程数！</p><h1><span id="读写锁">读写锁</span></h1><p><img src="/2022/01/08/juc/image-20211128202611842.png" alt="image-20211128202611842"></p><p><strong>ReadWriteLock</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>rw<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantReadWriteLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 28/11/2021 下午 7:48 * @describe: * 独占锁(写锁) 一次只能被一个线程占有 * 共享锁(读锁) 多个线程可以同时占有 * ReadWriteLock * 读-读 可以共存 * 读-写 不能共存 * 写-写 不能共存 一次只有一个线程能写 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteLockDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MyCacheLock myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCacheLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写入</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        myCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//读取</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        myCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 自定义缓存 */</span><span class="token keyword">class</span> <span class="token class-name">MyCache</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存 写</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 取 读</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object o <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读入ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 自定义缓存加入锁 */</span><span class="token keyword">class</span> <span class="token class-name">MyCacheLock</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读写锁 更加细粒度都控制</span>  <span class="token keyword">private</span> ReentrantReadWriteLock readWriteLock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存 写，写入都时候，只希望同时只有一个线程写</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 取 读,多有人都可以读</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      Object o <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读入ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>没有使用锁</p><pre><code>1写入12写入23写入34写入43写入ok4写入ok2写入ok5写入51写入ok5写入ok1读取14读取44读入ok2读取21读入ok3读取33读入ok2读入ok5读取55读入ok</code></pre><p>使用读写锁</p><pre><code>1写入11写入ok2写入22写入ok4写入44写入ok3写入33写入ok5写入55写入ok1读取11读入ok3读取33读入ok5读取55读入ok2读取24读取44读入ok2读入ok</code></pre><p>所以如果我们不加锁的情况，多线程的读写会造成数据不可靠的问题。</p><p>我们也可以采用<strong>synchronized</strong>这种重量锁和轻量锁 <strong>lock</strong>去保证数据的可靠。</p><p>但是这次我们采用更细粒度的锁：<strong>ReadWriteLock</strong> 读写锁来保证</p><h1><span id="阻塞队列">阻塞队列</span></h1><img src="/2022/01/08/juc/image-20211128203800581.png" alt="image-20211128203800581"><p><img src="/2022/01/08/juc/image-20211128204139870.png" alt="image-20211128204139870"></p><h2><span id="blockqueue">BlockQueue</span></h2><p>是Collection的一个子类</p><p>什么情况下我们会使用阻塞队列：多线程并发处理、线程池</p><p><img src="/2022/01/08/juc/image-20211128205210583.png" alt="image-20211128205210583"></p><p>BlockingQueue 有四组api</p><table><thead><tr><th>方式</th><th>抛出异常</th><th>不会抛出异常，有返回值</th><th>阻塞，等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer</td><td>put</td><td>offer(timenum.timeUnit)</td></tr><tr><td>移出</td><td>remove</td><td>poll</td><td>take</td><td>poll(timenum,timeUnit)</td></tr><tr><td>判断队首元素</td><td>element</td><td>peek</td><td>-</td><td>-</td></tr></tbody></table><p>第一组add 、remove，会抛出异常</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//会抛出异常</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//      队列的大小</span>  ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    队列大小3，再次添加</span>  <span class="token comment" spellcheck="true">//    System.out.println(blockingQueue.add("d"));</span>  <span class="token comment" spellcheck="true">//    报错 IllegalStateException: Queue full 队列已满</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队首:"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    先进先移除</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    再次移除第四个</span>  <span class="token comment" spellcheck="true">//    报错 NoSuchElementException 没有元素</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二组offer、 poll，没有抛出异常</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//不抛出异常</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//      队列的大小</span>  ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false 没有抛出异常</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队首:"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 移除</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// null 没有抛出异常</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第三组put、take</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//等待/阻塞 (一直等待)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//      队列的大小</span>  ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// blockingQueue.put("d");//没有位置了，会一直等待</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有元素了，会一直等待</span><span class="token punctuation">}</span></code></pre><p>第四组offer(timenum.timeUnit)、poll(timenum,timeUnit)</p><pre class=" language-JAVA"><code class="language-JAVA">//等待/阻塞 (等待超时)  public static void test4() throws InterruptedException {    //      队列的大小    ArrayBlockingQueue blockingQueue = new ArrayBlockingQueue<>(3);    System.out.println(blockingQueue.offer("a"));    System.out.println(blockingQueue.offer("b"));    System.out.println(blockingQueue.offer("c"));//    等待2秒，然后退出    blockingQueue.offer("d",2, TimeUnit.SECONDS);    System.out.println("===");    System.out.println(blockingQueue.poll());    System.out.println(blockingQueue.poll());    System.out.println(blockingQueue.poll());    //超过2秒，就不取了    System.out.println(blockingQueue.poll(2, TimeUnit.SECONDS));  }</code></pre><h2><span id="同步队列">同步队列</span></h2><p>同步队列 没有容量，也可以视为<strong>容量为1的队列；</strong></p><p>进去一个元素，必须等待取出来之后，才能再往里面放入一个元素；</p><p><strong>put</strong>方法 和 <strong>take</strong>方法；</p><p><strong>Synchronized</strong> 和 其他的<strong>BlockingQueue</strong> 不一样 它不存储元素；</p><p>put了一个元素，就必须从里面先take出来，否则不能再put进去值！</p><p>并且SynchronousQueue 的take是使用了<strong>lock锁保证线程安全</strong>的。</p><h3><span id="synchronousqueue">SynchronousQueue</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>bq<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>SynchronousQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 上午 11:19 * @describe: * 和其他的BlockingQueue不一样，SynchronousQueue 不存储元素 * put了一个元素，必须取出来，才能再次put值 * @vision */</span><span class="token comment" spellcheck="true">// 同步队列</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronousQueueDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 同步队列</span>    SynchronousQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"put 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"put 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"put 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"T1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"T2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="线程池">线程池</span></h1><p><strong>线程池：三大方式、七大参数、四种拒绝策略（*）</strong></p><blockquote><p>池化技术</p></blockquote><p>程序的运行，本质：占用系统的资源！我们需要去优化资源的使用 ===&gt; 池化技术</p><p>线程池、JDBC的连接池、内存池、对象池 等等。。。。</p><p>资源的创建、销毁十分消耗资源</p><p><strong>池化技术</strong>：事先准备好一些资源，如果有人要用，就来我这里拿，用完之后还给我，以此来提高效率。</p><p><img src="/2022/01/08/juc/image-20211129115046821.png" alt="image-20211129115046821"></p><h2><span id="线程池的好处">线程池的好处：</span></h2><p>1、降低资源的消耗；</p><p>2、提高响应的速度；</p><p>3、方便管理；</p><p><strong>线程复用、可以控制最大并发数、管理线程；</strong></p><h2><span id="线程池三大方法">线程池：三大方法</span></h2><p>ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程<br>ExecutorService threadPool2 = Executors.newFixedThreadPool(5); //创建一个固定的线程池的大小<br>ExecutorService threadPool3 = Executors.newCachedThreadPool(); //可伸缩的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pool<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 上午 11:48 * @describe: Executors 工具类、有3大方法 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    ExecutorService threadPool = Executors.newSingleThreadExecutor(); // 单个线程</span>    <span class="token comment" spellcheck="true">//    ExecutorService threadPool = Executors.newFixedThreadPool(5);//固定的线程池</span>    ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可伸缩的池</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用了线程池后，用线程池来创建线程</span>        threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//    线程池用完后，程序结束，关闭线程池</span>      threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="七大参数">七大参数</span></h2><p>源码分析</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//三大方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>      <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                              0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                              <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                 0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                 <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                 60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                 <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//本质 ThreadPoolExecutor()</span><span class="token comment" spellcheck="true">//可以看到7大参数</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//核心线程池大小</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//最大核心线程池大小</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时了没有人调用就会释放</span>                              TimeUnit unit<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时单位</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//阻塞队列</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程工厂 创建线程都 一般不用动</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//拒绝策略</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>                null <span class="token operator">:</span>                AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>阿里巴巴的Java操作手册中明确说明：对于Integer.MAX_VALUE初始值较大，所以一般情况我们要使用底层的<strong>ThreadPoolExecutor</strong>来创建线程池。</p><p><img src="/2022/01/08/juc/image-20211129121147520.png" alt="image-20211129121147520"></p><h2><span id="四种拒绝策略">四种拒绝策略</span></h2><p><img src="/2022/01/08/juc/image-20211129121849457.png" alt="image-20211129121849457"></p><pre><code>1. new ThreadPoolExecutor.AbortPolicy()： //该拒绝策略为：银行满了，还有人进来，不处理这个人的，并抛出异常超出最大承载，就会抛出异常：队列容量大小+maxPoolSize2. new ThreadPoolExecutor.CallerRunsPolicy()： //该拒绝策略为：哪来的去哪里 main线程进行处理3. new ThreadPoolExecutor.DiscardPolicy(): //该拒绝策略为：队列满了,丢掉异常，不会抛出异常。4. new ThreadPoolExecutor.DiscardOldestPolicy()： //该拒绝策略为：队列满了，尝试去和最早的进程竞争，不会抛出异常</code></pre><h2><span id="手动创建线程池">手动创建线程池</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pool<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 12:12 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DIYPool</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>      ExecutorService threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                        <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//核心线程</span>                        <span class="token number">5</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//最大核心线程</span>                        <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//单位</span>              <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//阻塞队列</span>              Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//工厂</span>              <span class="token comment" spellcheck="true">//拒绝策略</span><span class="token comment" spellcheck="true">//              new ThreadPoolExecutor.AbortPolicy() //抛异常</span><span class="token comment" spellcheck="true">//              new ThreadPoolExecutor.CallerRunsPolicy()//哪来去哪</span><span class="token comment" spellcheck="true">//              new ThreadPoolExecutor.DiscardPolicy()//满了不抛异常</span>              <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//满了和第一个竞争不管是否失败，不抛异常</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//最大承载deque+max</span>          <span class="token comment" spellcheck="true">//超过报RejectedExecutionException异常</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 使用了线程池后，用线程池来创建线程</span>              threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>                      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//    线程池用完后，程序结束，关闭线程池</span>          threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="如何设置线程池的大小最大线程如何设置">如何设置线程池的大小/最大线程如何设置</span></h2><p><strong>1、CPU密集型：电脑的核数是几核就选择几；选择maximunPoolSize的大小</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取cpu 的核数</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService service <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token number">2</span><span class="token punctuation">,</span>                max<span class="token punctuation">,</span>                <span class="token number">3</span><span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2、I/O密集型：</strong></p><p>在程序中有15个大型任务，io十分占用资源；</p><p><strong>I/O密集型就是判断我们程序中十分耗I/O的线程数量，大约是最大I/O数的一倍到两倍之间。</strong></p><h1><span id="四大函数式接口">四大函数式接口(*)</span></h1><p>新时代的程序员：<strong>lambda表达式、链式编程、函数式接口、Stream流式计算</strong></p><p>函数式接口：只有一个方法的接口</p><p><img src="/2022/01/08/juc/image-20211129124442949.png" alt="image-20211129124442949"></p><p><strong>4大原生函数式接口</strong></p><p><img src="/2022/01/08/juc/image-20211129124815898.png" alt="image-20211129124815898"></p><h2><span id="function-函数型接口">Function 函数型接口</span></h2><p>函数式接口：有一个输入参数，有一个输出</p><p><img src="/2022/01/08/juc/image-20211129125547893.png" alt="image-20211129125547893"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 12:49 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1函数式接口：有一个输入参数，有一个输出</span>    <span class="token comment" spellcheck="true">//    Function function=new Function&lt;String,String>() {</span>    <span class="token comment" spellcheck="true">//        @Override</span>    <span class="token comment" spellcheck="true">//        public String apply(String s) {</span>    <span class="token comment" spellcheck="true">//            return s;</span>    <span class="token comment" spellcheck="true">//        }</span>    <span class="token comment" spellcheck="true">//    };</span>    <span class="token comment" spellcheck="true">//      2只要是函数式接口 就可用lambda表达式</span>    Function function <span class="token operator">=</span>        <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="predicate-断定型接口">Predicate 断定型接口</span></h2><p>断定型接口：有一个输入参数，返回值只能式boolean</p><p><img src="/2022/01/08/juc/image-20211129140346388.png" alt="image-20211129140346388"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Predicate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 2:00 *@describe: *@vision */</span><span class="token comment" spellcheck="true">//断定型接口：有一个输入参数，返回值只能式boolean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断字符串是否为空</span><span class="token comment" spellcheck="true">//      Predicate&lt;String> predicate = new Predicate&lt;String>(){</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//          @Override</span><span class="token comment" spellcheck="true">//          public boolean test(String str) {</span><span class="token comment" spellcheck="true">//              return str.isEmpty();</span><span class="token comment" spellcheck="true">//          }</span><span class="token comment" spellcheck="true">//      };</span>    Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> predicate<span class="token operator">=</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="consummer-消费型接口">Consummer 消费型接口</span></h2><p>消费型接口：只有输入，没有返回值</p><p><img src="/2022/01/08/juc/image-20211129141023291.png" alt="image-20211129141023291"></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.function;import java.util.function.Consumer;import java.util.function.Predicate;/** *@author: lpc *@date: 29/11/2021 下午 2:00 *@describe: *@vision *///消费型接口：只有输入，没有返回值public class Demo03 {  public static void main(String[] args) {//    Consumer<string> consumer =//        new Consumer<string>() {//          @Override//          public void accept(String str) {//            System.out.println(str);//          }//        };    Consumer<string> consumer =(str)->{      System.out.println(str);    };    consumer.accept("123");  }}</string></string></string></code></pre><h2><span id="suppier-供给型接口">Suppier 供给型接口</span></h2><p>供给型接口：没有参数，有返回值</p><p><img src="/2022/01/08/juc/image-20211129141127727.png" alt="image-20211129141127727"></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.function;import java.util.function.Consumer;import java.util.function.Supplier;/** *@author: lpc *@date: 29/11/2021 下午 2:00 *@describe: *@vision *///供给型接口：没有输入，有返回值public class Demo04 {  public static void main(String[] args) {//    Supplier<integer> supplier= new Supplier<integer>(){//      @Override//      public Integer get() {//        return 1024;//      }//    };    Supplier<integer> supplier=()->{ return 1024;};    System.out.println(supplier.get());  }}</integer></integer></integer></code></pre><h1><span id="stream-流式计算">Stream 流式计算</span></h1><blockquote><p>什么Stream 是流式计算</p></blockquote><p>存储+计算</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 2:18 * @describe: * * 题目要求： * 一分钟内完成此题，用一行代码实现 * 现有5个用户!筛选： * 1. Id 必须是偶数 * 2.年龄必须大于23 * 3. 用户名转为大写 * 4. 用户名倒序 * 5. 只能输出一个用户 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      User u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      User u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      User u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      User u4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      User u5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//集合就是存储</span>      List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> u3<span class="token punctuation">,</span> u4<span class="token punctuation">,</span> u5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//计算就交给stream</span>      <span class="token comment" spellcheck="true">//链式变成</span>      list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//过滤</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">23</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//转换</span>              <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uu1<span class="token punctuation">,</span>uu2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> uu2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>uu1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//排序</span>              <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//分页</span>              <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="forkjoin">ForkJoin</span></h1><p>分支合并</p><h2><span id="什么是forkjoin">什么是ForkJoin</span></h2><p>ForkJoin在jdk1.7，并行执行任务！提高效率。大数据量！</p><p>大数据：<strong>MapReduce 核心思想-&gt;把大任务拆分为小任务！</strong></p><p><img src="/2022/01/08/juc/image-20211129143700674.png" alt="image-20211129143700674"></p><h2><span id="forkjoin特点">ForkJoin特点</span></h2><p>工作窃取：B线程执行完了，偷A线程 一个任务来执行，提高效率！</p><p><img src="/2022/01/08/juc/image-20211129143834653.png" alt="image-20211129143834653"></p><p>实现原理是：<strong>双端队列</strong>！从上面和下面都可以去拿到任务进行执行！</p><h2><span id="如何使用forkjoin">如何使用ForkJoin?</span></h2><ul><li>1、通过<strong>ForkJoinPool</strong>来执行</li><li>2、计算任务 <strong>execute(ForkJoinTask&lt;?&gt; task)</strong></li><li>3、计算类要去继承ForkJoinTask；</li></ul><p>任务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>forkjoin<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinTask<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>RecursiveTask<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 2:42 * @describe: * 369等程序员 * 3000 6000(ForkJoin) 9000(Stream并行流) * 如何使用ForkJoin * 1、forkjoinPool 通过他来执行 * 2、执行任务forkjoinPool.execute(ForkJoinTask&lt;?> task) * @vision */</span><span class="token comment" spellcheck="true">// 求和计算任务!</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForkJoinDemo</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Long start<span class="token punctuation">;</span>  <span class="token keyword">private</span> Long end<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 临界值</span>  <span class="token keyword">private</span> Long temp <span class="token operator">=</span> 10000L<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">ForkJoinDemo</span><span class="token punctuation">(</span>Long start<span class="token punctuation">,</span> Long end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 计算方法</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> Long <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Long i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span>  sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      Long middle <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中间值</span>      <span class="token comment" spellcheck="true">//拆分任务</span>      ForkJoinDemo task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>      task1<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把任务压入线程队列</span>      ForkJoinDemo task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>      task2<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把任务压入线程队列</span>      <span class="token comment" spellcheck="true">// 结果</span>      <span class="token keyword">return</span> task1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>task2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>forkjoin<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinPool<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinTask<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>LongStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 3:11 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    test1();//5768</span><span class="token comment" spellcheck="true">//    test2(); // 3789</span>    <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 205</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 普通程序员</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Long i <span class="token operator">=</span> 1L<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> 10_0000_0000L<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 使用ForkJoin</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ForkJoinPool forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 任务</span>    ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 10_0000_0000L<span class="token punctuation">)</span><span class="token punctuation">;</span>    ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> submit <span class="token operator">=</span> forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 提交任务</span>    Long sum <span class="token operator">=</span> submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//Stream并行流</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> sum<span class="token operator">=</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 10_0000_0000L<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span> <span class="token operator">+</span>sum<span class="token operator">+</span> <span class="token string">"时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>.parallel().reduce(0, Long::sum)使用一个并行流去计算整个计算，提高效率。</strong></p><p><img src="/2022/01/08/juc/image-20211129153524654.png" alt="image-20211129153524654"></p><h1><span id="异步回调">异步回调</span></h1><blockquote><p>Future 设计的初衷：对将来的某个事件结果进行建模！</p></blockquote><p>其实就是前端 –&gt; 发送ajax异步请求给后端</p><p><img src="/2022/01/08/juc/image-20211129155214089.png" alt="image-20211129155214089"></p><p>但是我们平时都使用<strong>CompletableFuture</strong></p><h2><span id="没有返回值的runasync异步回调">没有返回值的runAsync异步回调</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>future<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CompletableFuture<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 3:46 *@describe: * 异步调用 CompletableFuture * 异步执行 * 成功回调 * 失败回调 *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 没有返回值的异步回调</span>    CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> completableFuture <span class="token operator">=</span>         CompletableFuture<span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"runAsync=>Void"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取执行结果 会阻塞(没有结果，会等待结果)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="有返回值的异步回调supplyasync">有返回值的异步回调supplyAsync</span></h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//有返回值的异步回调supplyAsync</span>CompletableFuture<span class="token operator">&lt;</span>Integer<span class="token operator">></span> completableFuture <span class="token operator">=</span>        CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>    completableFuture        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>t<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t = "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正常的返回结果</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u = "</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误信息</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token number">233</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误返回结果</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>whenComplete</strong>: 有两个参数，一个是t 一个是u</p><p>T：是代表的 <strong>正常返回的结果</strong>；</p><p>U：是代表的 <strong>抛出异常的错误信息</strong>；</p><p>如果发生了异常，get可以获取到<strong>exceptionally</strong>返回的值；</p><h1><span id="jmm">JMM</span></h1><h2><span id="对volatile-的理解">对Volatile 的理解</span></h2><p>Volatile 是 Java 虚拟机提供 轻量级的同步机制</p><p>1、保证可见性<br><strong>2、不保证原子性</strong><br>3、禁止指令重排</p><blockquote><p>如何实现可见性</p></blockquote><p>volatile变量修饰的共享变量在进行写操作的时候回多出一行汇编：</p><p>0x01a3de1d:movb $0×0，0×1104800（%esi）;0x01a3de24**:lock** addl $0×0,(%esp);</p><p>Lock前缀的指令在多核处理器下会引发两件事情。</p><p>1）将当前处理器缓存行的数据写回到系统内存。</p><p>2）这个写回内存的操作会使其他cpu里缓存了该内存地址的数据无效。</p><blockquote><p><strong>多处理器总线嗅探：</strong></p></blockquote><p>为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存后再进行操作，但操作不知道何时会写到内存。如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。但是在<strong>多处理器下</strong>，为了保证各个处理器的缓存是一致的，就会实现缓存缓存一致性协议，<strong>每个处理器通过嗅探在总线上传播的数据来检查自己的缓存值是不是过期了，如果处理器发现自己缓存行对应的内存地址呗修改，就会将当前处理器的缓存行设置无效状态</strong>，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据库读到处理器缓存中。</p><h2><span id="什么是jmm">什么是JMM？</span></h2><p>JMM：JAVA内存模型，不存在的东西，是一个概念，也是一个约定！</p><p><strong>关于JMM的一些同步的约定：</strong></p><p>1、线程解锁前，必须把共享变量<strong>立刻</strong>刷回主存；</p><p>2、线程加锁前，必须<strong>读取主存</strong>中的最新值到工作内存中；</p><p>3、加锁和解锁是同一把锁；</p><p>线程中分为 <strong>工作内存、主内存</strong></p><p><strong>8种操作:</strong></p><ul><li><p>Read（读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用；</p></li><li><p>load（载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中；</p></li><li><p>Use（使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令；</p></li><li><p>assign（赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中；</p></li><li><p>store（存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用；</p></li><li><p>write（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中；</p></li><li><p>lock（锁定）：作用于主内存的变量，把一个变量标识为线程独占状态；</p></li><li><p>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定；</p></li></ul><p><strong>线程A</strong></p><p>(图问题：先store在write)</p><p><img src="/2022/01/08/juc/image-20211129163421440.png" alt="image-20211129163421440"></p><p><strong>线程B</strong></p><p>(图问题：先store在write)</p><p><img src="/2022/01/08/juc/image-20211129163722185.png" alt="image-20211129163722185"></p><p><strong>JMM对这8种操作给了相应的规定</strong>：</p><ul><li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li><li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li><li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li><li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是对变量实施use、store操作之前，必须经过assign和load操作</li><li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li><li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li><li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li><li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li></ul><h2><span id="问题">问题</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>_volatile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 4:42 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线程1</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>我们发现运行后程序并没有结束？</strong></p><p>线程A并不知道main线程已经修改了num，此时线程A的num依旧等于0，所以线程A没有停止</p><p><img src="/2022/01/08/juc/image-20211129164629173.png" alt="image-20211129164629173"></p><h2><span id="volatile">volatile</span></h2><p><strong>volatile是JVM提供的轻量级的同步机制</strong></p><p>用来解决上面那个问题</p><h3><span id="保证可见性">保证可见性</span></h3><p>加入volatile关键子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>_volatile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 4:42 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不加volatile程序就会死循环</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="不保证原子性">不保证原子性</span></h3><p>原子性：不可分割；</p><p>线程A在执行任务的时候，不能被打扰的，也不能被分割的，要么同时成功，要么同时失败。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>_volatile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 4:59 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// volatile 不保证原子性</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo2</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    num<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 结果理论上是2万</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>如果不加lock和synchronized ，怎么样保证原子性？</strong></p><p>num++;不是一个原子性操作原因</p><p><img src="/2022/01/08/juc/image-20211129171735490.png" alt="image-20211129171735490"></p><p><strong>使用原子类</strong></p><p><img src="/2022/01/08/juc/image-20211129172026912.png" alt="image-20211129172026912"></p><p><strong>AtomicInteger类</strong></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc._volatile;import java.util.concurrent.atomic.AtomicInteger;/** * @author: lpc * @date: 29/11/2021 下午 4:59 * @describe: * @vision */// volatile 不保证原子性public class JMMDemo2 {  private static volatile AtomicInteger num = new AtomicInteger();  public static void add() {//    num++;不是一个原子性操作    num.getAndIncrement();//+1 CAS  }  public static void main(String[] args) {    // 结果理论上是2万    for (int i = 1; i <= 20; i++) { new thread( () -> {                for (int j = 0; j < 1000; j++) {                  add();                }              })          .start();    }    while (Thread.activeCount() > 2) {      Thread.yield();    }    System.out.println(Thread.currentThread().getName() + " " + num);  }}</=></code></pre><p>这些类的操作都直接和系统挂钩！在内存中修改</p><p>Unsafe类是一个很特殊的存在</p><h3><span id="禁止指令重排">禁止指令重排</span></h3><p><strong>什么是指令重排？</strong></p><p><strong>我们写的程序，计算机并不是按照我们自己写的那样去执行的</strong></p><p>源代码–&gt;编译器优化重排–&gt;指令并行也可能会重排–&gt;内存系统也会重排–&gt;执行</p><p><strong>处理器在进行指令重排的时候，会考虑数据之间的依赖性！</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>x<span class="token operator">=</span>x<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//3</span>y<span class="token operator">=</span>x<span class="token operator">*</span>x<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//4</span><span class="token comment" spellcheck="true">//我们期望的执行顺序是 1_2_3_4  可能执行的顺序会变成2134 1324</span><span class="token comment" spellcheck="true">//可不可能是 4123？ 不可能的</span></code></pre><p>可能造成的影响结果：前提：a b x y这四个值 默认都是0</p><table><thead><tr><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>x=a</td><td>y=b</td></tr><tr><td>b=1</td><td>a=2</td></tr></tbody></table><p><strong>正常的结果</strong>： x = 0; y =0;</p><table><thead><tr><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>b=1</td><td>a=2</td></tr><tr><td>x=a</td><td>y=b</td></tr></tbody></table><p>可能在线程A中会出现，先执行b=1,然后再执行x=a；</p><p>在B线程中可能会出现，先执行a=2，然后执行y=b；</p><p>那么就有可能结果如下：x=2; y=1.(<strong>指令重排导致的结果</strong>)</p><p><strong>volatile可以避免指令重排：</strong></p><p><strong>volatile中会加一道内存的屏障，这个内存屏障可以保证在这个屏障中的指令顺序。</strong></p><p>内存屏障：CPU指令。</p><p>内存屏障作用：</p><p>1、保证特定的操作的执行顺序；</p><p>2、可以保证某些变量的内存可见性（利用这些特性，就可以保证volatile实现的可见性）</p><p><img src="/2022/01/08/juc/image-20211129175023221.png" alt="image-20211129175023221"></p><h3><span id="总结">总结</span></h3><ul><li><strong>volatile可以保证可见性；</strong></li><li><strong>不能保证原子性</strong></li><li><strong>由于内存屏障，可以保证避免指令重排的现象产生</strong></li></ul><p>面试官：那么你知道在哪里用这个内存屏障用得最多呢？<strong>单例模式</strong></p><h1><span id="玩转单例模式">玩转单例模式</span></h1><p>饿汉式、DCL懒汉式(用到了volatile)</p><h2><span id="饿汉式">饿汉式</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>single<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 5:58 *@describe: *@vision */</span><span class="token comment" spellcheck="true">//饿汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一上来就加载 但我是想用的时候在创建 浪费空间</span>  <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Hungry Hungry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Hungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Hungry<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="dcl懒汉式">DCL懒汉式</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>single<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 6:02 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// 懒汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> key <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        key <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不要试图用反射破坏异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan lazyMan<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//双重检测模式的，懒汉式单利 DCL懒汉式</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyMan <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyMan <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          lazyMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不是一个原子性操作</span>          <span class="token comment" spellcheck="true">/**           * 1.分配空间           * 2.执行构造方法，初始化对象           * 3.把这个对象指向这个空间           *           * 123           * 132 A           *     B 此时layzMan还没有完成初始化           *     加入volatile避免指令重排           */</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lazyMan<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//反射</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    LazyMan instance = LazyMan.getInstance();</span>    Field key <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Constructor<span class="token operator">&lt;</span>LazyMan<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无视私有化构造</span>    LazyMan instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LazyMan instance3 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance3<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="静态内部类">静态内部类</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>single<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 29/11/2021 下午 6:37 *@describe: *@vision */</span><span class="token comment" spellcheck="true">//静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Holder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Holder <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>Holder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Holder Holder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="单例不安全-因为反射"><strong>单例不安全, 因为反射</strong></span></h2><h2><span id="枚举">枚举</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>single<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 7:00 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// enum 是一个什么？本身也是一个class类</span><span class="token keyword">public</span> <span class="token keyword">enum</span> EnumSingle <span class="token punctuation">{</span>  INSTANCE<span class="token punctuation">;</span>  <span class="token keyword">public</span> EnumSingle <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    EnumSingle instance <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    Constructor<span class="token operator">&lt;</span>EnumSingle<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EnumSingle instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用枚举，我们就可以防止反射破坏了。</p><p>枚举类型的最终反编译源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">EnumSingle</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EnumSingle<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>EnumSingle<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$VALUES<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EnumSingle <span class="token function">valueOf</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>EnumSingle<span class="token punctuation">)</span>Enum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>com<span class="token operator">/</span>ogj<span class="token operator">/</span>single<span class="token operator">/</span>EnumSingle<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">EnumSingle</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> EnumSingle <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EnumSingle INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EnumSingle $VALUES<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span>     <span class="token punctuation">{</span>        INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumSingle</span><span class="token punctuation">(</span><span class="token string">"INSTANCE"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $VALUES <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EnumSingle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            INSTANCE        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="深入理解cas">深入理解CAS</span></h1><h2><span id="什么是cas">什么是CAS？</span></h2><p><strong>CAS Compare and swap 比较和交换</strong></p><p>大厂必须深入研究底层！！！！<strong>修内功！操作系统、计算机网络原理、组成原理、数据结构</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>cas<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 7:17 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// CAS compareAndSet 比较并交换</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//        如果期望的值达到了 那么就更新 否则 就不更新</span>    <span class="token comment" spellcheck="true">// CAS 是cpu都并发原语</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为期望值是2020  实际值却变成了2021  所以会修改失败</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Unsafe类</p></blockquote><p><img src="/2022/01/08/juc/image-20211129192605731.png" alt="image-20211129192605731"></p><p>+1操作都背后：是一个内存操作</p><p><img src="/2022/01/08/juc/image-20211129193134675.png" alt="image-20211129193134675"></p><p>他也是个自旋锁</p><p><img src="/2022/01/08/juc/image-20211129193544640.png" alt="image-20211129193544640"></p><h2><span id="总结">总结</span></h2><p>CAS：比较当前工作内存中的值 和 主内存中的值，如果这个值是期望的，那么则执行操作！<strong>如果不是就一直循环</strong>，使用的是自旋锁。</p><p><strong>会阻塞</strong></p><p><strong>缺点：</strong></p><ul><li>循环会耗时；</li><li>一次性只能保证一个共享变量的原子性；</li><li>它会存在ABA问题</li></ul><h2><span id="casaba问题狸猫换太子">CAS：ABA问题？(狸猫换太子)</span></h2><p>一个线程期望A是1 然后把A改成2</p><p>另一个线程比他快，它把A换成了3然后又改成了1</p><p>第一个线程拿到A，现在A确实为1</p><p>(但这个A,还是原来都A么？)</p><p><img src="/2022/01/08/juc/image-20211129194315644.png" alt="image-20211129194315644"></p><p>线程1：期望值是1，要变成2；</p><p>线程2：两个操作：</p><ul><li>1、期望值是1，变成3</li><li>2、期望是3，变成1</li></ul><p>所以对于线程1来说，A的值还是1，所以就出现了问题，骗过了线程1；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>cas<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 7:17 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// CAS compareAndSet 比较并交换</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ===================捣乱的线程 =====================</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ===================期望的线程 =====================</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="原子引用">原子引用</span></h1><blockquote><p>解决ABA问题，对应的思想：就是使用了<strong>乐观锁~</strong></p><p>引用原子引用就解决了ABA问题:加入一个版本号</p></blockquote><h2><span id="带版本号的-原子操作">带版本号的 原子操作！</span></h2><p><strong>中途遇到问题</strong></p><p><strong>Integer 使用了对象缓存机制，默认范围是-128~127，推荐使用静态工厂方法valueOf获取对象实例，而不是new，因为valueOf使用缓存，而new一定会创建新的对象分配新的内存空间。</strong></p><p><img src="/2022/01/08/juc/image-20211129202415209.png" alt="image-20211129202415209"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>cas<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicStampedReference<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 7:17 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// CAS compareAndSet 比较并交换</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AtomicStampedReference<span class="token operator">&lt;</span>Integer<span class="token operator">></span> atomicStampedReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得版本号</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1=>"</span> <span class="token operator">+</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1："</span><span class="token operator">+</span>                  atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>                      <span class="token number">1</span><span class="token punctuation">,</span>                      <span class="token number">2</span><span class="token punctuation">,</span>                      atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a2=>"</span> <span class="token operator">+</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a2："</span><span class="token operator">+</span>                  atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>                      <span class="token number">2</span><span class="token punctuation">,</span>                      <span class="token number">1</span><span class="token punctuation">,</span>                      atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"a"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得版本号</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1=>"</span> <span class="token operator">+</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1："</span><span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"b"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="各种锁的理解">各种锁的理解</span></h1><h2><span id="公平锁非公平锁">公平锁，非公平锁</span></h2><ol><li><p>公平锁：非常公平，不能插队，必须先来后到</p></li><li><p>非公平锁：非常不公平，允许插队，可以改变顺序(默认都是非公平锁)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>   sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2><span id="可重入锁递归锁">可重入锁(递归锁)</span></h2><p><img src="/2022/01/08/juc/image-20211129204158822.png" alt="image-20211129204158822"></p><p>两者有区别：一个是一把锁，一个是两把锁</p><p><strong>synchronized</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 8:42 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// Synchronized</span><span class="token comment" spellcheck="true">// A执行完B才走?</span><span class="token comment" spellcheck="true">// A走到call才释放锁(包含拿到sms的锁，sms的锁包含call的锁),B才可以执行</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"B"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"sms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里也有锁</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>lock</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 8:48 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// lock锁</span><span class="token comment" spellcheck="true">// A线程先拿到sms锁，又拿了call的锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Phone2 phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"A"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"B"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone2</span> <span class="token punctuation">{</span>  Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"sms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里也有锁</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>lock锁必须配对，相当于lock和 unlock 必须数量相同；</li><li>在外面加的锁，也可以在里面解锁；在里面加的锁，在外面也可以解锁；</li></ul><h2><span id="自旋锁">自旋锁</span></h2><p><strong>spinlock</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> var5<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>自我设计自旋锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 9:28 * @describe: * @vision */</span><span class="token comment" spellcheck="true">// 自旋锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpinlockDemo</span> <span class="token punctuation">{</span>  AtomicReference<span class="token operator">&lt;</span>Thread<span class="token operator">></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 加锁</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>mylock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果不是我期望的null就一直循环，如果是就把它变成我的线程</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 解锁</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>myUnlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果它是我期望的线程，就把他变成null</span>    atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>NEW<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 29/11/2021 下午 9:36 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpinLock</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    SpinlockDemo spinlockDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpinlockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>      spinlockDemo<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        spinlockDemo<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>      spinlockDemo<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        spinlockDemo<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>T1拿到锁后 T2一直在自旋(因为期望值不是null)</p><p>T1释放锁后 T2拿到锁又释放</p><p>拿到锁：把null变为线程(泛型)</p><p>释放锁：把线程变为null</p><h2><span id="死锁">死锁</span></h2><p><img src="/2022/01/08/juc/image-20211129214900507.png" alt="image-20211129214900507"></p><pre class=" language-JAVA"><code class="language-JAVA">package com.lpc.lock;import java.util.concurrent.TimeUnit;/** *@author: lpc *@date: 29/11/2021 下午 9:50 *@describe: *@vision */public class DeadLockDemo {  public static void main(String[] args) {    String lockA = "lockA";    String lockB = "lockB";    new Thread(new MyThread(lockA,lockB),"T1").start();    new Thread(new MyThread(lockB,lockA),"T2").start();  }}class MyThread implements Runnable{  private String lockA;  private String lockB;    public MyThread(String lockA, String lockB) {        this.lockA = lockA;        this.lockB = lockB;    }    @Override    public void run() {        synchronized(lockA){      System.out.println(Thread.currentThread().getName()+"lock:"+lockA+"=>get "+lockB);            try {                TimeUnit.SECONDS.sleep(2);            } catch (InterruptedException e) {                e.printStackTrace();            }            synchronized(lockB){                System.out.println(Thread.currentThread().getName()+"lock:"+lockB+"=>get "+lockA);            }        }    }}</code></pre><h3><span id="如何解开死锁">如何解开死锁</span></h3><p><strong>1、使用jps定位进程号，jdk的bin目录下： 有一个jps</strong></p><p>命令：<code>jps -l</code></p><p><img src="/2022/01/08/juc/image-20211129215816633.png" alt="image-20211129215816633"></p><p><strong>2、使用<code>jstack</code> 进程进程号 找到死锁信息</strong></p><p><img src="/2022/01/08/juc/image-20211129215931783.png" alt="image-20211129215931783"></p><p><strong>一般情况信息在最后：</strong></p><p><img src="/2022/01/08/juc/image-20211129220035433.png" alt="image-20211129220035433"></p>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2022/01/08/shu-ju-jie-gou-he-suan-fa-wei-wan/"/>
      <url>/2022/01/08/shu-ju-jie-gou-he-suan-fa-wei-wan/</url>
      
        <content type="html"><![CDATA[<h1><span id="结构分类">结构分类</span></h1><p>存储结构：顺序结构、链式结构</p><p>逻辑结构：集合、线性、树形、图形</p><h1><span id="线性结构">线性结构</span></h1><h2><span id="数组结构">数组结构</span></h2><h3><span id="二分法查找">二分法查找</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>数组<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 5:23 * @describe: 二分法查找:不断查找中间位置的值 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">"在数组的"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"索引！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 开始位置</span>      <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 结束位置</span>      <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 中间位置</span>      <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 4、结束条件：数组里没有该元素</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 1、判断中间元素之是不是目标</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2、不是</span>            <span class="token comment" spellcheck="true">// 2.1、中间元素大于target，则它就在数组前边</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 调整end，结束位置</span>               end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 2.2、 小于target，则目标元素在数组后边</span>               <span class="token comment" spellcheck="true">// 调整begin，开始位置</span>               begin <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 3、调整中间值</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="栈结构">栈结构</span></h2><p>栈的底层就是数组：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span>   <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>   <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//vector是集合中的一个线程安全的类，它是用数组实现的</span>   <span class="token keyword">protected</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>数组模拟</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>栈<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 5:51 * @describe: 模拟栈结构：先进后出 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//栈</span>    Stack stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 压栈</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 栈的状态</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出栈</span>    <span class="token keyword">int</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出栈顶元素："</span><span class="token operator">+</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 栈的状态</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 栈的底层使用数组来存储</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 压栈</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建新数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 复制原来的数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加新加入的元素</span>    array<span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 替换旧数组</span>    elements <span class="token operator">=</span> array<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 出栈</span>  <span class="token keyword">public</span>  <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"stack is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 取出最后一个元组(栈顶元素)</span>    <span class="token keyword">int</span> element <span class="token operator">=</span> elements<span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建新数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 复制元素组，除了最后一个</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 替换旧数组</span>    elements <span class="token operator">=</span> array<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 查看栈的全部元素</span>  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> elements<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="队列结构">队列结构</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>队列<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 6:19 * @describe: 队列 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 队列</span>    Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 入队</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出队</span>    <span class="token keyword">int</span> poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出头元素"</span><span class="token operator">+</span>poll<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 队列，使用数组来存储</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 入队 ，和栈的入栈一样</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建新数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 复制原来的数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加新加入的元素</span>    array<span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 替换旧数组</span>    elements <span class="token operator">=</span> array<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 出队，返回队列头部数据(和栈相反)</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"queue is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 头元素</span>    <span class="token keyword">int</span> element <span class="token operator">=</span> elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 其他元素在组成一个队列</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 替换旧数组</span>    elements <span class="token operator">=</span> array<span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 查看栈的全部元素</span>  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> elements<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="单链表">单链表</span></h2><p>一个节点连接着一个节点，每个节点的存储位置不同</p><p>节点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>单链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 6:55 * @describe: 节点:节点内容 下一个节点 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 节点内容</span>  <span class="token keyword">int</span> data<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 下一个节点</span>  Node next<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 追加节点,找到最后的一个节点，添加，再返回添加的这个节点</span>  <span class="token keyword">public</span> Node <span class="token function">append</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取下一个节点</span>  <span class="token keyword">public</span> Node <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取当前节点内容</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除这个节点的下一个节点,并返回被删除的节点</span>  <span class="token keyword">public</span> Node <span class="token function">removeNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node next1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    Node next2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next2<span class="token punctuation">;</span>    <span class="token keyword">return</span> next1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 显示所有节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 在这个节点后边插入一个节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Node{"</span> <span class="token operator">+</span> <span class="token string">"data="</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">", next="</span> <span class="token operator">+</span> next <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>单链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 31/1/2022 下午 6:57 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建节点</span>    Node n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node n4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加了n1、n2、n3节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 追加节点</span>    n1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 显示链表所有节点数据</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"所有节点的数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取某一个节点的数据</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1节点存储的内容是："</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n2节点存储的内容是："</span> <span class="token operator">+</span> n2<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n3节点存储的内容是："</span> <span class="token operator">+</span> n3<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//移除一个节点</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除n2节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node node <span class="token operator">=</span> n2<span class="token punctuation">.</span><span class="token function">removeNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除的节点是"</span> <span class="token operator">+</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"所有节点的数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入n4节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>n4<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"所有节点的数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果</p><pre class=" language-tex"><code class="language-tex">添加了n1、n2、n3节点所有节点的数据:1 3 5 n1节点存储的内容是：1n2节点存储的内容是：3n3节点存储的内容是：5删除n2节点删除的节点是Node{data=5, next=null}所有节点的数据:1 3 插入n4节点所有节点的数据:1 7 3 </code></pre><h2><span id="循环链表">循环链表</span></h2><p>把单链表的最后一个元素的下一个元素设置为头元素，形成循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>循环链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 9:03 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoopNode</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 节点内容</span>  <span class="token keyword">int</span> data<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 下一个节点</span>  LoopNode next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">LoopNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取下一个节点</span>  <span class="token keyword">public</span> LoopNode <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取当前节点内容</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除这个节点的下一个节点,并返回被删除的节点</span>  <span class="token keyword">public</span> LoopNode <span class="token function">removeNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LoopNode next1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    LoopNode next2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next2<span class="token punctuation">;</span>    <span class="token keyword">return</span> next1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 在这个节点后边插入一个节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>LoopNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LoopNode next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>循环链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 1/2/2022 上午 9:11 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建节点</span>      LoopNode loopNode1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LoopNode loopNode2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LoopNode loopNode3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//增加节点</span>      loopNode1<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>loopNode2<span class="token punctuation">)</span><span class="token punctuation">;</span>      loopNode2<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>loopNode3<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loopNode3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="双向循环链表">双向循环链表</span></h2><p>节点:指向上一个节点和下一个节点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>双向循环链表<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>RET<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 9:32 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleNode</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 上一个节点</span>  DoubleNode pre<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 下一个节点</span>  DoubleNode next<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 节点数据</span>  <span class="token keyword">int</span> data<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">DoubleNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//  增加节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>DoubleNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 原来的下一个节点</span>    DoubleNode next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 现在的下一个节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个新节点的前一个节点</span>    node<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个新节点的下一个节点</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个新节点的下一个节点的前一个节点</span>    next<span class="token punctuation">.</span>pre <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 需要修改的有三个节点：这个节点(next属性) (pre属性)新节点(next属性) (pre属性)这个节点的下一个节点</span>    <span class="token comment" spellcheck="true">// 这个节点的前一个节点会自动改变，新节点的下一个节点设置为next,next=this 连带this.pre也修改了值为新节点</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 下一个节点</span>  <span class="token keyword">public</span> DoubleNode <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 上一个节点</span>  <span class="token keyword">public</span> DoubleNode <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pre<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取节点数据</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>双向循环链表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 9:47 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建节点</span>    DoubleNode n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DoubleNode n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DoubleNode n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的上一个节点的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的下一个节点的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加n2节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    n2.after(n3);</span><span class="token comment" spellcheck="true">//    System.out.println("添加n3节点");</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的上一个节点的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1的下一个节点的数据"</span> <span class="token operator">+</span> n1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="递归">递归</span></h2><p>斐波那契数列</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>递归<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 10:16 * @describe: 斐波那契数列 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Febonacci</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 斐波那契额数列:1 1 2 3 5 8 每一项是前两项的和</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一项或第二项的值为1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这一项的前两项的和</span>    <span class="token keyword">return</span> <span class="token function">show</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">show</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>汉诺塔</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 线性结构<span class="token punctuation">.</span>递归<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 10:34 * @describe: 汉诺塔 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hanoi</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * @param n 盘子   * @param from 开始的柱子   * @param in 中间的柱子   * @param to 目标的柱子    只有两个盘子：一个底部的和一个上部的，   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> from<span class="token punctuation">,</span> <span class="token keyword">char</span> in<span class="token punctuation">,</span> <span class="token keyword">char</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个盘子从"</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">"移动到"</span> <span class="token operator">+</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 移动上面的盘子到中间位置</span>      <span class="token function">show</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 移动下面的盘子</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>n<span class="token operator">+</span><span class="token string">"个盘子从"</span><span class="token operator">+</span>from<span class="token operator">+</span><span class="token string">"移动到"</span><span class="token operator">+</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 把上面的盘子从中间位置移动到目标位置</span>      <span class="token function">show</span><span class="token punctuation">(</span>n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="排序算法5类8种">排序算法（5类8种）</span></h1><h2><span id="选择排序">选择排序</span></h2><h3><span id="1-冒泡">1、冒泡</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">.</span>交换排序<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 11:13 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 冒泡排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 比较长度-1轮</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 每轮比较 长度-1-确定的位数</span>      <span class="token comment" spellcheck="true">// 第一轮比较 长度-1，后面每次-1，因为每次一轮比较后确定一位最大数</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="2-快速排序">2、快速排序</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">.</span>交换排序<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 上午 11:23 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 快速排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 从开始start排到结尾end   *   * @param arr   * @param start   * @param end   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 把数组中的第0个数字作为标准数</span>      <span class="token keyword">int</span> stard <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 记录需要排序的下标</span>      <span class="token keyword">int</span> low <span class="token operator">=</span> start<span class="token punctuation">;</span>      <span class="token keyword">int</span> high <span class="token operator">=</span> end<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 循环找比标准数大的数和小的数，进行分类</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 右边数字比标准数大，下标向前，移动下标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> stard <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          high<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 右边数字比标准数小，使用右边的数字替换左边的数字</span>        arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 左边数字倍比标准数小，就移动下标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> stard<span class="token punctuation">)</span> <span class="token punctuation">{</span>          low<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//替换</span>        arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 标准数在中间</span>      arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> stard<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 处理左边</span>      <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 处理右边</span>      <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="插入排序">插入排序</span></h2><h3><span id="3-直接插入排序">3、直接插入排序</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">.</span>插入排序<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 下午 1:26 * @describe: 确定左边的数，左边的都是小的，从右边拿一个依次和前边比 * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 直接插入排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历当前数字的前方的数字</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//给后面的赋值</span>          arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//给前面的赋值。注意j--</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="4-希尔排序">4、希尔排序</span></h3><pre class=" language-JAVA"><code class="language-JAVA">package 排序算法.插入排序;import java.util.Arrays;/** * @author: lpc * @date: 1/2/2022 下午 3:23 * @describe: * @vision */public class 希尔排序 {  public static void main(String[] args) {    int[] arr = {55, 1, 3, 5, 2, 4, 99, 66, 77, 44, 33};    System.out.println(Arrays.toString(arr));    show(arr);    System.out.println(Arrays.toString(arr));  }  public static void show(int[] arr) {    // 遍历步长    for (int d = arr.length / 2; d > 0; d /= 2) {      // 遍历d后边所有元素      for (int i = d; i < arr.length; i++) {        // 遍历d前边的所有元素        for (int j = i - d; j >= 0; j -= d) {          if (arr[j] > arr[j + d]) {            int temp = arr[j];            arr[j] = arr[j + d];            arr[j + d] = temp;          }        }      }    }  }}</code></pre><h2><span id="选择排序">选择排序</span></h2><h3><span id="5-简单选择排序">5、简单选择排序</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">.</span>选择排序<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 下午 4:20 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 简单选择排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          index <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//本身就是最小的，就不需要交换了</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="6-堆排序">6、堆排序</span></h3><h2><span id="7-归并排序">7、归并排序</span></h2><pre class=" language-JAVA"><code class="language-JAVA">package 排序算法;import java.util.Arrays;/** * @author: lpc * @date: 1/2/2022 下午 7:04 * @describe: * @vision */public class 归并排序 {  public static void main(String[] args) {    int[] arr = {55, 1, 3, 5, 2, 4, 99, 66, 77, 44, 33};    System.out.println(Arrays.toString(arr));    showSort(arr, 0, arr.length - 1);    System.out.println(Arrays.toString(arr));  }  public static void showSort(int[] arr, int low, int high) {    int middle = (high + low) / 2;    if (low < high) {      // 处理左边      showSort(arr, low, middle);      // 处理右边      showSort(arr, middle + 1, high);      // 归并      show(arr, low, middle, high);    }  }  /**   * 用middle拆分为两个数组   *   * @param arr   * @param low 开始位置   * @param middle 中间位置   * @param high 结束位置   */  public static void show(int[] arr, int low, int middle, int high) {    // 临时数组，high-low+1=元素个数/长度(这一组的长度)    int[] temp = new int[high - low + 1];    // 第一个数组的开始位置    int i = low;    // 第二个数组的开始位置    int j = middle + 1;    // 记录临时数组下标    int index = 0;    // 遍历两个数组取出小的放入临时数组    while (i <= middle && j <="high)" { 第一个数组小 if (arr[i] temp[index]="arr[i];" index++; i++; } else 第二个数组小 j++; 某一个数组下标超出了,就把另一个数组的数全部加到临时数组 while (j (i 临时数组从新存入原数组 for (int k="0;" temp.length; k++) arr[k + low]="temp[k];" code></=></code></pre><h2><span id="8-基数排序">8、基数排序</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 排序算法<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 1/2/2022 下午 7:37 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 基数排序 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 找出最大的数字存数组中</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最大数是几位数</span>    <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建二维数组，存储数据(例:个位是1，存1号数组，百位是2存2号数组)</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 临时数组，记录二维数组中每位存入数字的个数</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据几位数确定比较次数(99是两位数，就比较2次,比较个位和十位)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> n <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 遍历每一个数字，</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取出每一位的数字(关键)</span>        <span class="token keyword">int</span> ys <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前数字放入二维数组中指定的位置</span>        temp<span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token punctuation">[</span>counts<span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 个数++</span>        counts<span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 取出数字</span>      <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> counts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 遍历个数</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> counts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取出元素,放回arr</span>            arr<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            w<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 记录个数置为0，下次要用</span>          counts<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="优化加入队列">优化加入队列</span></h3><pre class=" language-JAVA"><code class="language-JAVA">package 排序算法;import 线性结构.队列.Queue;import java.util.Arrays;/** * @author: lpc * @date: 1/2/2022 下午 7:37 * @describe: * @vision */public class 基数排序加入队列 {  public static void main(String[] args) {    int[] arr = {55, 1, 3, 5, 2, 4, 99, 66, 77, 44, 33};        System.out.println(Arrays.toString(arr));    show(arr);        System.out.println(Arrays.toString(arr));  }  public static void show(int[] arr) {    // 找出最大的数字存数组中    int max = Integer.MIN_VALUE;    for (int i = 0; i < arr.length; i++) {      if (arr[i] > max) {        max = arr[i];      }    }    // 最大数是几位数    int maxLength = (max + "").length();    // 创建10个队列    Queue[] temp = new Queue[10];    // 为队列数组赋值    for (int i = 0; i < temp.length; i++) {      temp[i] = new Queue();    }    // 根据几位数确定比较次数(99是两位数，就比较2次,比较个位和十位)    for (int i = 0, n = 1; i < maxLength; i++, n *= 10) {      // 遍历每一个数字，      for (int j = 0; j < arr.length; j++) {        // 取出每一位的数字(关键)        int ys = arr[j] / n % 10;        // 当前数字放入指定的队列        temp[ys].add(arr[j]);      }      // 取出数字      int w = 0;      for (int j = 0; j < temp.length; j++) {        // 遍历每个队列的所有元素        while (temp[j].status().length != 0) {          // 取出元素,放回arr          arr[w] = temp[j].poll();          w++;        }      }    }  }}</code></pre><h1><span id="树形结构">树形结构</span></h1><h2><span id="链式存储的二叉树">链式存储的二叉树</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 树结构<span class="token punctuation">.</span>二叉树<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 2/2/2022 上午 11:19 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 链式存储的二叉树 <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建树</span>    BinaryTree tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建根节点</span>    TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把根节点赋给树</span>    tree<span class="token punctuation">.</span><span class="token function">setRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建两个节点</span>    TreeNode rootL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode rootR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置为根节点的子节点</span>    root<span class="token punctuation">.</span><span class="token function">setLeftNode</span><span class="token punctuation">(</span>rootL<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span><span class="token function">setRightNode</span><span class="token punctuation">(</span>rootR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建子节点，给子节点添加子节点</span>    rootL<span class="token punctuation">.</span><span class="token function">setLeftNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//          1</span>    rootL<span class="token punctuation">.</span><span class="token function">setRightNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//     2        3</span>    rootR<span class="token punctuation">.</span><span class="token function">setLeftNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//    4   5    6   7</span>    rootR<span class="token punctuation">.</span><span class="token function">setRightNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  前序遍历 根左右</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前中后遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  中序遍历 左根右</span>    tree<span class="token punctuation">.</span><span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  后序遍历 左右根</span>    tree<span class="token punctuation">.</span><span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前序查找"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode result <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token function">frontSearch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除一个节点</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 树</span><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span> <span class="token punctuation">{</span>  TreeNode root<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置根节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoot</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取根节点</span>  <span class="token keyword">public</span> TreeNode <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 前序遍历</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 中序遍历</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 后序遍历</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 前序查找</span>  <span class="token keyword">public</span> TreeNode <span class="token function">frontSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">frontSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除一个节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 节点</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 权</span>  <span class="token keyword">int</span> value<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左节点</span>  TreeNode leftNode<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右节点</span>  TreeNode rightNode<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置左节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeftNode</span><span class="token punctuation">(</span>TreeNode leftNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>leftNode <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置右节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRightNode</span><span class="token punctuation">(</span>TreeNode rightNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rightNode <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 前序遍历 根左右</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 遍历字自己</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 左</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftNode<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 右</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      rightNode<span class="token punctuation">.</span><span class="token function">fronShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 中序遍历 左根右</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 左</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftNode<span class="token punctuation">.</span><span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历字自己</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 右</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      rightNode<span class="token punctuation">.</span><span class="token function">midShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 后序遍历 左右根</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 左</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftNode<span class="token punctuation">.</span><span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 右</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      rightNode<span class="token punctuation">.</span><span class="token function">afterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历字自己</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 前序查找</span>  <span class="token keyword">public</span> TreeNode <span class="token function">frontSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    TreeNode target <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对比当前节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 对比左节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> leftNode<span class="token punctuation">.</span><span class="token function">frontSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 对比右节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> rightNode<span class="token punctuation">.</span><span class="token function">frontSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除一个节点</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    TreeNode parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 左边</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>leftNode <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>leftNode<span class="token punctuation">.</span>value <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>leftNode <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 右边</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>rightNode <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>rightNode<span class="token punctuation">.</span>value <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没有，就去子节点找</span>    parent <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    parent <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"TreeNode{"</span>        <span class="token operator">+</span> <span class="token string">"value="</span>        <span class="token operator">+</span> value        <span class="token operator">+</span> <span class="token string">", leftNode="</span>        <span class="token operator">+</span> leftNode        <span class="token operator">+</span> <span class="token string">", rightNode="</span>        <span class="token operator">+</span> rightNode        <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="顺序存储的二叉树">顺序存储的二叉树</span></h2><img src="/2022/01/08/shu-ju-jie-gou-he-suan-fa-wei-wan/image-20220202134803648.png" alt="image-20220202134803648" style="zoom:200%;">]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/01/08/redis/"/>
      <url>/2022/01/08/redis/</url>
      
        <content type="html"><![CDATA[<h1><span id="nosql概述">Nosql概述</span></h1><h2><span id="单机mysql时代">单机Mysql时代</span></h2><p>90年代,一个网站的访问量一般不会太大，单个数据库完全够用。</p><p><img src="/2022/01/08/redis/image-20211201141023679.png" alt="image-20211201141023679"></p><p>随着用户增多，网站出现以下问题：</p><ol><li>数据量增加到一定程度，单机数据库就放不下了</li><li>数据的索引（B+ Tree）,一个机器内存也存放不下</li><li>访问量变大后（读写混合），一台服务器承受不住。</li></ol><h2><span id="memcached缓存-mysql-垂直拆分读写分离">Memcached(缓存) + Mysql + 垂直拆分（读写分离）</span></h2><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以<strong>使用缓存</strong>来保证效率！</p><p><img src="/2022/01/08/redis/image-20211201141832117.png" alt="image-20211201141832117"></p><p>优化过程经历了以下几个过程：</p><ol><li>优化数据库的数据结构和索引(难度大)</li><li>文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了</li><li>MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。</li></ol><h2><span id="分库分表-水平拆分-mysql集群">分库分表 + 水平拆分 + Mysql集群</span></h2><p><img src="/2022/01/08/redis/image-20211201143245890.png" alt="image-20211201143245890"></p><h2><span id="如今最近的年代">如今最近的年代</span></h2><p>如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql数据库就能轻松解决这些问题。目前一个基本的互联网项目：</p><p><img src="/2022/01/08/redis/image-20211201144846693.png" alt="image-20211201144846693"></p><h2><span id="为什么要用nosql">为什么要用NoSQL ？</span></h2><p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！</p><h3><span id="什么是nosql">什么是Nosql</span></h3><p>NoSQL = Not Only SQL（不仅仅是SQL）</p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><h3><span id="nosql特点">Nosql特点</span></h3><p>1.方便扩展（数据之间没有关系，很好扩展！）</p><p>2.大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p><p>3.数据类型是多样型的！（不需要事先设计数据库，随取随用）</p><p>4.传统的 RDBMS 和 NoSQL</p><pre><code>传统的RDBMS(关系型数据库管理系统)- 结构化组织- SQL- 数据和关系都存在单独的表中 row col- 操作，数据定义语言- 严格的一致性- 基础的事务- ...</code></pre><pre><code>Nosql-不仅仅是数据-没有固定的查询语言-键值对存储，列存储，文档存储，图形数据库（社交关系）-最终一致性-CAP定理和BASE-高性能，高可用，高扩展-...</code></pre><h3><span id="3v3高">3v+3高</span></h3><p>大数据时代的3V ：主要是描述问题的</p><ol><li>海量Velume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高 ： 主要是对程序的要求</p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p><h2><span id="nosql的四大分类">NoSQL的四大分类</span></h2><p><strong>kv键值对:</strong></p><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+memecache</li></ul><p><strong>文档型数据库(bson格式和json一样)</strong></p><ul><li>MongDB(一般必须掌握)<ul><li>MongDB是一个基于分布式文件存储都数据库，c++编写，主要用来处理大量都文档</li><li>MongDB是一个基于关系型数据库和非关系型数据库都中间产品！MongDB是非关系型数据库中功能最丰富的，最像关系型数据库都数据库！</li></ul></li><li>ConthDB</li></ul><p><strong>列存储数据库</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图形关系数据库</strong></p><ul><li>不是存图形，放的是关系，比如：朋友圈社交网络，广告推荐</li><li>Neo4j，InfoGrid</li></ul><p><img src="/2022/01/08/redis/image-20211201155955038.png" alt="image-20211201155955038"></p><h1><span id="redis入门">Redis入门</span></h1><h2><span id="redis是什么">Redis是什么？</span></h2><p>Redis（Remote Dictionary Server )，即远程字典服务。</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><h2><span id="redis能干什么">Redis能干什么？</span></h2><ol><li>内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）</li><li>高效率、用于高速缓冲</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器(eg：浏览量)</li><li>。。。</li></ol><h2><span id="特性">特性</span></h2><ol><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事务</li><li>…</li></ol><h2><span id="环境搭建略">环境搭建（略）</span></h2><p><a href="https://blog.csdn.net/qq_36706878/article/details/105578816">Linux配置java环境变量_过客璇璇的博客-CSDN博客</a></p><p>windows:<a href="https://www.bilibili.com/video/BV1S54y1R7SB?p=8&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1S54y1R7SB?p=8&amp;spm_id_from=pageDriver</a></p><p>linux:<a href="https://www.bilibili.com/video/BV1S54y1R7SB?p=9&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1S54y1R7SB?p=9&amp;spm_id_from=pageDriver</a></p><h2><span id="性能测试">性能测试</span></h2><p><strong>redis-benchmark：</strong>Redis官方提供的性能测试工具，参数选项如下：</p><p><img src="/2022/01/08/redis/image-20211201170322732.png" alt="image-20211201170322732"></p><p>简单测试：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 测试：100个并发连接 100000请求</span>redis-benchmark -h localhost -p 6379 -c 100 -n 100000</code></pre><p><img src="/2022/01/08/redis/image-20211201171126927.png" alt="image-20211201171126927"></p><h2><span id="基础知识">基础知识*</span></h2><p>redis默认有16个数据库</p><p><img src="/2022/01/08/redis/image-20211201171529597.png" alt="image-20211201171529597"></p><p>默认使用的第0个;</p><p>16个数据库为：DB 0~DB 15 默认使用DB 0 ，可以使用<code>select n</code>切换到DB n，<code>dbsize</code>可以查看当前数据库的大小，与key数量相关。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">select</span> 3 <span class="token comment" spellcheck="true">#切换数据库</span>OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> DBSIZE <span class="token comment" spellcheck="true">#数据库大小</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">#不同数据库之间 数据是不能互通的，并且dbsize 是根据库中key的个数。</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">set</span> name DTXG <span class="token comment" spellcheck="true">#放入值</span>OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> dbsize<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 7OK127.0.0.1:6379<span class="token punctuation">[</span>7<span class="token punctuation">]</span><span class="token operator">></span> get name <span class="token comment" spellcheck="true">#不能获取到别的数据库的值</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>7<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 3OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> get name <span class="token comment" spellcheck="true">#根据key获取value</span><span class="token string">"DTXG"</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys * <span class="token comment" spellcheck="true">#获取数据所有的key</span>1<span class="token punctuation">)</span> <span class="token string">"name"</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> flushdb <span class="token comment" spellcheck="true">#清空当前数据库</span>OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys *<span class="token punctuation">(</span>empty list or set<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> FLUSHALL <span class="token comment" spellcheck="true">#清空所有数据库的数据</span>OK127.0.0.1:6379<span class="token operator">></span> keys *<span class="token punctuation">(</span>empty list or set<span class="token punctuation">)</span></code></pre><p><code>keys *</code> ：查看当前数据库中所有的key。</p><p><code>flushdb</code>：清空当前数据库中的键值对。</p><p><code>flushall</code>：清空所有数据库的键值对。</p><h2><span id="为什么redis使用6379端口">为什么Redis使用6379端口</span></h2><p><a href="https://www.zhihu.com/question/20084750">Redis 为什么要用 6379 作为默认端口？ - 知乎 (zhihu.com)</a></p><blockquote><p><strong>Redis是单线程的</strong>，Redis是基于内存操作的。</p></blockquote><p>所以Redis的性能瓶颈不是CPU,而是机器内存和网络带宽。</p><p>那么为什么Redis的速度如此快呢，性能这么高呢？QPS达到10W+</p><blockquote><p>Redis为什么单线程还这么快？</p></blockquote><ul><li>误区1：高性能的服务器一定是多线程的？</li><li>误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</li></ul><p>核心：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上的，在内存存储数据情况下，单线程就是最佳的方案。</p><h1><span id="五大数据类型">五大数据类型</span></h1><p> Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作<strong>数据库，高速缓存和消息队列</strong>代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。</p><h2><span id="redis-key">Redis-key*</span></h2><p>在redis中无论什么数据类型，在数据库中都是以key-value形式保存，通过进行对Redis-key的操作，来完成对数据库中数据的操作。</p><p>下面学习的命令：</p><ul><li><p><code>exists key</code>：判断键是否存在</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> exists name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1  <span class="token comment" spellcheck="true">#存在</span>127.0.0.1:6379<span class="token operator">></span> exists name1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre></li><li><p><code>del key</code>：删除键值对</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> del age<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> keys *<span class="token punctuation">(</span>empty list or set<span class="token punctuation">)</span></code></pre></li><li><p><code>move key db</code>：将键值对移动到指定数据库</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> move name 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">select</span> 1OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"name"</span></code></pre></li><li><p><code>expire key second</code>：设置键值对的过期时间</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> expire name 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl name <span class="token comment" spellcheck="true">#查看name的过期时间</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 8127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2 <span class="token comment" spellcheck="true">#没了</span>127.0.0.1:6379<span class="token operator">></span> get name<span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre></li><li><p><code>type key</code>：查看value的数据类型</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">type</span> agestring</code></pre></li></ul><p>关于TTL命令</p><p>Redis的key，通过TTL命令返回key的过期时间，一般来说有3种：</p><ol><li>当前key没有设置过期时间，所以会返回-1.</li><li>当前key有设置过期时间，而且key已经过期，所以会返回-2.</li><li>当前key有设置过期时间，且key还没有过期，故会返回key的正常剩余时间.</li></ol><p>关于重命名<code>RENAME</code>和<code>RENAMENX</code></p><ol><li><code>RENAME key newkey</code>修改 key 的名称</li><li><code>RENAMENX key newkey</code>仅当 newkey 不存在时，将 key 改名为 newkey 。</li></ol><h2><span id="string字符串">String(字符串)*</span></h2><p>普通的set、get直接略过。</p><p>常用命令及其示例：</p><p><code>APPEND key value</code>: 向指定的key的value后追加字符串/如果没有key就相当与新建一个kv</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> append key1 2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3 <span class="token comment" spellcheck="true">#字符串的长度</span>127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v12"</span></code></pre><p><code>STRLEN key</code>:    获取key保存值的字符串长度</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> strlen key1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3</code></pre><p><code>DECR/INCR key</code>:    将指定key的value数值进行+1/-1(仅对于数字)</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> views 0OK127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"0"</span>127.0.0.1:6379<span class="token operator">></span> incr views <span class="token comment" spellcheck="true">#+1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"1"</span>127.0.0.1:6379<span class="token operator">></span> decr views <span class="token comment" spellcheck="true">#-1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"0"</span></code></pre><p><code>INCRBY/DECRBY key n</code>:    按指定的步长对数值进行加减</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> incrby views 10 <span class="token comment" spellcheck="true">#+10</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"10"</span>127.0.0.1:6379<span class="token operator">></span> decrby views 1 <span class="token comment" spellcheck="true">#-1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"9"</span>127.0.0.1:6379<span class="token operator">></span> decrby views 4 <span class="token comment" spellcheck="true">#-4</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"5"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><p><code>INCRBYFLOAT key n</code>:    为数值加上浮点型数值</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> incrbyfloat views 0.1 <span class="token comment" spellcheck="true">#+0.1</span><span class="token string">"5.1"</span></code></pre><p><code>GETRANGE key start end</code>:    按起止位置获取字符串（闭区间，起止位置都取）</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> getrange key1 0 3 <span class="token comment" spellcheck="true">#获取0到3的字符</span><span class="token string">"hell"</span></code></pre><p><code>SETRANGE key offset value</code>:用指定的value 替换key中 offset开始的值</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> setrange key1 1 xx <span class="token comment" spellcheck="true">#从1t</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 14127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"hxxlo,everyone"</span></code></pre><p><code>SETNX key value</code>:    仅当key不存在时进行set</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> setnx key 123 <span class="token comment" spellcheck="true">#key不存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> get key<span class="token string">"123"</span>127.0.0.1:6379<span class="token operator">></span> setnx key 456 <span class="token comment" spellcheck="true"># key已存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get key<span class="token string">"123"</span></code></pre><p><code>SETEX key seconds value</code>:    set 键值对并设置过期时间</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> setex key2 6 123 <span class="token comment" spellcheck="true">#设置key2 值为 过期时间为6</span>OK127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2</code></pre><p><code>MSET key1 value1 [key2 value2..]</code>:    批量set键值对</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> mset k1 v1 k2 v2 k3 v3OK127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"k3"</span>2<span class="token punctuation">)</span> <span class="token string">"k2"</span>3<span class="token punctuation">)</span> <span class="token string">"k1"</span></code></pre><p><code>MGET key1 [key2..]</code>:    批量获取多个key保存的值</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> mget k1 k2 k31<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"v2"</span>3<span class="token punctuation">)</span> <span class="token string">"v3"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><p><code>MSETNX key1 value1 [key2 value2..]</code>:    批量设置键值对，仅当参数中所有的key都不存在时执行</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> msetnx k1 v1 k4 v4 <span class="token comment" spellcheck="true">#key都不存在才添加</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get key4 <span class="token comment" spellcheck="true">#k1存在 所以没有添加</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><p><code>GETSET key value</code>:    将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</p><pre class=" language-java"><code class="language-java"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> get key1<span class="token string">"v12"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> getset key1 <span class="token number">123</span> #将key1的的值设为<span class="token number">123</span> <span class="token string">"v12"</span> #返回旧值<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> get key1<span class="token string">"123"</span></code></pre><p><code>PSETEX key milliseconds value</code>:    和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间</p><p>String类似的使用场景：value除了是字符串还可以是数字，用途举例：</p><ul><li>计数器</li><li>统计多单位的数量：uid:123666：follow 0</li><li>粉丝数</li><li>对象存储缓存</li></ul><h2><span id="list列表">List(列表)</span></h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p><p>首先我们列表，可以经过规则定义将其变为队列、栈、双端队列等。</p><p><img src="/2022/01/08/redis/image-20211201195029982.png" alt="image-20211201195029982"></p><p>正如图Redis中List是可以进行双端操作的，所以命令也就分为了LXXX和RLLL两类，有时候L也表示List例如LLEN</p><ul><li><code>LPUSH/RPUSH key value1[value2..]</code>从左边/右边向列表中PUSH值(一个或者多个)。</li><li><code>LRANGE key start end</code>    获取list 起止元素==（索引从左往右 递增）==</li><li><code>LPUSHX/RPUSHX key value</code>    向已存在的列名中push值（一个或者多个）</li><li><code>LINSERT key BEFORE|AFTER pivot value</code>    在指定列表元素的前/后 插入value</li><li><code>LLEN key</code>    查看列表长度</li><li><code>LINDEX key index</code>    通过索引获取列表元素</li><li><code>LSET key index value</code>    通过索引为元素设值</li><li><code>LPOP/RPOP key</code>    从最左边/最右边移除值 并返回</li><li><code>RPOPLPUSH source destination</code>    将列表的尾部(右)最后一个值弹出，并返回，然后加到另一个列表的头部</li><li><code>LTRIM key start end</code>    通过下标截取指定范围内的列表</li><li><code>LREM key count value</code>    List中是允许value重复的 count &gt; 0：从头部开始搜索 然后删除指定的value 至多删除count个 count &lt; 0：从尾部开始搜索… count = 0：删除列表中所有的指定value。</li><li><code>BLPOP/BRPOP key1[key2] timout</code>    移出并获取列表的第一个/最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li><li><code>BRPOPLPUSH source destination timeout</code>    和RPOPLPUSH功能相同，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li></ul><p>代码示例：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lpush list one  <span class="token comment" spellcheck="true">#从左边push一个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lpush list two three <span class="token comment" spellcheck="true">#push多个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange list 0 -1 <span class="token comment" spellcheck="true">#获取从0到-1(全部)</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrange list 0 1 <span class="token comment" spellcheck="true">#获取从0到1 倒着获取</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> rpush list right<span class="token comment" spellcheck="true">#从右边push一个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> lrange list 0 -1 1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span></code></pre><p><img src="/2022/01/08/redis/image-20211201195952537.png" alt="image-20211201195952537"></p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span>127.0.0.1:6379<span class="token operator">></span> lpop list  <span class="token comment" spellcheck="true">#从左边弹出一个值 第一个(上左)</span><span class="token string">"three"</span>127.0.0.1:6379<span class="token operator">></span> rpop list <span class="token comment" spellcheck="true">#从右边弹出一个值 最后一个(下右)</span><span class="token string">"right"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lindex list 1 <span class="token comment" spellcheck="true">#获取下标1都值</span><span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> llen list <span class="token comment" spellcheck="true">#获取list都长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"one"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrem list 1 one <span class="token comment" spellcheck="true"># 移除1个one 从上到下</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrem list 2 three <span class="token comment" spellcheck="true">#移除2个three</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"one"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> rpush mylist hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> rpush mylist hello1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> rpush mylist hello2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> rpush mylist hello3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> ltrim mylist 1 2 <span class="token comment" spellcheck="true">#截取1到2</span>OK127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -1 1<span class="token punctuation">)</span> <span class="token string">"hello1"</span>2<span class="token punctuation">)</span> <span class="token string">"hello2"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> rpush mylist hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> rpush mylist hello1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> rpush mylist hello2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> rpoplpush mylist myotherlist <span class="token comment" spellcheck="true">#移除mylist右边 添加到myotherlist左边</span><span class="token string">"hello2"</span>127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello1"</span>127.0.0.1:6379<span class="token operator">></span> lrange myotherlist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello2"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> exists list <span class="token comment" spellcheck="true">#判断list是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> lpush list value1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"value1"</span>127.0.0.1:6379<span class="token operator">></span> lset list 0 item <span class="token comment" spellcheck="true">#将0索引都值设置为item</span>OK127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"item"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lpush mylist hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lpush mylist world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> linsert mylist before world other <span class="token comment" spellcheck="true"># 在mylist中world的前面添加一个other</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"other"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>3<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> linsert mylist after world new <span class="token comment" spellcheck="true">#在mylist中的world的后面添加一个new</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"other"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>3<span class="token punctuation">)</span> <span class="token string">"new"</span>4<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><h3><span id="小结">小结</span></h3><ul><li>list实际上是一个链表，before Node after , left, right 都可以插入值</li><li>如果key不存在，则创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在</li><li>在两边插入或者改动值，效率最高！修改中间元素，效率相对较低</li></ul><p>应用：</p><p>消息排队！消息队列（Lpush Rpop）,栈（Lpush Lpop）</p><h2><span id="set集合">Set(集合）</span></h2><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><ul><li><code>SADD key member1[member2..]</code>    向集合中无序增加一个/多个成员</li><li><code>SMEMBERS key</code>    返回集合中所有的成员</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd myset hello <span class="token comment" spellcheck="true">#往set集合放入hello</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset love <span class="token comment" spellcheck="true">#往set集合放入love</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token function">lpc</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smembers myset <span class="token comment" spellcheck="true">#返回集合中所有的成员</span>1<span class="token punctuation">)</span> <span class="token string">"love"</span>2<span class="token punctuation">)</span> <span class="token string">"lpc"</span>3<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> sismember myset hello <span class="token comment" spellcheck="true">#set中是否存在hello</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1  <span class="token comment" spellcheck="true">#存在</span>127.0.0.1:6379<span class="token operator">></span> sismember myset world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre><ul><li><code>SCARD key</code>    获取集合的成员数</li><li><code>SREM key member1[member2..]</code>    移除集合中一个/多个成员</li><li><code>SRANDMEMBER key [count]</code>    随机返回集合中count个成员，count缺省值为1</li><li><code>SPOP key [count]</code>    随机移除并返回集合中count个成员，count缺省值为1</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> scard myset <span class="token comment" spellcheck="true">#返回set集合的个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> srem myset hello <span class="token comment" spellcheck="true">#移除一个元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> scard myset<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"love"</span>2<span class="token punctuation">)</span> <span class="token string">"lpc"</span>127.0.0.1:6379<span class="token operator">></span> srandmember myset <span class="token comment" spellcheck="true"># 随机获取一个元素 默认一个</span><span class="token string">"love"</span>127.0.0.1:6379<span class="token operator">></span> srandmember myset<span class="token string">"lpc"</span>127.0.0.1:6379<span class="token operator">></span> spop myset <span class="token comment" spellcheck="true">#随机移除一个元素</span><span class="token string">"love"</span>127.0.0.1:6379<span class="token operator">></span> spop myset<span class="token string">"lpc2"</span>127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"lpc"</span></code></pre><ul><li><code>SMOVE source destination member</code>    将source集合的成员member移动到destination集合</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd myset hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token function">lpc</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset2 set2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smove myset myset2 <span class="token function">lpc</span> <span class="token comment" spellcheck="true">#myset移除lpc到myset2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> smembers myset21<span class="token punctuation">)</span> <span class="token string">"set2"</span>2<span class="token punctuation">)</span> <span class="token string">"lpc"</span></code></pre><ul><li><code>SDIFF key1[key2..]</code>    返回所有集合的差集 key1- key2 - …</li><li><code>SDIFFSTORE destination key1[key2..]</code>    在SDIFF的基础上，将结果保存到集合中==(覆盖)==。不能保存到其他类型key噢！</li><li><code>SINTER key1 [key2..]</code>    返回所有集合的交集</li><li><code>SINTERSTORE destination key1[key2..]</code>    在SINTER的基础上，存储结果到集合中。覆盖</li><li><code>SUNION key1 [key2..]</code>    返回所有集合的并集</li><li><code>SUNIONSTORE destination key1 [key2..]</code>    在SUNION的基础上，存储结果到及和张。覆盖</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd key1 a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key1 b<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key1 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key2 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key2 d<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key2 e<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> <span class="token function">sdiff</span> key1 key2<span class="token comment" spellcheck="true">#key1和key2的差集 key1-key2</span>1<span class="token punctuation">)</span> <span class="token string">"a"</span>2<span class="token punctuation">)</span> <span class="token string">"b"</span>127.0.0.1:6379<span class="token operator">></span> sinter key1 key2<span class="token comment" spellcheck="true">#key1和key2的交集</span>1<span class="token punctuation">)</span> <span class="token string">"c"</span>127.0.0.1:6379<span class="token operator">></span> sunion key1 key2 <span class="token comment" spellcheck="true">#key1和key2的并集</span>1<span class="token punctuation">)</span> <span class="token string">"b"</span>2<span class="token punctuation">)</span> <span class="token string">"c"</span>3<span class="token punctuation">)</span> <span class="token string">"a"</span>4<span class="token punctuation">)</span> <span class="token string">"e"</span>5<span class="token punctuation">)</span> <span class="token string">"d"</span></code></pre><ul><li><code>SSCAN KEY [MATCH pattern] [COUNT count]</code>    在大量数据环境下，使用此命令遍历集合中元素，每次遍历部分</li></ul><h2><span id="hash哈希">Hash（哈希）</span></h2><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>Set就是一种简化的Hash,只变动key,而value使用默认值填充。可以将一个Hash表作为一个对象进行存储，表中存放对象的信息。</p><p>key value (k-v)</p><ul><li><code>HSET key field value</code>    将哈希表 key 中的字段 field 的值设为 value 。重复设置同一个field会覆盖,返回0</li><li><code>HMSET key field1 value1 [field2 value2..]</code>    同时将多个 field-value (域-值)对设置到哈希表 key 中。</li><li><code>HGET key field value</code>    获取存储在哈希表中指定字段的值</li><li><code>HMGET key field1 [field2..]</code>    获取所有给定字段的值</li><li><code>HGETALL key</code>    获取在哈希表key 的所有字段和值</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hset myhash field <span class="token function">lpc</span> <span class="token comment" spellcheck="true">#set一个hash类型的表 key为myhash value为field lpc</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hget myhash field <span class="token comment" spellcheck="true">#获取一个元素 </span><span class="token string">"lpc"</span>127.0.0.1:6379<span class="token operator">></span> hmset myhash field hello field2 world <span class="token comment" spellcheck="true">#插入多个元素</span>OK127.0.0.1:6379<span class="token operator">></span> hmget myhash field field2 <span class="token comment" spellcheck="true">#获取多个元素</span>1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> hgetall myhash <span class="token comment" spellcheck="true">#获取myhash表全部元素</span>1<span class="token punctuation">)</span> <span class="token string">"field"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span>3<span class="token punctuation">)</span> <span class="token string">"field2"</span>4<span class="token punctuation">)</span> <span class="token string">"world"</span></code></pre><ul><li><code>HDEL key field1 [field2..]</code>    删除哈希表key中一个/多个field字段</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hdel myhash field <span class="token comment" spellcheck="true">#删除一个key中的元素的值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hget myhash field<span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><ul><li><code>HLEN key</code>    获取哈希表中字段的数量</li><li><code>HEXISTS key field</code>    查看哈希表 key 中，指定的字段是否存在。</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hlen myhash<span class="token comment" spellcheck="true">#获取myhash表中的元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1 127.0.0.1:6379<span class="token operator">></span> hexists myhash field3 <span class="token comment" spellcheck="true">#判断myhash中field3是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre><ul><li><code>HKEYS key</code>    获取哈希表key中所有的字段</li><li><code>HVALS key</code>    获取哈希表中所有值</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hkeys myhash <span class="token comment" spellcheck="true">#获取myhash表中的所有key</span>1<span class="token punctuation">)</span> <span class="token string">"field2"</span>2<span class="token punctuation">)</span> <span class="token string">"field1"</span>127.0.0.1:6379<span class="token operator">></span> hvals myhash <span class="token comment" spellcheck="true">#获取myhash中所有的values</span>1<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span></code></pre><ul><li><code>HINCRBY key field n</code>    为哈希表 key 中的指定字段的整数值加上增量n，并返回增量后结果 一样只适用于整数型字段</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hset myhash field3 5<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hincrby myhash field3 5 <span class="token comment" spellcheck="true">#给myhash表中field3增加5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> hget myhash field3<span class="token string">"10"</span>127.0.0.1:6379<span class="token operator">></span> hsetnx myhash field4 nihao <span class="token comment" spellcheck="true">#myhash中如果不存在就添加一个field4 nihao</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hsetnx myhash field4 nihao<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre><ul><li><p><code>HINCRBYFLOAT key field n</code>    为哈希表 key 中的指定字段的浮点数值加上增量 n。</p></li><li><p><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code>    迭代哈希表中的键值对。</p></li></ul><p> Hash变更的数据user name age，尤其是用户信息之类的，经常变动的信息！Hash更适合于对象的存储，Sring更加适合字符串存储！</p><h2><span id="zset有序集合">Zset（有序集合）</span></h2><p>不同的是每个元素都会关联一个double类型的分数（score）。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>score相同：按字典顺序排序</p><p>有序集合的成员是唯一的,但分数(score)却可以重复。</p><ul><li><code>ZADD key score member1 [score2 member2]</code>    向有序集合添加一个或多个成员，或者更新已存在成员的分数</li><li><code>ZRANGE key start end</code>    通过索引区间返回有序集合成指定区间内的成员</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zadd myset 1 one <span class="token comment" spellcheck="true">#添加一个元素分数为1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd myset 2 two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd myset 3 three 4 four<span class="token comment" spellcheck="true">#多次添加元素指定分数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> zrange myset 0 -1 <span class="token comment" spellcheck="true">#获取myset的0到-1的元素</span>1<span class="token punctuation">)</span> <span class="token string">"one"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"three"</span>4<span class="token punctuation">)</span> <span class="token string">"four"</span></code></pre><ul><li><code>ZRANGEBYSCORE key min max</code>    通过分数返回有序集合指定区间内的成员==-inf 和 +inf分别表示最小最大值，只支持开区间()==</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zadd salary 25000 xiaohong<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd salary 5000 zhangsan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd salary 500 <span class="token function">lpc</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zrangebyscore salary -inf +inf <span class="token comment" spellcheck="true">#从小到大根据分数排序</span>1<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"xiaohong"</span>127.0.0.1:6379<span class="token operator">></span> zrangebyscore salary -inf +inf withscores<span class="token comment" spellcheck="true">#从小到大根据分数排序，显示分数</span>1<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"500"</span>3<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>4<span class="token punctuation">)</span> <span class="token string">"5000"</span>5<span class="token punctuation">)</span> <span class="token string">"xiaohong"</span>6<span class="token punctuation">)</span> <span class="token string">"25000"</span>127.0.0.1:6379<span class="token operator">></span> zrangebyscore salary -inf 2500 withscores<span class="token comment" spellcheck="true">#从小到2500根据分数排序，显示分数</span>1<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"500"</span></code></pre><ul><li><code>ZREM key member1 [member2..]</code>    移除有序集合中一个/多个成员</li><li><code>ZCARD key</code>    获取有序集合的成员数</li><li><code>ZREVRANGE key start end</code>    返回有序集中指定区间内的成员，通过索引，分数从高到底</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">clear</span>127.0.0.1:6379<span class="token operator">></span> zrange salary 0 -11<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"xiaohong"</span>127.0.0.1:6379<span class="token operator">></span> zrem salary xiaohong <span class="token comment" spellcheck="true">#移除一个元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zrange salary 0 -11<span class="token punctuation">)</span> <span class="token string">"lpc"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>127.0.0.1:6379<span class="token operator">></span> zcard salary <span class="token comment" spellcheck="true">#大小</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> zrevrange salary 0 -1<span class="token comment" spellcheck="true">#从大到小</span>1<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>2<span class="token punctuation">)</span> <span class="token string">"lpc"</span></code></pre><ul><li><code>ZCOUNT key min max</code>    计算在有序集合中指定区间score的成员数</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zadd myset 1 hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd myset 2 word 3 <span class="token function">lpc</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> zcount myset 1 3<span class="token comment" spellcheck="true">#获取1到3的数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> zcount myset 1 2<span class="token comment" spellcheck="true">#获取1到2的数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2</code></pre><p>更多api访问<a href="https://www.cnblogs.com/kylinxxx/p/13770063.html">https://www.cnblogs.com/kylinxxx/p/13770063.html</a></p><p>应用案例：</p><ol><li>set排序 存储班级成绩表 工资表排序！</li><li>普通消息，1.重要消息 2.带权重进行判断</li><li>排行榜应用实现，取Top N测试</li></ol><h1><span id="三种特殊数据类型">三种特殊数据类型</span></h1><h2><span id="geospatial地理位置">Geospatial(地理位置)</span></h2><p>朋友的定位，附近的人，打车计算距离？</p><p>Redis的Geo在3.2版本就推出了！这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人！</p><p>经纬度查询：<a href="http://www.jsons.cn/lngcode/">http://www.jsons.cn/lngcode/</a></p><p><img src="/2022/01/08/redis/image-20211202163115193.png" alt="image-20211202163115193"></p><h3><span id="有效经纬度">有效经纬度</span></h3><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul><blockquote><h2><span id="geoadd">geoadd</span></h2></blockquote><p>使用经纬度定位地理坐标并用一个有序集合zset保存，所以zset命令也可以使用</p><ul><li><code>geoadd key longitud(经度) latitude(纬度) member [..]</code>    将具体经纬度的坐标存入一个有序集合</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geoadd china:city 116.40 39.90 beijing<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 121.47 31.23 shanghai<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 106.50 29.53 chongqing<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 114.08 22.54 shenzhen<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1</code></pre><blockquote><h2><span id="geopos">GEOPOS</span></h2></blockquote><ul><li><code>geopos key member [member..]</code>    获取集合中的一个/多个成员坐标</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geopos china:city beijing shanghai chongqing shenzhen<span class="token comment" spellcheck="true">#获取key得经度和纬度</span>1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"116.39999896287918091"</span>   2<span class="token punctuation">)</span> <span class="token string">"39.90000009167092543"</span>2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"121.47000163793563843"</span>   2<span class="token punctuation">)</span> <span class="token string">"31.22999903975783553"</span>3<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>   2<span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span>4<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"114.08000081777572632"</span>   2<span class="token punctuation">)</span> <span class="token string">"22.53999903789756587"</span></code></pre><blockquote><h2><span id="geodist">GEODIST</span></h2></blockquote><p>指定单位的参数 unit 必须是以下单位的其中一个：</p><p>m 表示单位为米。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><ul><li><code>geodist key member1 member2 [unit]</code>    返回两个给定位置之间的距离。默认以米作为单位。</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geodist china:city beijing chongqing <span class="token string">"1464070.8051"</span>127.0.0.1:6379<span class="token operator">></span> geodist china:city beijing shanghai km<span class="token string">"1067.3788"</span></code></pre><blockquote><h2><span id="georadius">GEORADIUS</span></h2></blockquote><p>我附近都人？(获得附近的人的地址，定位！)通过半径查询！</p><h3><span id="关于georadius的参数">关于GEORADIUS的参数</span></h3><p>通过georadius就可以完成 附近的人功能</p><p>withcoord:带上坐标</p><p>withdist:带上距离，单位与半径单位相同</p><p>COUNT n : 只显示前n个(按距离递增排序)</p><ul><li><code>georadius key longitude latitude radius m|km|mi|ft [WITHCOORD][WITHDIST] [WITHHASH] [COUNT count]</code>    以给定的经纬度为中心， 返回集合包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</li></ul><p>指定地点定位：用于个人</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 1000 km<span class="token comment" spellcheck="true">#以110 30经纬度为中心1000km为半径查询所有</span>1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 500 km1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 1000 km withdist withcoord count 1<span class="token comment" spellcheck="true">#指定1个</span>1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   2<span class="token punctuation">)</span> <span class="token string">"341.9374"</span>   3<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      2<span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 1000 km withdist withcoord count 21<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   2<span class="token punctuation">)</span> <span class="token string">"341.9374"</span>   3<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      2<span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span>2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>   2<span class="token punctuation">)</span> <span class="token string">"923.9364"</span>   3<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"114.08000081777572632"</span>      2<span class="token punctuation">)</span> <span class="token string">"22.53999903789756587"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><h2><span id="georadiusbymember">GEORADIUSBYMEMBER</span></h2></blockquote><ul><li><code>GEORADIUSBYMEMBER key member radius...</code>    功能与GEORADIUS相同，只是中心位置不是具体的经纬度，而是使用结合中已有的成员作为中心点。</li></ul><p>城市定位</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> georadiusbymember china:city beijing 1000 km1<span class="token punctuation">)</span> <span class="token string">"beijing"</span>127.0.0.1:6379<span class="token operator">></span> georadiusbymember china:city beijing 5000 km1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>3<span class="token punctuation">)</span> <span class="token string">"shanghai"</span>4<span class="token punctuation">)</span> <span class="token string">"beijing"</span></code></pre><blockquote><h2><span id="geohash">GEOHASH</span></h2></blockquote><ul><li><code>geohash key member1 [member2..]</code>    返回一个或多个位置元素的Geohash表示。使用Geohash位置52点整数编码。</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geohash china:city beijing chongqing <span class="token comment" spellcheck="true">#将经纬转为字符串</span><span class="token comment" spellcheck="true">#两个字符串越接近 两地越近</span>1<span class="token punctuation">)</span> <span class="token string">"wx4fbxxfke0"</span>2<span class="token punctuation">)</span> <span class="token string">"wm5xzrybty0"</span></code></pre><blockquote><p>GEO底层实现原理其实就是zset，我们可以使用zset来操作GEO!</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zrange china:city 0 -11<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>3<span class="token punctuation">)</span> <span class="token string">"shanghai"</span>4<span class="token punctuation">)</span> <span class="token string">"beijing"</span>127.0.0.1:6379<span class="token operator">></span> zrem china:city beijing <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zrange china:city 0 -11<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>3<span class="token punctuation">)</span> <span class="token string">"shanghai"</span></code></pre><h2><span id="hyperloglog基数统计">Hyperloglog(基数统计)</span></h2><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。</p><p>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>其底层使用string数据类型。</p><h3><span id="什么是基数">什么是基数？</span></h3><p>数据集中不重复的元素的个数。</p><h3><span id="应用场景">应用场景：</span></h3><p>网页的访问量（UV）：一个用户多次访问，也只能算作一个人。</p><p>传统实现，存储用户的id,然后每次进行比较。当用户变多之后这种方式及其浪费空间，而我们的目的只是计数，Hyperloglog就能帮助我们利用最小的空间完成。</p><ul><li><p><code>PFADD key element1 [elememt2..]</code>    添加指定元素到 HyperLogLog中</p></li><li><p><code>PFCOUNT key [key]</code>    返回给定 HyperLogLog 的基数估算值。</p></li><li><p><code>PFMERGE destkey sourcekey [sourcekey..]</code>    将多个 HyperLogLog 合并为一个 HyperLogLog</p><pre class=" language-bash"><code class="language-bash">----------pfadd--pfcount---------------------127.0.0.1:6379<span class="token operator">></span> pfadd mykey a  b c d e f g h i j <span class="token comment" spellcheck="true">#添加元素到mykey</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey <span class="token comment" spellcheck="true">#统计数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> pfadd mykey2 i j z x c <span class="token function">v</span> b n m<span class="token comment" spellcheck="true">#添加元素到mykey2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey2<span class="token comment" spellcheck="true">#统计数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9----------------pfmerge-----------------------127.0.0.1:6379<span class="token operator">></span> pfmerge mykey3 mykey mykey2 <span class="token comment" spellcheck="true">#把mykey，mykey2的元素添加到mykey3</span>OK127.0.0.1:6379<span class="token operator">></span> pfcount mykey3 <span class="token comment" spellcheck="true">#统计数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 15 <span class="token comment" spellcheck="true">#交集 mykey和mykey2右4个重复</span></code></pre></li></ul><h2><span id="bitmap位图">BitMap(位图)</span></h2><p>使用位存储，信息状态只有 0 和 1</p><p>Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为偏移(offset)，在bitmap上可执行AND,OR,XOR,NOT以及其它位操作。</p><p>应用场景: 签到统计、状态统计</p><ul><li><code>setbit key offset value</code>    为指定key的offset位设置值</li><li><code>getbit key offset</code>    获取offset位的值</li><li><code>bitcount key [start end]</code>    统计字符串被设置为1的bit数，也可以指定统计范围按字节</li></ul><pre class=" language-bash"><code class="language-bash">------------setbit--getbit--------------127.0.0.1:6379<span class="token operator">></span> setbit sign 0 1<span class="token comment" spellcheck="true">#周一打卡了</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 1 0<span class="token comment" spellcheck="true">#周二没有打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 2 0<span class="token comment" spellcheck="true">#周二没有打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 3 1<span class="token comment" spellcheck="true">#周四打卡了</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 4 1<span class="token comment" spellcheck="true">#周五打卡了</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 5 0<span class="token comment" spellcheck="true">#周六没有打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 6 0<span class="token comment" spellcheck="true">#周日没有打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">#获取offset位的值</span>127.0.0.1:6379<span class="token operator">></span> getbit sign 4<span class="token comment" spellcheck="true">#获取周五是否打卡</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1-----------bitcount----------------------------127.0.0.1:6379<span class="token operator">></span> bitcount sign <span class="token comment" spellcheck="true">#打卡天数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3</code></pre><ul><li><code>bitop operration destkey key[key..]</code>    对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</li><li><code>BITPOS key bit [start] [end]</code>    返回字符串里面第一个被设置为1或者0的bit位。start和end只能按字节,不能按位</li></ul><h1><span id="事务">事务</span></h1><p>Redis的单条命令是保证原子性的，<strong>但是redis事务不能保证原子性</strong></p><pre><code>Redis事务本质：一组命令的集合。----------------- 队列 set set set 执行 -------------------事务中每条命令都会被序列化，执行过程中按顺序执行，不允许其他命令进行干扰。一次性顺序性排他性Redis事务没有隔离级别的概念Redis单条命令是保证原子性的，但是redis事务不保证原子性！</code></pre><p>Redis事务操作过程</p><ul><li>开启事务（multi）</li><li>命令入队</li><li>执行事务（exec）</li></ul><p>所以事务中的命令在加入时都没有被执行，直到提交时才会开始执行(Exec)一次性完成。</p><h2><span id="正常执行">正常执行</span></h2><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multi<span class="token comment" spellcheck="true"># 开启事务</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1<span class="token comment" spellcheck="true"># 命令入队</span>QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> get k2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span><span class="token comment" spellcheck="true"># 事务执行</span>1<span class="token punctuation">)</span> OK2<span class="token punctuation">)</span> OK3<span class="token punctuation">)</span> <span class="token string">"v2"</span>4<span class="token punctuation">)</span> OK</code></pre><h2><span id="取消事务discurd">取消事务(discurd)</span></h2><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multi<span class="token comment" spellcheck="true"># 开启事务</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k4 v4QUEUED127.0.0.1:6379<span class="token operator">></span> discard<span class="token comment" spellcheck="true"># 放弃事务</span>OK127.0.0.1:6379<span class="token operator">></span> get key4 <span class="token comment" spellcheck="true"># 被放弃事务中命令并未执行</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><h2><span id="事务错误">事务错误</span></h2><blockquote><p>编译型异常：代码语法错误（编译时异常）所有的命令都不执行</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> getset k3<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">'getset'</span> <span class="token function">command</span><span class="token comment" spellcheck="true">#错误的命令</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k4 v4QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> EXECABORT Transaction discarded because of previous errors.<span class="token comment" spellcheck="true">#执行也报错了</span>127.0.0.1:6379<span class="token operator">></span> get k4<span class="token comment" spellcheck="true">#所有的命令都没有执行</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><blockquote><p>运行时异常(1/0)：代码逻辑错误 (运行时异常) **其他命令可以正常执行 ** &gt;&gt;&gt; 所以不保证事务原子性</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> incr k1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>1<span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range<span class="token comment" spellcheck="true">#执行失败</span>2<span class="token punctuation">)</span> OK<span class="token comment" spellcheck="true">#执行成功</span>3<span class="token punctuation">)</span> OK<span class="token comment" spellcheck="true">#执行成功</span>127.0.0.1:6379<span class="token operator">></span> get k2<span class="token comment" spellcheck="true">#虽然第一条命令报错但其他的执行成功了</span><span class="token string">"v2"</span>127.0.0.1:6379<span class="token operator">></span> get k3<span class="token comment" spellcheck="true">#所以说Redis单条指令保证原子性，但是Redis事务不能保证原子性。</span><span class="token string">"v3"</span></code></pre><h2><span id="监控watch">监控watch</span></h2><p>悲观锁：</p><ul><li>很悲观，认为什么时候都会出现问题，无论做什么都会加锁</li></ul><p>乐观锁：</p><ul><li>很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><p>使用watch key监控指定数据，相当于乐观锁加锁。</p><blockquote><p>正常执行</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> money 100 <span class="token comment" spellcheck="true"># 设置余额:100</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> out 0<span class="token comment" spellcheck="true"># 支出使用:0</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token function">watch</span> money <span class="token comment" spellcheck="true">#监视money (上锁)</span>OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> decrby money 20QUEUED127.0.0.1:6379<span class="token operator">></span> incrby out 20QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span><span class="token comment" spellcheck="true">#监视值没有被中途修改，事务正常结束</span>1<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 802<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 20</code></pre><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作（相当于getversion）</p><p>我们启动另外一个客户端模拟插队线程。</p><blockquote><p>不正常</p></blockquote><p>线程1</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">watch</span> money<span class="token comment" spellcheck="true">#监控money</span>OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> decrby money 10QUEUED127.0.0.1:6379<span class="token operator">></span> incrby out 10<span class="token comment" spellcheck="true">#没有执行</span>QUEUED</code></pre><p>线程2</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> get money<span class="token string">"80"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> money 1000<span class="token comment" spellcheck="true">#修改了线程一中监视的money</span>OK</code></pre><p>回到线程1，执行事务：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span><span class="token comment" spellcheck="true">#执行失败</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><p>解锁获取最新值，然后再加锁进行事务。</p><p>unwatch进行解锁。</p><p>注意：每次提交执行exec后都会自动释放锁，不管是否成功</p><h1><span id="jedis">Jedis</span></h1><blockquote><p>什么是Jedis？</p><p>是 官方推荐的java连接开发工具，使用java操作redis的中间件</p></blockquote><p>1.导入依赖</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <!--导入jredis的包-->    <dependency>        <groupid>redis.clients</groupid>        <artifactid>jedis</artifactid>        <version>3.2.0</version>    </dependency>    <!--fastjson-->    <dependency>        <groupid>com.alibaba</groupid>        <artifactid>fastjson</artifactid>        <version>1.2.70</version>    </dependency></dependencies></code></pre><p>2.编码测试</p><blockquote><p>连接数据库<br>操作命令<br>断开连接</p></blockquote><p>代码示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 2/12/2021 下午 10:39 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPing</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1 new Jedis对象</span>    Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// jedis 所有的命令就是我们学习的所有指令</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/01/08/redis/image-20211202230132106.png" alt="image-20211202230132106"></p><h2><span id="常用的api">常用的API</span></h2><p>string、list、set、hash、zset</p><p>所有的api命令，就是我们对应的上面学习的指令，一个都没有变化！</p><blockquote><p>key</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 2/12/2021 下午 11:09 *@describe: *@vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestKey</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清空数据库："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断某个键是否存在："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'k1','v1'>键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'k2','v2'>键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统中所有的键如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除键k2："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断键k2是否存在："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查看键 k1 所存储的数据类型："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机返回 key 空间的一个："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">randomKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重命名 key ："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"newk1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出改后的 newk1 ："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"newk1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按索引查询："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除当前选择数据库中的所有键："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回当前数据库中 key 的数量："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">dbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除所有数据库中的所有 key ："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>string</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========增加数据==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除键key2:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取键key2:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改key1:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1Changed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取key1的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在key3后面加入值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key3的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mset</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"value01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"value02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">,</span><span class="token string">"value03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">,</span><span class="token string">"key04"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========新增键值对防止覆盖原先值=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2-new"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========新增键值对并设置有效时间============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========获取原值，更新为新值=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"key2GetSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得key2的值的字串："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">getrange</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>list</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========添加一个list==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"ArrayList"</span><span class="token punctuation">,</span> <span class="token string">"Vector"</span><span class="token punctuation">,</span> <span class="token string">"Stack"</span><span class="token punctuation">,</span> <span class="token string">"HashMap"</span><span class="token punctuation">,</span> <span class="token string">"WeakHashMap"</span><span class="token punctuation">,</span> <span class="token string">"LinkedHashMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"HashSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"TreeSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"TreeMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1代表倒数第一个元素，-2代表倒数第二个元素,end为-1表示查询全部</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections区间0-3的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除列表指定的值 ，第二个参数为删除的个数（有重复时），后add进去的值先被删，类似于出栈</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除指定元素个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrem</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"HashMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除下表0-3区间之外的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">ltrim</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections列表出栈（左端）："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections添加元素，从列表右端，与lpush相对应："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"EnumMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections列表出栈（右端）："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改collections指定下标1的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lset</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LinkedArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的长度："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取collections下标为2的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lindex</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sortedList排序前："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sortedList排序后："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>set</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本类型之Set</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============向集合中添加元素（不重复）============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">,</span><span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个元素e0："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除两个元素e7和e6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机的移除集合中的一个元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">spop</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机的移除集合中的一个元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">spop</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet中包含元素的个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">scard</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e3是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e1是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e1是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">,</span><span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet2"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将eleSet1中删除e1并存入eleSet3中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smove</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span> <span class="token string">"eleSet3"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移到集合元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将eleSet1中删除e2并存入eleSet3中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smove</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span> <span class="token string">"eleSet3"</span><span class="token punctuation">,</span> <span class="token string">"e2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet3中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============集合运算================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet2中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1和eleSet2的交集:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sinter</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1和eleSet2的并集:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sunion</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1和eleSet2的差集:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sdiff</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//eleSet1中有，eleSet2中没有</span>        jedis<span class="token punctuation">.</span><span class="token function">sinterstore</span><span class="token punctuation">(</span><span class="token string">"eleSet4"</span><span class="token punctuation">,</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求交集并将交集保存到dstkey的集合</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet4中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>hash</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本类型之Hash</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHash</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span><span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key4"</span><span class="token punctuation">,</span><span class="token string">"value4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加名称为hash（key）的hash元素</span>        jedis<span class="token punctuation">.</span><span class="token function">hmset</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向名称为hash的hash中添加key为key5，value为value5元素</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key5"</span><span class="token punctuation">,</span> <span class="token string">"value5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return Map&lt;String,String></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hkeys</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return Set&lt;String></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有值为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hvals</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return List&lt;String></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将key6保存的值加上一个整数，如果key6不存在则添加key6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key6"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将key6保存的值加上一个整数，如果key6不存在则添加key6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key6"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个或者多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hdel</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash中键值对的个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hlen</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断hash中是否存在key2："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hexists</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断hash中是否存在key3："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hexists</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取hash中的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hmget</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取hash中的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hmget</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">,</span><span class="token string">"key4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>事务</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Transaction<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 3/12/2021 上午 9:05 * @describe: * @vision */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTX</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.67.217"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JSONObject jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lpc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//      开启事务</span>    Transaction multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String result <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//制造异常</span>      multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行事务</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      multi<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放弃事务</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      关闭链接</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1><span id="springboot整合">SpringBoot整合</span></h1><p>SpringBoot 操作数据：spring-data jpa jdbc mongodb redis！</p><p>SpringData 也是和 SpringBoot 齐名的项目！</p><p>说明： 在 SpringBoot2.x 之后，原来使用的jedis 被替换为了 lettuce?</p><p><img src="/2022/01/08/redis/image-20211203095113115.png" alt="image-20211203095113115"></p><p>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接池！ 更像 BIO 模式</p><p>lettuce : 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据了，更像 NIO 模式</p><p>源码分析：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span>RedisConnectionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 我们可以自己定义一个redisTemplate来替换这个默认的！</span><span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化！</span>   <span class="token comment" spellcheck="true">// 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 &lt;String, Object></span>    RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span>RedisConnectionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 由于 String 是redis中最常使用的类型，所以说单独提出来了一个bean！</span><span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们在学习SpringBoot自动配置的原理时，整合一个组件并进行配置一定会有一个自动配置类xxxAutoConfiguration,并且在spring.factories中也一定能找到这个类的完全限定名。Redis也不例外。</p><h2><span id="整合测试">整合测试</span></h2><p>1.导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--操作redis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2.编写配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#redis的配置</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.67.217</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span></code></pre><p>3.使用RedisTemplate</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Redis02SpringbootApplicationTests</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    redisTemplate操作不同的类型，和我们redis的指令是一样的</span>    <span class="token comment" spellcheck="true">//    opsForValue：操作string</span>    <span class="token comment" spellcheck="true">//    opsForList： 操作list</span>    <span class="token comment" spellcheck="true">//    opsForSet</span>    <span class="token comment" spellcheck="true">//    opsForHash</span>    <span class="token comment" spellcheck="true">//    opsForZSet</span>    <span class="token comment" spellcheck="true">//    opsForHash</span>    <span class="token comment" spellcheck="true">//    除了特殊的操作，我们常用的方法都可以通过redisTemplate操作</span>    <span class="token comment" spellcheck="true">//    获取连接</span>    <span class="token comment" spellcheck="true">//    redisTemplate.getConnectionFactory();</span>         redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试结果</p><p><img src="/2022/01/08/redis/image-20211203103438995.png" alt="image-20211203103438995"></p><p>此时我们回到Redis查看数据时候，惊奇发现全是乱码，可是程序中可以正常输出。这时候就关系到存储对象的序列化问题，在网络中传输的对象也是一样需要序列化，否者就全是乱码。</p><p>RedisTemplate内部的序列化配置是这样的</p><p><img src="/2022/01/08/redis/image-20211203103744213.png" alt="image-20211203103744213"></p><p>默认的序列化器是采用JDK序列化器(我们能回使用json转义)</p><p><img src="/2022/01/08/redis/image-20211203103941685.png" alt="image-20211203103941685"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *@author: lpc *@date: 3/12/2021 上午 10:44 *@describe: *@vision */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    真实的开发一般用json传递</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lpc"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    String jsonUser = new ObjectMapper().writeValueAsString(user);</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><img src="/2022/01/08/redis/image-20211203105343593.png" alt="image-20211203105343593"></p><p>数据必须序列化才能传输，我们可以通过jackson序列化也可以实现Serializable接口序列化</p><p>后续我们定制RedisTemplate就可以对其进行修改。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lpc<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: lpc * @date: 3/12/2021 上午 10:41 * @describe: * @vision */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//    编写我们自己都redistemplate</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我们为了自己开发方便，一般直接使用 &lt;String, Object></span>    RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Json序列化配置</span>    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// String 的序列化</span>    StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>    template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>    template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>    template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>    template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> template<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再次测试(User去掉Serializable)</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    真实的开发一般用json传递</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lpc2"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    String jsonUser = new ObjectMapper().writeValueAsString(user);</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><img src="/2022/01/08/redis/image-20211203110353250.png" alt="image-20211203110353250"></p><p>所有的redis操作，其实对于java开发人员来说，十分的简单，更重要是要去理解redis的思想和每一种数据结构的用处和作用场景！</p><h1><span id="redisconf">Redis.conf</span></h1><blockquote><h2><span id="单位">单位</span></h2></blockquote><p>容量单位不区分大小写，G和GB有区别</p><p><img src="/2022/01/08/redis/image-20211203111447734.png" alt="image-20211203111447734"></p><blockquote><h2><span id="包含">包含</span></h2></blockquote><p>可以使用 include 组合多个配置问题</p><p><img src="/2022/01/08/redis/image-20211203112129510.png" alt="image-20211203112129510"></p><blockquote><h2><span id="网络配置">网络配置</span></h2></blockquote><p><img src="/2022/01/08/redis/image-20211203112450805.png" alt="image-20211203112450805"></p><blockquote><h2><span id="通用">通用</span></h2></blockquote><pre><code>daemonize yes//默认是no 启动守护进程启动pidfile /var/run/redis_6379.pid #如果以后台方式启动，我们就需要指定一个pid文件</code></pre><p>日志</p><p><img src="/2022/01/08/redis/image-20211203112844433.png" alt="image-20211203112844433"></p><p>notice生产环境</p><p>logfile日志文件位置</p><p>默认16个数据库</p><p><img src="/2022/01/08/redis/image-20211203112953880.png" alt="image-20211203112953880"></p><p>是否显示logo</p><p><img src="/2022/01/08/redis/image-20211203113020843.png" alt="image-20211203113020843"></p><blockquote><h2><span id="快照">快照</span></h2></blockquote><p>在规定的时间内，执行了多少操作，则会持久化到.rdb.aof</p><p>redis是内存数据库，断电即失</p><p><img src="/2022/01/08/redis/image-20211203113150974.png" alt="image-20211203113150974"></p><pre><code>如果900秒内，如果至少有1个key进行了修改，我们就进行持久化如果300秒内，如果至少有10个key进行了修改，我们就进行持久化如果60秒内，如果至少有10000个key进行了修改，我们就进行持久化</code></pre><p><img src="/2022/01/08/redis/image-20211203113401853.png" alt="image-20211203113401853"></p><p>如果持久化出错，是否还继续工作</p><p><img src="/2022/01/08/redis/image-20211203113431935.png" alt="image-20211203113431935"></p><p>是否压缩rdb文件</p><p><img src="/2022/01/08/redis/image-20211203113517559.png" alt="image-20211203113517559"></p><p>保存rdb文件的时候进行错误校验</p><p><img src="/2022/01/08/redis/image-20211203113545697.png" alt="image-20211203113545697"></p><p>rdb保存的目录</p><blockquote><h2><span id="replication-主从复制讲">REPLICATION 主从复制讲</span></h2></blockquote><blockquote><h2><span id="security">SECURITY</span></h2></blockquote><p><img src="/2022/01/08/redis/image-20211203113809537.png" alt="image-20211203113809537"></p><p>设置密码(默没有密码)</p><p><img src="/2022/01/08/redis/image-20211203113852352.png" alt="image-20211203113852352"></p><p>设置密码</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> config get requirepass<span class="token comment" spellcheck="true">#获取redis的密码</span>1<span class="token punctuation">)</span> <span class="token string">"requirepass"</span>2<span class="token punctuation">)</span> <span class="token string">""</span>127.0.0.1:6379<span class="token operator">></span> config <span class="token keyword">set</span> requirepass 123456<span class="token comment" spellcheck="true">#设置密码</span>OK127.0.0.1:6379<span class="token operator">></span> config get requirepass<span class="token comment" spellcheck="true">#发现命令不能用了</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.127.0.0.1:6379<span class="token operator">></span> <span class="token function">ping</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.127.0.0.1:6379<span class="token operator">></span> auth 123456<span class="token comment" spellcheck="true">#密码登录</span>OK127.0.0.1:6379<span class="token operator">></span> config get requirepass1<span class="token punctuation">)</span> <span class="token string">"requirepass"</span>2<span class="token punctuation">)</span> <span class="token string">"123456"</span></code></pre><blockquote><h2><span id="限制clients">限制CLIENTS</span></h2></blockquote><p><img src="/2022/01/08/redis/image-20211203114233959.png" alt="image-20211203114233959"></p><p><img src="/2022/01/08/redis/image-20211203114307483.png" alt="image-20211203114307483"></p><p><img src="/2022/01/08/redis/image-20211203114406452.png" alt="image-20211203114406452"></p><p>maxmemory-policy noviction (内存到达上限后的处理策略)　　</p><pre><code>1、volatile-lru：只对设置了过期时间的key进行LRU（默认值）2、allkeys-lru：删除LRU算法的key3、volatile-random：随机删除即将过期的key4、allkeys-random：随机删除5、volatile-ttl：删除即将过期的6、noeviction：永不过期，返回错误</code></pre><blockquote><h2><span id="append-only-mode">APPEND ONLY MODE</span></h2></blockquote><p><img src="/2022/01/08/redis/image-20211203114710148.png" alt="image-20211203114710148"></p><p>默认rdb够用</p><p><img src="/2022/01/08/redis/image-20211203114745040.png" alt="image-20211203114745040"></p><p><img src="/2022/01/08/redis/image-20211203114902012.png" alt="image-20211203114902012"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># appendfsync always  #每次修改都会sync 消耗性能</span>appendfsync everysec  <span class="token comment" spellcheck="true">#每秒执行一次sync同步 可能会丢失这一秒的数据</span><span class="token comment" spellcheck="true"># appendfsync no      #不同步</span></code></pre><h1><span id="redis持久化rdb">Redis持久化——RDB</span></h1><p>面试和工作，持久化都是重点！<br>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p><h2><span id="什么是rdbredis-database">什么是RDB（Redis DataBase）</span></h2><blockquote><p>在指定时间间隔后，将内存中的数据集快照写入数据库 ；在恢复时候，直接读取快照文件，进行数据的恢复 ；<br>默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。文件名可以在配置文件中进行自定义。</p></blockquote><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。<br>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。<br>这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置！ </p><p>有时候在生产环境我们会将这个文件进行备份！<br>==rdb保存的文件是dump.rdb 都是在我们的配置文件中快照中进行配置的！==</p><h2><span id="工作原理">工作原理</span></h2><p>在进行 RDB 的时候，redis 的主线程是不会做 io 操作的，主线程会 fork 一个子线程来完成该操作；</p><ol><li>Redis 调用forks。同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li></ol><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益(因为是使用子进程进行写操作，而父进程依然可以接收来自客户端的请求。)</p><p><img src="/2022/01/08/redis/image-20211203123322632.png" alt="image-20211203123322632"></p><h2><span id="触发机制">触发机制</span></h2><ol><li>save的规则满足的情况下，会自动触发rdb原则</li><li>执行flushall命令，也会触发我们的rdb原则</li><li>退出redis，也会自动产生rdb文件</li></ol><h3><span id="save">save</span></h3><p>使用 save 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了；</p><blockquote><p>由于 save 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，save命令执行速度会非常慢，阻塞所有客户端的请求。</p></blockquote><p>示意图</p><p><img src="/2022/01/08/redis/image-20211203123416789.png" alt="image-20211203123416789"></p><h3><span id="flushall命令">flushall命令</span></h3><p>flushall 命令也会触发持久化 ；</p><p>触发持久化规则<br>满足配置条件中的触发条件 ；</p><blockquote><p>可以通过配置文件对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动进行数据集保存操作。</p></blockquote><h3><span id="bgsave">bgsave</span></h3><p>bgsave 是异步进行，进行持久化的时候，redis 还可以将继续响应客户端请求 ；</p><p><img src="/2022/01/08/redis/image-20211203123937796.png" alt="image-20211203123937796"></p><p>bgsave和save对比</p><table><thead><tr><th align="left">命令</th><th align="left">save</th><th align="left">bgsave</th></tr></thead><tbody><tr><td align="left">IO类型</td><td align="left">同步</td><td align="left">异步</td></tr><tr><td align="left">阻塞？</td><td align="left">是</td><td align="left">是（阻塞发生在fock()，通常非常快）</td></tr><tr><td align="left">复杂度</td><td align="left">O(n)</td><td align="left">O(n)</td></tr><tr><td align="left">优点</td><td align="left">不会消耗额外的内存</td><td align="left">不阻塞客户端命令</td></tr><tr><td align="left">缺点</td><td align="left">阻塞客户端命令</td><td align="left">需要fock子进程，消耗内存</td></tr></tbody></table><h2><span id="如果恢复rdb文件">如果恢复rdb文件！</span></h2><p>1、只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb 恢复其中的数据！<br>2、查看需要存在的位置</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> config get <span class="token function">dir</span>1<span class="token punctuation">)</span> <span class="token string">"dir"</span>2<span class="token punctuation">)</span> <span class="token string">"/usr/local/bin"</span> <span class="token comment" spellcheck="true"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></code></pre><blockquote><p>几乎它默认的配置就够用了，但是我们还是需要学习！</p></blockquote><h2><span id="优缺点">优缺点</span></h2><blockquote><p>优点：</p></blockquote><ol><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ol><blockquote><p>缺点：</p></blockquote><ol><li>需要一定的时间间隔进行操作，如果redis意外宕机了，这个最后一次修改的数据就没有了。</li><li>fork进程的时候，会占用一定的内容空间。</li></ol><h1><span id="redis持久化aof">Redis持久化——AOF</span></h1><p>Append Only File</p><p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍</p><p><img src="/2022/01/08/redis/image-20211203130013039.png" alt="image-20211203130013039"></p><p><strong>以日志的形式来记录每个写的操作</strong>，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p>==AOF保存的是appendonly.aof文件==</p><h2><span id="什么是aof">什么是AOF</span></h2><p> 快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p><p>appendonly no yes则表示启用AOF</p><p><strong>默认是不开启的，我们需要手动配置，然后重启redis，就可以生效了！</strong></p><pre class=" language-bash"><code class="language-bash">appendonly <span class="token function">yes</span>  <span class="token comment" spellcheck="true"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分的情况下，rdb完全够用</span>appendfilename <span class="token string">"appendonly.aof"</span>appendfsync always <span class="token comment" spellcheck="true"># 每次修改都会sync 消耗性能</span>appendfsync everysec <span class="token comment" spellcheck="true"># 每秒执行一次 sync 可能会丢失这一秒的数据</span>appendfsync no <span class="token comment" spellcheck="true"># 不执行 sync ,这时候操作系统自己同步数据，速度最快</span></code></pre><p>如果这个aof文件有错误，这时候redis是启动不起来的，我需要修改这个aof文件</p><p>redis给我们提供了一个工具<code>redis-check-aof  --fix</code></p><pre class=" language-bash"><code class="language-bash">redis-check-aof  --fix appendonly.aof<span class="token comment" spellcheck="true">#修复文件</span></code></pre><blockquote><p>重写规则</p></blockquote><p>aof默认文件无限追加！文件会越来越大</p><p>如果aof文件大于64m(定制的策略)，太大了！会fork一个新的线程来将我们的文件重写</p><h2><span id="优缺点">优缺点</span></h2><p>优点</p><ol><li>每一次修改都会同步，文件的完整性会更加好</li><li>没秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ol><p>缺点</p><ol><li>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！</li><li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ol><h2><span id="扩展">扩展：</span></h2><p>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储<br>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。<br>3、==只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化==<br>4、同时开启两种持久化方式</p><ul><li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li></ul><p>5、性能建议</p><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</li></ul><h2><span id="如何选择使用哪种持久化方式">如何选择使用哪种持久化方式？</span></h2><p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。</p><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</p><p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p><h1><span id="redis发布订阅">Redis发布订阅</span></h1><p>Redis 发布订阅(pub/sub)是一种==消息通信模式==：发送者(pub)发送消息，订阅者(sub)接收消息。微信、 微博、关注系统！</p><p>Redis 客户端可以订阅任意数量的频道。 </p><p>订阅/发布消息图： 第一个：消息发送者， 第二个：频道、 第三个：消息订阅者！</p><p><img src="/2022/01/08/redis/image-20211203152500160.png" alt="image-20211203152500160"></p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="/2022/01/08/redis/image-20211203152602865.png" alt="image-20211203152602865"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="/2022/01/08/redis/image-20211203152935113.png" alt="image-20211203152935113"></p><blockquote><p>命令</p></blockquote><p>这些命令被广泛用于构建即时通讯的通信应用，比如聊天室和实时广播、实时提醒等。</p><p><img src="/2022/01/08/redis/image-20211203153059435.png" alt="image-20211203153059435"></p><blockquote><p>测试</p></blockquote><pre class=" language-bash"><code class="language-bash">------------订阅端----------------------127.0.0.1:6379<span class="token operator">></span> subscribe kuangshenshuo <span class="token comment" spellcheck="true"># 订阅kuangshenshuo频道</span>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>        <span class="token comment" spellcheck="true"># 订阅成功的消息</span>2<span class="token punctuation">)</span> <span class="token string">"kuangshenshuo"</span>  3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"message"</span>     <span class="token comment" spellcheck="true"># 接收到来自kuangshenshuo频道的消息 "hello,kuangshen"</span>2<span class="token punctuation">)</span> <span class="token string">"kuangshenshuo"</span>   <span class="token comment" spellcheck="true">#那个频道</span>3<span class="token punctuation">)</span> <span class="token string">"hello,kuangshen"</span>   <span class="token comment" spellcheck="true">#发布了啥</span>1<span class="token punctuation">)</span> <span class="token string">"message"</span>     <span class="token comment" spellcheck="true"># 接收到来自kuangshenshuo频道的消息 "hello,redis"</span>2<span class="token punctuation">)</span> <span class="token string">"kuangshenshuo"</span>3<span class="token punctuation">)</span> <span class="token string">"hello,redis"</span>--------------消息发布端-------------------127.0.0.1:6379<span class="token operator">></span> publish kuangshenshuo hello,kuangshen<span class="token comment" spellcheck="true"># 发布消息到kuangshenshuo频道</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> publish kuangshenshuo hello,redis<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1</code></pre><h2><span id="原理">原理</span></h2><p>Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解。</p><p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p><p>每个 Redis 服务器进程都维持着一个表示服务器状态的 redis.h/redisServer 结构， 结构的 pubsub_channels 属性是一个字典， 这个字典就用于保存订阅频道的信息，其中，字典的键为正在被订阅的频道， 而字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端。</p><p><img src="/2022/01/08/redis/image-20211203154507647.png" alt="image-20211203154507647"></p><p>客户端订阅，就被链接到对应频道的链表的尾部，退订则就是将客户端节点从链表中移除。</p><h2><span id="缺点">缺点</span></h2><ol><li>如果一个客户端订阅了频道，但自己读取消息的速度却不够快的话，那么不断积压的消息会使redis输出缓冲区的体积变得越来越大，这可能使得redis本身的速度变慢，甚至直接崩溃。</li><li>这和数据传输可靠性有关，如果在订阅方断线，那么他将会丢失所有在短线期间发布者发布的消息。</li></ol><h2><span id="应用">应用</span></h2><ol><li>消息订阅：公众号订阅，微博关注等等（起始更多是使用消息队列来进行实现）</li><li>多人在线聊天室。</li></ol><p>稍微复杂的场景，我们就会使用消息中间件MQ处理。</p><h1><span id="redis主从复制">Redis主从复制</span></h1><h2><span id="概念">概念</span></h2><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（Master/Leader）,后者称为从节点（Slave/Follower）， 数据的复制是单向的！只能由主节点复制到从节点（主节点以写为主、从节点以读为主）。</p><p>==默认情况下，每台Redis服务器都是主节点==，一个主节点可以有0个或者多个从节点，但每个从节点只能由一个主节点。</p><h2><span id="作用">作用</span></h2><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余的方式。</li><li>故障恢复：当主节点故障时，从节点可以暂时替代主节点提供服务，是一种服务冗余的方式</li><li>负载均衡：在主从复制的基础上，配合读写分离，由主节点进行写操作，从节点进行读操作，分担服务器的负载；尤其是在多读少写的场景下，通过多个从节点分担负载，提高并发量。</li><li>高可用基石：主从复制还是哨兵和集群能够实施的基础。</li></ol><h2><span id="为什么使用集群">为什么使用集群</span></h2><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机），原因如下：</p><p>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</p><p>2、从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。</p><p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p><p>对于这种场景，我们可以使如下这种架构：</p><p><img src="/2022/01/08/redis/image-20211203155140014.png" alt="image-20211203155140014"></p><p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！</p><p>架构中经常使用！ 一主二从！</p><p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用Redis！</p><p><strong>总结</strong></p><ol><li>单台服务器难以负载大量的请求</li><li>单台服务器故障率高，系统崩坏概率大</li><li>单台服务器内存容量有限。</li></ol><h2><span id="环境配置">环境配置</span></h2><p>只配置从库，不用配置主库！</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> info replication <span class="token comment" spellcheck="true">#查看当前库的信息</span><span class="token comment" spellcheck="true"># Replication</span>role:master  <span class="token comment" spellcheck="true">#角色</span>connected_slaves:0 <span class="token comment" spellcheck="true">#从机</span>master_replid:095c10fdbaefd02f09b5d93be7ade52f9967394emaster_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0</code></pre><p>复制3个配置文件，然后修改对应的信息</p><ol><li>端口</li><li>pid名字</li><li>log文件名</li><li>dump.rdb名字</li></ol><p>启动单机多服务集群：</p><p><img src="/2022/01/08/redis/image-20211203181502026.png" alt="image-20211203181502026"></p><h2><span id="一主二从配置">一主二从配置</span></h2><p>==默认情况下，每台Redis服务器都是主节点==；我们一般情况下只用配置从机就好了！</p><p>认老大！一主（79）二从（80，81）</p><p>使用SLAVEOF host port就可以为从机配置主机了。</p><p><img src="/2022/01/08/redis/image-20211203182234933.png" alt="image-20211203182234933"></p><p><strong>说明</strong></p><ul><li><code>SLAVEOF host 6379</code> 找谁当自己的老大！</li><li><code>role:slave</code> # 当前角色是从机</li><li><code>master_host:127.0.0.1</code> # 可以的看到主机的信息</li></ul><p>然后主机上也能看到从机的状态：</p><p><img src="/2022/01/08/redis/image-20211203182417295.png" alt="image-20211203182417295"></p><p><strong>说明</strong></p><ul><li><code>connected_slaves:1</code> # 多了从机的配置</li><li><code>slave0:ip=127.0.0.1,port=6380,state=online,offset=42,lag=1</code> # 多了从机的配置</li></ul><p>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的！</p><h2><span id="使用规则">使用规则</span></h2><p>1.从机只能读，不能写，主机可读可写但是多用于写。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1OK127.0.0.1:6379<span class="token operator">></span> get k1<span class="token string">"v1"</span>--从机可以读取主节点的key，但不能写--127.0.0.1:6380<span class="token operator">></span> get k1<span class="token string">"v1"</span>127.0.0.1:6380<span class="token operator">></span> <span class="token keyword">set</span> k2 v2<span class="token punctuation">(</span>error<span class="token punctuation">)</span> READONLY You can<span class="token string">'t write against a read only replica.127.0.0.1:6381> get k1"v1"127.0.0.1:6381> set k2 v2(error) READONLY You can'</span>t <span class="token function">write</span> against a <span class="token function">read</span> only replica.</code></pre><p>2.==当主机断电宕机后，默认情况下从机的角色不会发生变化==，集群中只是失去了写操作，当主机恢复以后，又会连接上从机恢复原状。</p><p>3.当从机断电宕机后，若不是使用配置文件配置的从机，再次启动后作为主机是无法获取之前主机的数据的，若此时重新配置称为从机，又可以获取到主机的所有数据。这里就要提到一个同步原理。</p><p>4.第二条中提到，默认情况下，主机故障后，不会出现新的主机，有两种方式可以产生新的主机：</p><ul><li>从机手动执行命令slaveof no one,这样执行以后从机会独立出来成为一个主机</li><li>使用哨兵模式（自动选举）</li></ul><h2><span id="复制原理">复制原理</span></h2><p>==Slave 启动成功连接到 master 后会发送一个sync同步命令==(全量复制)</p><p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p><p><strong>全量复制</strong>：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p><p><strong>增量复制</strong>：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步</p><p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中看到！</p><blockquote><p>层层链路</p></blockquote><p>79 - 80 - 81</p><p>79是80的主节点</p><p>80是81的主节点</p><p>80是主还是从？</p><p>从</p><blockquote><p>如果没有老大了，这个时候能不能选择出来一个老大?</p></blockquote><p>原始手动：</p><p>谋权篡位：如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code>让自己变成主机！其他的节点就可以手动连接到最新的主节点（手动）！如果这个时候老大修复了，那么就重新连接！</p><h1><span id="哨兵模式">哨兵模式</span></h1><p>（自动选举老大的模式）</p><h2><span id="概述">概述</span></h2><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</p><p>Redis从2.8开始正式提供了Sentinel（哨兵） 架构来解决这个问题。<strong>能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</strong></p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><p><img src="/2022/01/08/redis/image-20211203191620201.png" alt="image-20211203191620201"></p><p>哨兵的作用：</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了<strong>多哨兵模式</strong>。</p><p><img src="/2022/01/08/redis/image-20211203192053063.png" alt="image-20211203192053063"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</p><h2><span id="测试">测试</span></h2><p>目前状态是：一主二从</p><p>1、配置哨兵配置文件 sentinel.conf</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sentinel monitor 被监控的名称 host port 1</span>sentinel monitor myredis 127.0.0.1 6379 1</code></pre><p>后面的这个数字1，代表有一个哨兵认为它挂了，他就挂了，就开始选举</p><p>2、启动哨兵！</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DTXG bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-sentinel kconfig/sentinel.conf </span></code></pre><p><img src="/2022/01/08/redis/image-20211203193232196.png" alt="image-20211203193232196"></p><p>3、此时哨兵监视着我们的主机6379，当我们断开主机后：</p><p><img src="/2022/01/08/redis/image-20211203193827419.png" alt="image-20211203193827419"></p><p>如果此时主机回来了，那他也只能归并到新的主机下，当作从机，这就是哨兵模式的规则！</p><h2><span id="哨兵模式优缺点">哨兵模式优缺点</span></h2><p>优点：</p><ol><li>哨兵集群，基于主从复制模式，所有主从复制的优点，它都有</li><li>主从可以切换，故障可以转移，系统的可用性更好</li><li>哨兵模式是主从模式的升级，手动到自动，更加健壮 缺点：</li></ol><p>缺点：</p><ol><li>Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多配置项</li></ol><h2><span id="哨兵模式的全部配置">哨兵模式的全部配置</span></h2><p>完整的哨兵模式配置文件 sentinel.conf</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Example sentinel.conf</span><span class="token comment" spellcheck="true">#哨兵sentinel实例运行的端口 默认26379</span>port 26379<span class="token comment" spellcheck="true">#哨兵sentinel的工作目录</span><span class="token function">dir</span> /tmp<span class="token comment" spellcheck="true">#哨兵sentinel监控的redis主节点的 ip port</span><span class="token comment" spellcheck="true">#master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span><span class="token comment" spellcheck="true">#quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><span class="token comment" spellcheck="true">#sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum></span>sentinel monitor mymaster 127.0.0.1 6379 2<span class="token comment" spellcheck="true">#当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><span class="token comment" spellcheck="true">#设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><span class="token comment" spellcheck="true">#sentinel auth-pass &lt;master-name> &lt;password></span>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd<span class="token comment" spellcheck="true">#指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><span class="token comment" spellcheck="true">#sentinel down-after-milliseconds &lt;master-name> &lt;milliseconds></span>sentinel down-after-milliseconds mymaster 30000<span class="token comment" spellcheck="true">#这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span><span class="token comment" spellcheck="true">#这个数字越小，完成failover所需的时间就越长，</span><span class="token comment" spellcheck="true">#但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><span class="token comment" spellcheck="true">#可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><span class="token comment" spellcheck="true">#sentinel parallel-syncs &lt;master-name> &lt;numslaves></span>sentinel parallel-syncs mymaster 1<span class="token comment" spellcheck="true">#故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span><span class="token comment" spellcheck="true">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><span class="token comment" spellcheck="true">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><span class="token comment" spellcheck="true">#3.当想要取消一个正在进行的failover所需要的时间。</span><span class="token comment" spellcheck="true">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><span class="token comment" spellcheck="true">#默认三分钟</span><span class="token comment" spellcheck="true">#sentinel failover-timeout &lt;master-name> &lt;milliseconds></span>sentinel failover-timeout mymaster 180000<span class="token comment" spellcheck="true">#SCRIPTS EXECUTION</span><span class="token comment" spellcheck="true">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><span class="token comment" spellcheck="true">#对于脚本的运行结果有以下规则：</span><span class="token comment" spellcheck="true">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><span class="token comment" spellcheck="true">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><span class="token comment" spellcheck="true">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><span class="token comment" spellcheck="true">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><span class="token comment" spellcheck="true">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><span class="token comment" spellcheck="true">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。</span><span class="token comment" spellcheck="true">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><span class="token comment" spellcheck="true">#通知脚本</span><span class="token comment" spellcheck="true">#sentinel notification-script &lt;master-name> &lt;script-path></span>sentinel notification-script mymaster /var/redis/notify.sh<span class="token comment" spellcheck="true">#客户端重新配置主节点参数脚本</span><span class="token comment" spellcheck="true">#当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><span class="token comment" spellcheck="true">#以下参数将会在调用脚本时传给脚本:</span><span class="token comment" spellcheck="true">#&lt;master-name> &lt;role> &lt;state> &lt;from-ip> &lt;from-port> &lt;to-ip> &lt;to-port></span><span class="token comment" spellcheck="true">#目前&lt;state>总是“failover”,</span><span class="token comment" spellcheck="true">#&lt;role>是“leader”或者“observer”中的一个。</span><span class="token comment" spellcheck="true">#参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><span class="token comment" spellcheck="true">#这个脚本应该是通用的，能被多次调用，不是针对性的。</span><span class="token comment" spellcheck="true">#sentinel client-reconfig-script &lt;master-name> &lt;script-path></span>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</code></pre><h1><span id="缓存穿透与雪崩">缓存穿透与雪崩</span></h1><h2><span id="缓存穿透即查询不到">缓存穿透（即查询不到）</span></h2><h3><span id="概念">概念</span></h3><p>在默认情况下，用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再在数据库中进行查找，数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）缓存都没有命中的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。网络安全中也有人恶意使用这种手段进行攻击被称为洪水攻击。</p><p><img src="/2022/01/08/redis/image-20211203200028925.png" alt="image-20211203200028925"></p><h3><span id="解决方案">解决方案</span></h3><p><strong>布隆过滤器</strong></p><p>对所有可能查询的参数以Hash的形式存储，以便快速确定是否存在这个值，在控制层先进行拦截校验，校验不通过直接打回，减轻了存储系统的压力。</p><p><img src="/2022/01/08/redis/image-20211203200333546.png" alt="image-20211203200333546"></p><p><strong>缓存空对象</strong></p><p>一次请求若在缓存和数据库中都没找到，就在缓存中方一个空对象用于处理后续这个请求。</p><p><img src="/2022/01/08/redis/image-20211203200527253.png" alt="image-20211203200527253"></p><p>这样做有一个缺陷：存储空对象也需要空间，大量的空对象会耗费一定的空间，存储效率并不高。解决这个缺陷的方式就是设置较短过期时间</p><p>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p><h2><span id="缓存击穿即量太大缓存过期">缓存击穿（即量太大，缓存过期）</span></h2><h3><span id="概念">概念</span></h3><p>相较于缓存穿透，缓存击穿的目的性更强，一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。这就是缓存被击穿，只是针对其中某个key的缓存不可用而导致击穿，但是其他的key依然可以使用缓存响应。</p><p> 比如热搜排行上，一个热点新闻被同时大量访问就可能导致缓存击穿。</p><h3><span id="解决方案">解决方案</span></h3><p>1.设置热点数据永不过期</p><p>这样就不会出现热点数据过期的情况，但是当Redis内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。</p><p>2.加互斥锁(分布式锁)</p><p>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。</p><h2><span id="缓存雪崩">缓存雪崩</span></h2><h3><span id="概念">概念</span></h3><p>大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。</p><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机！</p><p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p><img src="/2022/01/08/redis/image-20211203201418097.png" alt="image-20211203201418097"></p><p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p><h3><span id="解决方案">解决方案</span></h3><blockquote><p>redis高可用</p></blockquote><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</p><blockquote><p>限流降级</p></blockquote><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><blockquote><p>数据预热</p></blockquote><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
